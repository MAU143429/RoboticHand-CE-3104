
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightLETrightASSIGNleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENA ARROW ASSIGN ASTR BREAK COMMA DELAY DIVIDE DOTDOT ELSE ELSEIF EQEQ EXPR FALSE FN FOR GT GTE I ID IF IN INT INTEGER LCRLBRACKET LET LOOP LPAREN LSQRBRACKET LT LTE M MAIN MIL MIN MINUS MOVE OPERA P PLUS PRINT Q QUOT RANGE RCRLBRACKET RETURN RPAREN RSQRBRACKET SEG SEMICOLON STRING T TIMES TRUE WHILE WRONG_ID\n    main : FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET\n    \n    line : loop\n         | for\n         | let\n         | move\n         | delay\n         | println\n         | empty\n    \n    loop : LOOP LCRLBRACKET line RCRLBRACKET line\n    \n    for : FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line\n    \n    move : MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line\n    \n    finger : P\n           | I\n           | M\n           | A\n           | Q\n           | T\n    \n    delay : DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line\n    \n    unit : QUOT MIN QUOT\n         | QUOT MIL QUOT\n         | QUOT SEG QUOT\n    \n    println : PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line\n            | PRINT EXPR LPAREN STRING RPAREN SEMICOLON line\n\n    \n    text : ID\n    \n    let : LET ID ASSIGN INT SEMICOLON line\n             | LET ID ASSIGN expression SEMICOLON line\n    \n    expression : TRUE\n               | FALSE\n               | ID\n               | opera\n    \n    opera : OPERA LPAREN operator COMMA operand COMMA operand RPAREN\n    \n    operator : PLUS\n             | MINUS\n             | DIVIDE\n             | ASTR\n             | TIMES\n    \n    operand : INT\n            | ID\n            | opera\n    \n    empty :\n    '
    
_lr_action_items = {'FN':([0,],[2,]),'$end':([1,21,],[0,-1,]),'MAIN':([2,],[3,]),'LPAREN':([3,18,19,27,42,],[4,25,26,33,51,]),'RPAREN':([4,36,39,40,41,46,53,72,76,78,79,80,85,86,87,96,98,],[5,-29,-27,-28,-30,57,68,81,88,-19,-20,-21,-37,-38,-39,98,-31,]),'LCRLBRACKET':([5,15,58,],[6,22,74,]),'LOOP':([6,22,34,49,50,73,74,77,90,91,93,],[15,15,15,15,15,15,15,15,15,15,15,]),'FOR':([6,22,34,49,50,73,74,77,90,91,93,],[16,16,16,16,16,16,16,16,16,16,16,]),'LET':([6,22,34,49,50,73,74,77,90,91,93,],[17,17,17,17,17,17,17,17,17,17,17,]),'MOVE':([6,22,34,49,50,73,74,77,90,91,93,],[18,18,18,18,18,18,18,18,18,18,18,]),'DELAY':([6,22,34,49,50,73,74,77,90,91,93,],[19,19,19,19,19,19,19,19,19,19,19,]),'PRINT':([6,22,34,49,50,73,74,77,90,91,93,],[20,20,20,20,20,20,20,20,20,20,20,]),'RCRLBRACKET':([6,7,8,9,10,11,12,13,14,22,28,34,47,49,50,59,60,73,74,77,82,83,89,90,91,93,94,95,97,],[-40,21,-2,-3,-4,-5,-6,-7,-8,-40,34,-40,-9,-40,-40,-25,-26,-40,-40,-40,-23,91,-18,-40,-40,-40,-22,-10,-11,]),'ID':([16,17,30,31,45,67,75,92,],[23,24,36,43,56,36,86,86,]),'EXPR':([20,],[27,]),'IN':([23,],[29,]),'ASSIGN':([24,],[30,]),'QUOT':([25,33,43,44,55,56,69,70,71,],[31,45,52,54,72,-24,78,79,80,]),'INT':([26,29,30,48,75,92,],[32,35,37,58,85,85,]),'TRUE':([30,67,],[39,39,]),'FALSE':([30,67,],[40,40,]),'OPERA':([30,67,75,92,],[42,42,42,42,]),'COMMA':([32,52,61,62,63,64,65,66,84,85,86,87,98,],[44,67,75,-32,-33,-34,-35,-36,92,-37,-38,-39,-31,]),'STRING':([33,],[46,]),'DOTDOT':([35,],[48,]),'SEMICOLON':([36,37,38,39,40,41,57,68,81,88,98,],[-29,49,50,-27,-28,-30,73,77,90,93,-31,]),'PLUS':([51,],[62,]),'MINUS':([51,],[63,]),'DIVIDE':([51,],[64,]),'ASTR':([51,],[65,]),'TIMES':([51,],[66,]),'MIN':([54,],[69,]),'MIL':([54,],[70,]),'SEG':([54,],[71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'line':([6,22,34,49,50,73,74,77,90,91,93,],[7,28,47,59,60,82,83,89,94,95,97,]),'loop':([6,22,34,49,50,73,74,77,90,91,93,],[8,8,8,8,8,8,8,8,8,8,8,]),'for':([6,22,34,49,50,73,74,77,90,91,93,],[9,9,9,9,9,9,9,9,9,9,9,]),'let':([6,22,34,49,50,73,74,77,90,91,93,],[10,10,10,10,10,10,10,10,10,10,10,]),'move':([6,22,34,49,50,73,74,77,90,91,93,],[11,11,11,11,11,11,11,11,11,11,11,]),'delay':([6,22,34,49,50,73,74,77,90,91,93,],[12,12,12,12,12,12,12,12,12,12,12,]),'println':([6,22,34,49,50,73,74,77,90,91,93,],[13,13,13,13,13,13,13,13,13,13,13,]),'empty':([6,22,34,49,50,73,74,77,90,91,93,],[14,14,14,14,14,14,14,14,14,14,14,]),'expression':([30,67,],[38,76,]),'opera':([30,67,75,92,],[41,41,87,87,]),'unit':([44,],[53,]),'text':([45,],[55,]),'operator':([51,],[61,]),'operand':([75,92,],[84,96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET','main',7,'p_main','SyntacticAnalizer.py',17),
  ('line -> loop','line',1,'p_program','SyntacticAnalizer.py',22),
  ('line -> for','line',1,'p_program','SyntacticAnalizer.py',23),
  ('line -> let','line',1,'p_program','SyntacticAnalizer.py',24),
  ('line -> move','line',1,'p_program','SyntacticAnalizer.py',25),
  ('line -> delay','line',1,'p_program','SyntacticAnalizer.py',26),
  ('line -> println','line',1,'p_program','SyntacticAnalizer.py',27),
  ('line -> empty','line',1,'p_program','SyntacticAnalizer.py',28),
  ('loop -> LOOP LCRLBRACKET line RCRLBRACKET line','loop',5,'p_loop','SyntacticAnalizer.py',38),
  ('for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line','for',10,'p_for','SyntacticAnalizer.py',51),
  ('move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line','move',10,'p_move','SyntacticAnalizer.py',63),
  ('finger -> P','finger',1,'p_finger','SyntacticAnalizer.py',70),
  ('finger -> I','finger',1,'p_finger','SyntacticAnalizer.py',71),
  ('finger -> M','finger',1,'p_finger','SyntacticAnalizer.py',72),
  ('finger -> A','finger',1,'p_finger','SyntacticAnalizer.py',73),
  ('finger -> Q','finger',1,'p_finger','SyntacticAnalizer.py',74),
  ('finger -> T','finger',1,'p_finger','SyntacticAnalizer.py',75),
  ('delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line','delay',8,'p_delay','SyntacticAnalizer.py',87),
  ('unit -> QUOT MIN QUOT','unit',3,'p_unit','SyntacticAnalizer.py',94),
  ('unit -> QUOT MIL QUOT','unit',3,'p_unit','SyntacticAnalizer.py',95),
  ('unit -> QUOT SEG QUOT','unit',3,'p_unit','SyntacticAnalizer.py',96),
  ('println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line','println',9,'p_println','SyntacticAnalizer.py',106),
  ('println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line','println',7,'p_println','SyntacticAnalizer.py',107),
  ('text -> ID','text',1,'p_text','SyntacticAnalizer.py',115),
  ('let -> LET ID ASSIGN INT SEMICOLON line','let',6,'p_let','SyntacticAnalizer.py',126),
  ('let -> LET ID ASSIGN expression SEMICOLON line','let',6,'p_let','SyntacticAnalizer.py',127),
  ('expression -> TRUE','expression',1,'p_expression_bool','SyntacticAnalizer.py',135),
  ('expression -> FALSE','expression',1,'p_expression_bool','SyntacticAnalizer.py',136),
  ('expression -> ID','expression',1,'p_expression_bool','SyntacticAnalizer.py',137),
  ('expression -> opera','expression',1,'p_expression_bool','SyntacticAnalizer.py',138),
  ('opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN','opera',8,'p_opera','SyntacticAnalizer.py',149),
  ('operator -> PLUS','operator',1,'p_operators','SyntacticAnalizer.py',156),
  ('operator -> MINUS','operator',1,'p_operators','SyntacticAnalizer.py',157),
  ('operator -> DIVIDE','operator',1,'p_operators','SyntacticAnalizer.py',158),
  ('operator -> ASTR','operator',1,'p_operators','SyntacticAnalizer.py',159),
  ('operator -> TIMES','operator',1,'p_operators','SyntacticAnalizer.py',160),
  ('operand -> INT','operand',1,'p_operand','SyntacticAnalizer.py',166),
  ('operand -> ID','operand',1,'p_operand','SyntacticAnalizer.py',167),
  ('operand -> opera','operand',1,'p_operand','SyntacticAnalizer.py',168),
  ('empty -> <empty>','empty',0,'p_empty','SyntacticAnalizer.py',180),
]
