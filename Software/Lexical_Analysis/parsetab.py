
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightLETrightASSIGNleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENARROW ASSIGN BREAK COMMA DELAY DIVIDE DOTDOT ELSE ELSEIF EQEQ EXPR FALSE FN FOR GT GTE ID IF INT INTEGER LCRLBRACKET LET LOOP LPAREN LSQRBRACKET LT LTE MAIN MIL MIN MINUS MOVE OPERA PLUS PRINT QUOT RANGE RCRLBRACKET RETURN RPAREN RSQRBRACKET SEG SEMICOLON TIMES TMTM TRUE WHILE WRONG_ID\n    line : variable\n         | delay\n         | println\n         | opera\n         | empty\n    \n    variable : LET ID ASSIGN expression SEMICOLON line\n    \n    expression : INT\n               | TRUE\n               | FALSE\n    \n    expression : ID\n    \n    delay : DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line\n    \n    unit : QUOT MIN QUOT\n         | QUOT MIL QUOT\n         | QUOT SEG QUOT\n    \n    println : PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line\n\n    \n    text : ID\n\n    \n    opera : OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line\n    \n    operators : PLUS\n              | MINUS\n              | DIVIDE\n              | TIMES TIMES\n              | TIMES\n    \n    operand : INT\n            | ID\n            | OPERA\n    \n    empty :\n    '
    
_lr_action_items = {'LET':([0,32,48,55,58,],[7,7,7,7,7,]),'DELAY':([0,32,48,55,58,],[8,8,8,8,8,]),'PRINT':([0,32,48,55,58,],[9,9,9,9,9,]),'OPERA':([0,30,32,47,48,55,58,],[10,37,10,37,10,10,10,]),'$end':([0,1,2,3,4,5,6,32,41,48,54,55,57,58,59,],[-26,0,-1,-2,-3,-4,-5,-26,-6,-26,-11,-26,-15,-26,-17,]),'ID':([7,15,29,30,47,],[11,23,36,40,40,]),'LPAREN':([8,10,13,],[12,14,17,]),'EXPR':([9,],[13,]),'ASSIGN':([11,],[15,]),'INT':([12,15,30,47,],[16,25,39,39,]),'PLUS':([14,],[19,]),'MINUS':([14,],[20,]),'DIVIDE':([14,],[21,]),'TIMES':([14,22,],[22,31,]),'TRUE':([15,],[26,]),'FALSE':([15,],[27,]),'COMMA':([16,18,19,20,21,22,31,37,38,39,40,],[28,30,-18,-19,-20,-22,-21,-25,47,-23,-24,]),'QUOT':([17,28,35,36,43,44,45,],[29,34,46,-16,49,50,51,]),'SEMICOLON':([23,24,25,26,27,42,52,56,],[-10,32,-7,-8,-9,48,55,58,]),'RPAREN':([33,37,39,40,46,49,50,51,53,],[42,-25,-23,-24,52,-12,-13,-14,56,]),'MIN':([34,],[43,]),'MIL':([34,],[44,]),'SEG':([34,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line':([0,32,48,55,58,],[1,41,54,57,59,]),'variable':([0,32,48,55,58,],[2,2,2,2,2,]),'delay':([0,32,48,55,58,],[3,3,3,3,3,]),'println':([0,32,48,55,58,],[4,4,4,4,4,]),'opera':([0,32,48,55,58,],[5,5,5,5,5,]),'empty':([0,32,48,55,58,],[6,6,6,6,6,]),'operators':([14,],[18,]),'expression':([15,],[24,]),'unit':([28,],[33,]),'text':([29,],[35,]),'operand':([30,47,],[38,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line","S'",1,None,None,None),
  ('line -> variable','line',1,'p_program','SyntacticAnalizer.py',16),
  ('line -> delay','line',1,'p_program','SyntacticAnalizer.py',17),
  ('line -> println','line',1,'p_program','SyntacticAnalizer.py',18),
  ('line -> opera','line',1,'p_program','SyntacticAnalizer.py',19),
  ('line -> empty','line',1,'p_program','SyntacticAnalizer.py',20),
  ('variable -> LET ID ASSIGN expression SEMICOLON line','variable',6,'p_variable','SyntacticAnalizer.py',30),
  ('expression -> INT','expression',1,'p_expression','SyntacticAnalizer.py',37),
  ('expression -> TRUE','expression',1,'p_expression','SyntacticAnalizer.py',38),
  ('expression -> FALSE','expression',1,'p_expression','SyntacticAnalizer.py',39),
  ('expression -> ID','expression',1,'p_expression_var','SyntacticAnalizer.py',45),
  ('delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line','delay',8,'p_delay','SyntacticAnalizer.py',57),
  ('unit -> QUOT MIN QUOT','unit',3,'p_unit','SyntacticAnalizer.py',64),
  ('unit -> QUOT MIL QUOT','unit',3,'p_unit','SyntacticAnalizer.py',65),
  ('unit -> QUOT SEG QUOT','unit',3,'p_unit','SyntacticAnalizer.py',66),
  ('println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line','println',9,'p_println','SyntacticAnalizer.py',76),
  ('text -> ID','text',1,'p_text','SyntacticAnalizer.py',85),
  ('opera -> OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line','opera',10,'p_opera','SyntacticAnalizer.py',96),
  ('operators -> PLUS','operators',1,'p_operators','SyntacticAnalizer.py',103),
  ('operators -> MINUS','operators',1,'p_operators','SyntacticAnalizer.py',104),
  ('operators -> DIVIDE','operators',1,'p_operators','SyntacticAnalizer.py',105),
  ('operators -> TIMES TIMES','operators',2,'p_operators','SyntacticAnalizer.py',106),
  ('operators -> TIMES','operators',1,'p_operators','SyntacticAnalizer.py',107),
  ('operand -> INT','operand',1,'p_operand','SyntacticAnalizer.py',113),
  ('operand -> ID','operand',1,'p_operand','SyntacticAnalizer.py',114),
  ('operand -> OPERA','operand',1,'p_operand','SyntacticAnalizer.py',115),
  ('empty -> <empty>','empty',0,'p_empty','SyntacticAnalizer.py',126),
]
