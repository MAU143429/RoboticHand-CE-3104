
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightLETrightASSIGNleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENA ARROW ASSIGN BREAK COMMA DELAY DIVIDE DOTDOT ELSE ELSEIF EQEQ FALSE FN FOR GT GTE I ID IF IN INT INTEGER LCRLBRACKET LET LOOP LPAREN LSQRBRACKET LT LTE M MAIN MINUS MOVE OPERA P PLUS PRINT Q QUOT RANGE RCRLBRACKET RETURN RPAREN RSQRBRACKET SEMICOLON T TIMES TRUE WHILE WRONG_ID\n    main : FN MAIN LCRLBRACKET line RCRLBRACKET\n    \n    line : for\n         | variable\n         | move\n         | delay\n         | empty\n    \n    for : FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET\n    \n    variable : LET ID ASSIGN expression SEMICOLON line\n    \n    expression : ID\n    \n    expression : INT\n               | bool\n    \n    bool : TRUE\n         | FALSE\n    \n    move : MOVE LPAREN QUOT finger QUOT COMMA bool RPAREN SEMICOLON line\n    \n    finger : P\n           | I\n           | M\n           | A\n           | Q\n           | T\n    \n    delay : DELAY line\n    \n    empty :\n    '
    
_lr_action_items = {'FN':([0,],[2,]),'$end':([1,15,],[0,-1,]),'MAIN':([2,],[3,]),'LCRLBRACKET':([3,40,],[4,43,]),'FOR':([4,14,38,43,48,],[11,11,11,11,11,]),'LET':([4,14,38,43,48,],[12,12,12,12,12,]),'MOVE':([4,14,38,43,48,],[13,13,13,13,13,]),'DELAY':([4,14,38,43,48,],[14,14,14,14,14,]),'RCRLBRACKET':([4,5,6,7,8,9,10,14,19,38,41,43,45,47,48,49,],[-22,15,-2,-3,-4,-5,-6,-22,-21,-22,-8,-22,47,-7,-22,-14,]),'ID':([11,12,21,],[16,17,24,]),'LPAREN':([13,],[18,]),'IN':([16,],[20,]),'ASSIGN':([17,],[21,]),'QUOT':([18,30,31,32,33,34,35,36,],[22,39,-15,-16,-17,-18,-19,-20,]),'INT':([20,21,37,],[23,26,40,]),'TRUE':([21,42,],[28,28,]),'FALSE':([21,42,],[29,29,]),'P':([22,],[31,]),'I':([22,],[32,]),'M':([22,],[33,]),'A':([22,],[34,]),'Q':([22,],[35,]),'T':([22,],[36,]),'DOTDOT':([23,],[37,]),'SEMICOLON':([24,25,26,27,28,29,46,],[-9,38,-10,-11,-12,-13,48,]),'RPAREN':([28,29,44,],[-12,-13,46,]),'COMMA':([39,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'line':([4,14,38,43,48,],[5,19,41,45,49,]),'for':([4,14,38,43,48,],[6,6,6,6,6,]),'variable':([4,14,38,43,48,],[7,7,7,7,7,]),'move':([4,14,38,43,48,],[8,8,8,8,8,]),'delay':([4,14,38,43,48,],[9,9,9,9,9,]),'empty':([4,14,38,43,48,],[10,10,10,10,10,]),'expression':([21,],[25,]),'bool':([21,42,],[27,44,]),'finger':([22,],[30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> FN MAIN LCRLBRACKET line RCRLBRACKET','main',5,'p_main','SyntacticAnalizer.py',15),
  ('line -> for','line',1,'p_program','SyntacticAnalizer.py',20),
  ('line -> variable','line',1,'p_program','SyntacticAnalizer.py',21),
  ('line -> move','line',1,'p_program','SyntacticAnalizer.py',22),
  ('line -> delay','line',1,'p_program','SyntacticAnalizer.py',23),
  ('line -> empty','line',1,'p_program','SyntacticAnalizer.py',24),
  ('for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET','for',9,'p_for','SyntacticAnalizer.py',29),
  ('variable -> LET ID ASSIGN expression SEMICOLON line','variable',6,'p_variable','SyntacticAnalizer.py',34),
  ('expression -> ID','expression',1,'p_expression_var','SyntacticAnalizer.py',41),
  ('expression -> INT','expression',1,'p_expression','SyntacticAnalizer.py',47),
  ('expression -> bool','expression',1,'p_expression','SyntacticAnalizer.py',48),
  ('bool -> TRUE','bool',1,'p_expression_bool','SyntacticAnalizer.py',54),
  ('bool -> FALSE','bool',1,'p_expression_bool','SyntacticAnalizer.py',55),
  ('move -> MOVE LPAREN QUOT finger QUOT COMMA bool RPAREN SEMICOLON line','move',10,'p_move','SyntacticAnalizer.py',61),
  ('finger -> P','finger',1,'p_finger','SyntacticAnalizer.py',68),
  ('finger -> I','finger',1,'p_finger','SyntacticAnalizer.py',69),
  ('finger -> M','finger',1,'p_finger','SyntacticAnalizer.py',70),
  ('finger -> A','finger',1,'p_finger','SyntacticAnalizer.py',71),
  ('finger -> Q','finger',1,'p_finger','SyntacticAnalizer.py',72),
  ('finger -> T','finger',1,'p_finger','SyntacticAnalizer.py',73),
  ('delay -> DELAY line','delay',2,'p_delay','SyntacticAnalizer.py',79),
  ('empty -> <empty>','empty',0,'p_empty','SyntacticAnalizer.py',89),
]
