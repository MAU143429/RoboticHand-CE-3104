Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    INTEGER
    RANGE
    RETURN
    WRONG_ID

Grammar

Rule 0     S' -> line
Rule 1     line -> main line
Rule 2     line -> loop line
Rule 3     line -> for line
Rule 4     line -> while line
Rule 5     line -> if line
Rule 6     line -> if elseiforelse
Rule 7     line -> let line
Rule 8     line -> move line
Rule 9     line -> moveList line
Rule 10    line -> delay line
Rule 11    line -> println line
Rule 12    line -> break line
Rule 13    line -> empty
Rule 14    main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
Rule 15    loop -> LOOP LCRLBRACKET line RCRLBRACKET
Rule 16    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
Rule 17    while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
Rule 18    while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET
Rule 19    move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
Rule 20    moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
Rule 21    fingerList -> STRING COMMA STRING
Rule 22    fingerList -> STRING COMMA fingerList
Rule 23    delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
Rule 24    unit -> QUOT MIN QUOT
Rule 25    unit -> QUOT MIL QUOT
Rule 26    unit -> QUOT SEG QUOT
Rule 27    println -> PRINT EXPR LPAREN args RPAREN SEMICOLON
Rule 28    args -> INT body
Rule 29    args -> ID body
Rule 30    args -> opera body
Rule 31    args -> TRUE body
Rule 32    args -> FALSE body
Rule 33    args -> STRING body
Rule 34    body -> COMMA args
Rule 35    body -> COMMA body
Rule 36    body -> empty empty
Rule 37    text -> QUOT ID QUOT
Rule 38    elseiforelse -> elseif line
Rule 39    elseiforelse -> elseif elseiforelse
Rule 40    elseiforelse -> else line
Rule 41    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET
Rule 42    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET
Rule 43    else -> ELSE LCRLBRACKET line RCRLBRACKET
Rule 44    compare -> EQEQ
Rule 45    compare -> LTE
Rule 46    compare -> GTE
Rule 47    compare -> LT
Rule 48    compare -> GT
Rule 49    expression -> INT
Rule 50    expression -> TRUE
Rule 51    expression -> FALSE
Rule 52    expression -> opera
Rule 53    expression -> ID
Rule 54    let -> LET ID ASSIGN operand SEMICOLON
Rule 55    let -> LET ID ASSIGN bool SEMICOLON
Rule 56    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN
Rule 57    operator -> PLUS
Rule 58    operator -> MINUS
Rule 59    operator -> DIVIDE
Rule 60    operator -> ASTR
Rule 61    operator -> TIMES
Rule 62    operand -> INT
Rule 63    operand -> opera
Rule 64    operand -> ID
Rule 65    bool -> TRUE
Rule 66    bool -> FALSE
Rule 67    bool -> ID
Rule 68    break -> BREAK
Rule 69    empty -> <empty>

Terminals, with rules where they appear

ARROW                : 
ASSIGN               : 54 55
ASTR                 : 60
BREAK                : 68
COMMA                : 19 20 21 22 23 34 35 56 56
DELAY                : 23
DIVIDE               : 59
DOTDOT               : 16
ELSE                 : 43
ELSEIF               : 42
EQEQ                 : 44
EXPR                 : 27
FALSE                : 32 51 66
FN                   : 14
FOR                  : 16
GT                   : 48
GTE                  : 46
ID                   : 16 29 37 53 54 55 64 67
IF                   : 41
IN                   : 16
INT                  : 16 16 23 28 49 62
INTEGER              : 
LCRLBRACKET          : 14 15 16 17 18 41 42 43
LET                  : 54 55
LOOP                 : 15
LPAREN               : 14 17 19 20 23 27 56
LSQRBRACKET          : 20
LT                   : 47
LTE                  : 45
MAIN                 : 14
MIL                  : 25
MIN                  : 24
MINUS                : 58
MOVE                 : 19 20
OPERA                : 56
PLUS                 : 57
PRINT                : 27
QUOT                 : 24 24 25 25 26 26 37 37
RANGE                : 
RCRLBRACKET          : 14 15 16 17 18 41 42 43
RETURN               : 
RPAREN               : 14 17 19 20 23 27 56
RSQRBRACKET          : 20
SEG                  : 26
SEMICOLON            : 19 20 23 27 54 55
STRING               : 19 21 21 22 23 33
TIMES                : 61
TRUE                 : 18 31 50 65
WHILE                : 17 18
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

args                 : 27 34
body                 : 28 29 30 31 32 33 35
bool                 : 19 20 55
break                : 12
compare              : 17 41 42
delay                : 10
else                 : 40
elseif               : 38 39
elseiforelse         : 6 39
empty                : 13 36 36
expression           : 17 17 41 41 42 42
fingerList           : 20 22
for                  : 3
if                   : 5 6
let                  : 7
line                 : 1 2 3 4 5 7 8 9 10 11 12 14 15 16 17 18 38 40 41 42 43 0
loop                 : 2
main                 : 1
move                 : 8
moveList             : 9
opera                : 30 52 63
operand              : 54 56 56
operator             : 56
println              : 11
text                 : 
unit                 : 
while                : 4

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)

    line                           shift and go to state 1
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 1

    (0) S' -> line .



state 2

    (1) line -> main . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    main                           shift and go to state 2
    line                           shift and go to state 24
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 3

    (2) line -> loop . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    loop                           shift and go to state 3
    line                           shift and go to state 25
    main                           shift and go to state 2
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 4

    (3) line -> for . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    for                            shift and go to state 4
    line                           shift and go to state 26
    main                           shift and go to state 2
    loop                           shift and go to state 3
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 5

    (4) line -> while . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    while                          shift and go to state 5
    line                           shift and go to state 27
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 6

    (5) line -> if . line
    (6) line -> if . elseiforelse
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (38) elseiforelse -> . elseif line
    (39) elseiforelse -> . elseif elseiforelse
    (40) elseiforelse -> . else line
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .
    (42) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET
    (43) else -> . ELSE LCRLBRACKET line RCRLBRACKET

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)
    ELSEIF          shift and go to state 32
    ELSE            shift and go to state 33

    if                             shift and go to state 6
    line                           shift and go to state 28
    elseiforelse                   shift and go to state 29
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13
    elseif                         shift and go to state 30
    else                           shift and go to state 31

state 7

    (7) line -> let . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    let                            shift and go to state 7
    line                           shift and go to state 34
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 8

    (8) line -> move . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    move                           shift and go to state 8
    line                           shift and go to state 35
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 9

    (9) line -> moveList . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    moveList                       shift and go to state 9
    line                           shift and go to state 36
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 10

    (10) line -> delay . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    delay                          shift and go to state 10
    line                           shift and go to state 37
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 11

    (11) line -> println . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    println                        shift and go to state 11
    line                           shift and go to state 38
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 12

    (12) line -> break . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    break                          shift and go to state 12
    line                           shift and go to state 39
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    empty                          shift and go to state 13

state 13

    (13) line -> empty .

    $end            reduce using rule 13 (line -> empty .)
    RCRLBRACKET     reduce using rule 13 (line -> empty .)


state 14

    (14) main -> FN . MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 40


state 15

    (15) loop -> LOOP . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 41


state 16

    (16) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    ID              shift and go to state 42


state 17

    (17) while -> WHILE . LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> WHILE . TRUE LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 43
    TRUE            shift and go to state 44


state 18

    (41) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET
    (49) expression -> . INT
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . opera
    (53) expression -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 50
    OPERA           shift and go to state 51

    expression                     shift and go to state 45
    opera                          shift and go to state 49

state 19

    (54) let -> LET . ID ASSIGN operand SEMICOLON
    (55) let -> LET . ID ASSIGN bool SEMICOLON

    ID              shift and go to state 52


state 20

    (19) move -> MOVE . LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> MOVE . LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON

    LPAREN          shift and go to state 53


state 21

    (23) delay -> DELAY . LPAREN INT COMMA STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 54


state 22

    (27) println -> PRINT . EXPR LPAREN args RPAREN SEMICOLON

    EXPR            shift and go to state 55


state 23

    (68) break -> BREAK .

    FN              reduce using rule 68 (break -> BREAK .)
    LOOP            reduce using rule 68 (break -> BREAK .)
    FOR             reduce using rule 68 (break -> BREAK .)
    WHILE           reduce using rule 68 (break -> BREAK .)
    IF              reduce using rule 68 (break -> BREAK .)
    LET             reduce using rule 68 (break -> BREAK .)
    MOVE            reduce using rule 68 (break -> BREAK .)
    DELAY           reduce using rule 68 (break -> BREAK .)
    PRINT           reduce using rule 68 (break -> BREAK .)
    BREAK           reduce using rule 68 (break -> BREAK .)
    $end            reduce using rule 68 (break -> BREAK .)
    RCRLBRACKET     reduce using rule 68 (break -> BREAK .)


state 24

    (1) line -> main line .

    $end            reduce using rule 1 (line -> main line .)
    RCRLBRACKET     reduce using rule 1 (line -> main line .)


state 25

    (2) line -> loop line .

    $end            reduce using rule 2 (line -> loop line .)
    RCRLBRACKET     reduce using rule 2 (line -> loop line .)


state 26

    (3) line -> for line .

    $end            reduce using rule 3 (line -> for line .)
    RCRLBRACKET     reduce using rule 3 (line -> for line .)


state 27

    (4) line -> while line .

    $end            reduce using rule 4 (line -> while line .)
    RCRLBRACKET     reduce using rule 4 (line -> while line .)


state 28

    (5) line -> if line .

    $end            reduce using rule 5 (line -> if line .)
    RCRLBRACKET     reduce using rule 5 (line -> if line .)


state 29

    (6) line -> if elseiforelse .

    $end            reduce using rule 6 (line -> if elseiforelse .)
    RCRLBRACKET     reduce using rule 6 (line -> if elseiforelse .)


state 30

    (38) elseiforelse -> elseif . line
    (39) elseiforelse -> elseif . elseiforelse
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (38) elseiforelse -> . elseif line
    (39) elseiforelse -> . elseif elseiforelse
    (40) elseiforelse -> . else line
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .
    (42) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET
    (43) else -> . ELSE LCRLBRACKET line RCRLBRACKET

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)
    ELSEIF          shift and go to state 32
    ELSE            shift and go to state 33

    elseif                         shift and go to state 30
    line                           shift and go to state 56
    elseiforelse                   shift and go to state 57
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13
    else                           shift and go to state 31

state 31

    (40) elseiforelse -> else . line
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 69 (empty -> .)
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 58
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 32

    (42) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET
    (49) expression -> . INT
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . opera
    (53) expression -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 50
    OPERA           shift and go to state 51

    expression                     shift and go to state 59
    opera                          shift and go to state 49

state 33

    (43) else -> ELSE . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 60


state 34

    (7) line -> let line .

    $end            reduce using rule 7 (line -> let line .)
    RCRLBRACKET     reduce using rule 7 (line -> let line .)


state 35

    (8) line -> move line .

    $end            reduce using rule 8 (line -> move line .)
    RCRLBRACKET     reduce using rule 8 (line -> move line .)


state 36

    (9) line -> moveList line .

    $end            reduce using rule 9 (line -> moveList line .)
    RCRLBRACKET     reduce using rule 9 (line -> moveList line .)


state 37

    (10) line -> delay line .

    $end            reduce using rule 10 (line -> delay line .)
    RCRLBRACKET     reduce using rule 10 (line -> delay line .)


state 38

    (11) line -> println line .

    $end            reduce using rule 11 (line -> println line .)
    RCRLBRACKET     reduce using rule 11 (line -> println line .)


state 39

    (12) line -> break line .

    $end            reduce using rule 12 (line -> break line .)
    RCRLBRACKET     reduce using rule 12 (line -> break line .)


state 40

    (14) main -> FN MAIN . LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 61


state 41

    (15) loop -> LOOP LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 62
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 42

    (16) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    IN              shift and go to state 63


state 43

    (17) while -> WHILE LPAREN . expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (49) expression -> . INT
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . opera
    (53) expression -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 50
    OPERA           shift and go to state 51

    expression                     shift and go to state 64
    opera                          shift and go to state 49

state 44

    (18) while -> WHILE TRUE . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 65


state 45

    (41) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET
    (44) compare -> . EQEQ
    (45) compare -> . LTE
    (46) compare -> . GTE
    (47) compare -> . LT
    (48) compare -> . GT

    EQEQ            shift and go to state 67
    LTE             shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71

    compare                        shift and go to state 66

state 46

    (49) expression -> INT .

    EQEQ            reduce using rule 49 (expression -> INT .)
    LTE             reduce using rule 49 (expression -> INT .)
    GTE             reduce using rule 49 (expression -> INT .)
    LT              reduce using rule 49 (expression -> INT .)
    GT              reduce using rule 49 (expression -> INT .)
    LCRLBRACKET     reduce using rule 49 (expression -> INT .)
    RPAREN          reduce using rule 49 (expression -> INT .)


state 47

    (50) expression -> TRUE .

    EQEQ            reduce using rule 50 (expression -> TRUE .)
    LTE             reduce using rule 50 (expression -> TRUE .)
    GTE             reduce using rule 50 (expression -> TRUE .)
    LT              reduce using rule 50 (expression -> TRUE .)
    GT              reduce using rule 50 (expression -> TRUE .)
    LCRLBRACKET     reduce using rule 50 (expression -> TRUE .)
    RPAREN          reduce using rule 50 (expression -> TRUE .)


state 48

    (51) expression -> FALSE .

    EQEQ            reduce using rule 51 (expression -> FALSE .)
    LTE             reduce using rule 51 (expression -> FALSE .)
    GTE             reduce using rule 51 (expression -> FALSE .)
    LT              reduce using rule 51 (expression -> FALSE .)
    GT              reduce using rule 51 (expression -> FALSE .)
    LCRLBRACKET     reduce using rule 51 (expression -> FALSE .)
    RPAREN          reduce using rule 51 (expression -> FALSE .)


state 49

    (52) expression -> opera .

    EQEQ            reduce using rule 52 (expression -> opera .)
    LTE             reduce using rule 52 (expression -> opera .)
    GTE             reduce using rule 52 (expression -> opera .)
    LT              reduce using rule 52 (expression -> opera .)
    GT              reduce using rule 52 (expression -> opera .)
    LCRLBRACKET     reduce using rule 52 (expression -> opera .)
    RPAREN          reduce using rule 52 (expression -> opera .)


state 50

    (53) expression -> ID .

    EQEQ            reduce using rule 53 (expression -> ID .)
    LTE             reduce using rule 53 (expression -> ID .)
    GTE             reduce using rule 53 (expression -> ID .)
    LT              reduce using rule 53 (expression -> ID .)
    GT              reduce using rule 53 (expression -> ID .)
    LCRLBRACKET     reduce using rule 53 (expression -> ID .)
    RPAREN          reduce using rule 53 (expression -> ID .)


state 51

    (56) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN

    LPAREN          shift and go to state 72


state 52

    (54) let -> LET ID . ASSIGN operand SEMICOLON
    (55) let -> LET ID . ASSIGN bool SEMICOLON

    ASSIGN          shift and go to state 73


state 53

    (19) move -> MOVE LPAREN . STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> MOVE LPAREN . LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON

    STRING          shift and go to state 74
    LSQRBRACKET     shift and go to state 75


state 54

    (23) delay -> DELAY LPAREN . INT COMMA STRING RPAREN SEMICOLON

    INT             shift and go to state 76


state 55

    (27) println -> PRINT EXPR . LPAREN args RPAREN SEMICOLON

    LPAREN          shift and go to state 77


state 56

    (38) elseiforelse -> elseif line .

    $end            reduce using rule 38 (elseiforelse -> elseif line .)
    RCRLBRACKET     reduce using rule 38 (elseiforelse -> elseif line .)


state 57

    (39) elseiforelse -> elseif elseiforelse .

    $end            reduce using rule 39 (elseiforelse -> elseif elseiforelse .)
    RCRLBRACKET     reduce using rule 39 (elseiforelse -> elseif elseiforelse .)


state 58

    (40) elseiforelse -> else line .

    $end            reduce using rule 40 (elseiforelse -> else line .)
    RCRLBRACKET     reduce using rule 40 (elseiforelse -> else line .)


state 59

    (42) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET
    (44) compare -> . EQEQ
    (45) compare -> . LTE
    (46) compare -> . GTE
    (47) compare -> . LT
    (48) compare -> . GT

    EQEQ            shift and go to state 67
    LTE             shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71

    compare                        shift and go to state 78

state 60

    (43) else -> ELSE LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 79
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 61

    (14) main -> FN MAIN LPAREN . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 80


state 62

    (15) loop -> LOOP LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 81


state 63

    (16) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    INT             shift and go to state 82


state 64

    (17) while -> WHILE LPAREN expression . compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (44) compare -> . EQEQ
    (45) compare -> . LTE
    (46) compare -> . GTE
    (47) compare -> . LT
    (48) compare -> . GT

    EQEQ            shift and go to state 67
    LTE             shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71

    compare                        shift and go to state 83

state 65

    (18) while -> WHILE TRUE LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 84
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 66

    (41) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET
    (49) expression -> . INT
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . opera
    (53) expression -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 50
    OPERA           shift and go to state 51

    expression                     shift and go to state 85
    opera                          shift and go to state 49

state 67

    (44) compare -> EQEQ .

    INT             reduce using rule 44 (compare -> EQEQ .)
    TRUE            reduce using rule 44 (compare -> EQEQ .)
    FALSE           reduce using rule 44 (compare -> EQEQ .)
    ID              reduce using rule 44 (compare -> EQEQ .)
    OPERA           reduce using rule 44 (compare -> EQEQ .)


state 68

    (45) compare -> LTE .

    INT             reduce using rule 45 (compare -> LTE .)
    TRUE            reduce using rule 45 (compare -> LTE .)
    FALSE           reduce using rule 45 (compare -> LTE .)
    ID              reduce using rule 45 (compare -> LTE .)
    OPERA           reduce using rule 45 (compare -> LTE .)


state 69

    (46) compare -> GTE .

    INT             reduce using rule 46 (compare -> GTE .)
    TRUE            reduce using rule 46 (compare -> GTE .)
    FALSE           reduce using rule 46 (compare -> GTE .)
    ID              reduce using rule 46 (compare -> GTE .)
    OPERA           reduce using rule 46 (compare -> GTE .)


state 70

    (47) compare -> LT .

    INT             reduce using rule 47 (compare -> LT .)
    TRUE            reduce using rule 47 (compare -> LT .)
    FALSE           reduce using rule 47 (compare -> LT .)
    ID              reduce using rule 47 (compare -> LT .)
    OPERA           reduce using rule 47 (compare -> LT .)


state 71

    (48) compare -> GT .

    INT             reduce using rule 48 (compare -> GT .)
    TRUE            reduce using rule 48 (compare -> GT .)
    FALSE           reduce using rule 48 (compare -> GT .)
    ID              reduce using rule 48 (compare -> GT .)
    OPERA           reduce using rule 48 (compare -> GT .)


state 72

    (56) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN
    (57) operator -> . PLUS
    (58) operator -> . MINUS
    (59) operator -> . DIVIDE
    (60) operator -> . ASTR
    (61) operator -> . TIMES

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    DIVIDE          shift and go to state 89
    ASTR            shift and go to state 90
    TIMES           shift and go to state 91

    operator                       shift and go to state 86

state 73

    (54) let -> LET ID ASSIGN . operand SEMICOLON
    (55) let -> LET ID ASSIGN . bool SEMICOLON
    (62) operand -> . INT
    (63) operand -> . opera
    (64) operand -> . ID
    (65) bool -> . TRUE
    (66) bool -> . FALSE
    (67) bool -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 95
    ID              shift and go to state 92
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    OPERA           shift and go to state 51

    operand                        shift and go to state 93
    bool                           shift and go to state 94
    opera                          shift and go to state 96

state 74

    (19) move -> MOVE LPAREN STRING . COMMA bool RPAREN SEMICOLON

    COMMA           shift and go to state 99


state 75

    (20) moveList -> MOVE LPAREN LSQRBRACKET . fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (21) fingerList -> . STRING COMMA STRING
    (22) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 101

    fingerList                     shift and go to state 100

state 76

    (23) delay -> DELAY LPAREN INT . COMMA STRING RPAREN SEMICOLON

    COMMA           shift and go to state 102


state 77

    (27) println -> PRINT EXPR LPAREN . args RPAREN SEMICOLON
    (28) args -> . INT body
    (29) args -> . ID body
    (30) args -> . opera body
    (31) args -> . TRUE body
    (32) args -> . FALSE body
    (33) args -> . STRING body
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 104
    ID              shift and go to state 105
    TRUE            shift and go to state 107
    FALSE           shift and go to state 108
    STRING          shift and go to state 109
    OPERA           shift and go to state 51

    args                           shift and go to state 103
    opera                          shift and go to state 106

state 78

    (42) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET
    (49) expression -> . INT
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . opera
    (53) expression -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 50
    OPERA           shift and go to state 51

    expression                     shift and go to state 110
    opera                          shift and go to state 49

state 79

    (43) else -> ELSE LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 111


state 80

    (14) main -> FN MAIN LPAREN RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 112


state 81

    (15) loop -> LOOP LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 15 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)


state 82

    (16) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET

    DOTDOT          shift and go to state 113


state 83

    (17) while -> WHILE LPAREN expression compare . expression RPAREN LCRLBRACKET line RCRLBRACKET
    (49) expression -> . INT
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . opera
    (53) expression -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 50
    OPERA           shift and go to state 51

    expression                     shift and go to state 114
    opera                          shift and go to state 49

state 84

    (18) while -> WHILE TRUE LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 115


state 85

    (41) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 116


state 86

    (56) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN

    COMMA           shift and go to state 117


state 87

    (57) operator -> PLUS .

    COMMA           reduce using rule 57 (operator -> PLUS .)


state 88

    (58) operator -> MINUS .

    COMMA           reduce using rule 58 (operator -> MINUS .)


state 89

    (59) operator -> DIVIDE .

    COMMA           reduce using rule 59 (operator -> DIVIDE .)


state 90

    (60) operator -> ASTR .

    COMMA           reduce using rule 60 (operator -> ASTR .)


state 91

    (61) operator -> TIMES .

    COMMA           reduce using rule 61 (operator -> TIMES .)


state 92

    (64) operand -> ID .
    (67) bool -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 64 (operand -> ID .)
    SEMICOLON       reduce using rule 64 (operand -> ID .)

  ! SEMICOLON       [ reduce using rule 67 (bool -> ID .) ]


state 93

    (54) let -> LET ID ASSIGN operand . SEMICOLON

    SEMICOLON       shift and go to state 118


state 94

    (55) let -> LET ID ASSIGN bool . SEMICOLON

    SEMICOLON       shift and go to state 119


state 95

    (62) operand -> INT .

    SEMICOLON       reduce using rule 62 (operand -> INT .)
    COMMA           reduce using rule 62 (operand -> INT .)
    RPAREN          reduce using rule 62 (operand -> INT .)


state 96

    (63) operand -> opera .

    SEMICOLON       reduce using rule 63 (operand -> opera .)
    COMMA           reduce using rule 63 (operand -> opera .)
    RPAREN          reduce using rule 63 (operand -> opera .)


state 97

    (65) bool -> TRUE .

    SEMICOLON       reduce using rule 65 (bool -> TRUE .)
    RPAREN          reduce using rule 65 (bool -> TRUE .)


state 98

    (66) bool -> FALSE .

    SEMICOLON       reduce using rule 66 (bool -> FALSE .)
    RPAREN          reduce using rule 66 (bool -> FALSE .)


state 99

    (19) move -> MOVE LPAREN STRING COMMA . bool RPAREN SEMICOLON
    (65) bool -> . TRUE
    (66) bool -> . FALSE
    (67) bool -> . ID

    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    ID              shift and go to state 121

    bool                           shift and go to state 120

state 100

    (20) moveList -> MOVE LPAREN LSQRBRACKET fingerList . RSQRBRACKET COMMA bool RPAREN SEMICOLON

    RSQRBRACKET     shift and go to state 122


state 101

    (21) fingerList -> STRING . COMMA STRING
    (22) fingerList -> STRING . COMMA fingerList

    COMMA           shift and go to state 123


state 102

    (23) delay -> DELAY LPAREN INT COMMA . STRING RPAREN SEMICOLON

    STRING          shift and go to state 124


state 103

    (27) println -> PRINT EXPR LPAREN args . RPAREN SEMICOLON

    RPAREN          shift and go to state 125


state 104

    (28) args -> INT . body
    (34) body -> . COMMA args
    (35) body -> . COMMA body
    (36) body -> . empty empty
    (69) empty -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 69 (empty -> .)

    body                           shift and go to state 126
    empty                          shift and go to state 128

state 105

    (29) args -> ID . body
    (34) body -> . COMMA args
    (35) body -> . COMMA body
    (36) body -> . empty empty
    (69) empty -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 69 (empty -> .)

    body                           shift and go to state 129
    empty                          shift and go to state 128

state 106

    (30) args -> opera . body
    (34) body -> . COMMA args
    (35) body -> . COMMA body
    (36) body -> . empty empty
    (69) empty -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 69 (empty -> .)

    body                           shift and go to state 130
    empty                          shift and go to state 128

state 107

    (31) args -> TRUE . body
    (34) body -> . COMMA args
    (35) body -> . COMMA body
    (36) body -> . empty empty
    (69) empty -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 69 (empty -> .)

    body                           shift and go to state 131
    empty                          shift and go to state 128

state 108

    (32) args -> FALSE . body
    (34) body -> . COMMA args
    (35) body -> . COMMA body
    (36) body -> . empty empty
    (69) empty -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 69 (empty -> .)

    body                           shift and go to state 132
    empty                          shift and go to state 128

state 109

    (33) args -> STRING . body
    (34) body -> . COMMA args
    (35) body -> . COMMA body
    (36) body -> . empty empty
    (69) empty -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 69 (empty -> .)

    body                           shift and go to state 133
    empty                          shift and go to state 128

state 110

    (42) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 134


state 111

    (43) else -> ELSE LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)


state 112

    (14) main -> FN MAIN LPAREN RPAREN LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 135
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 113

    (16) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET

    INT             shift and go to state 136


state 114

    (17) while -> WHILE LPAREN expression compare expression . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 137


state 115

    (18) while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 18 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)


state 116

    (41) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 138
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 117

    (56) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN
    (62) operand -> . INT
    (63) operand -> . opera
    (64) operand -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 95
    ID              shift and go to state 140
    OPERA           shift and go to state 51

    operand                        shift and go to state 139
    opera                          shift and go to state 96

state 118

    (54) let -> LET ID ASSIGN operand SEMICOLON .

    FN              reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    LOOP            reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    FOR             reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    WHILE           reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    IF              reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    LET             reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    MOVE            reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    DELAY           reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    PRINT           reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    BREAK           reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    $end            reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)
    RCRLBRACKET     reduce using rule 54 (let -> LET ID ASSIGN operand SEMICOLON .)


state 119

    (55) let -> LET ID ASSIGN bool SEMICOLON .

    FN              reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    LOOP            reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    FOR             reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    WHILE           reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    IF              reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    LET             reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    MOVE            reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    DELAY           reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    PRINT           reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    BREAK           reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    $end            reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)
    RCRLBRACKET     reduce using rule 55 (let -> LET ID ASSIGN bool SEMICOLON .)


state 120

    (19) move -> MOVE LPAREN STRING COMMA bool . RPAREN SEMICOLON

    RPAREN          shift and go to state 141


state 121

    (67) bool -> ID .

    RPAREN          reduce using rule 67 (bool -> ID .)


state 122

    (20) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET . COMMA bool RPAREN SEMICOLON

    COMMA           shift and go to state 142


state 123

    (21) fingerList -> STRING COMMA . STRING
    (22) fingerList -> STRING COMMA . fingerList
    (21) fingerList -> . STRING COMMA STRING
    (22) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 143

    fingerList                     shift and go to state 144

state 124

    (23) delay -> DELAY LPAREN INT COMMA STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 145


state 125

    (27) println -> PRINT EXPR LPAREN args RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 146


state 126

    (28) args -> INT body .

    RPAREN          reduce using rule 28 (args -> INT body .)


state 127

    (34) body -> COMMA . args
    (35) body -> COMMA . body
    (28) args -> . INT body
    (29) args -> . ID body
    (30) args -> . opera body
    (31) args -> . TRUE body
    (32) args -> . FALSE body
    (33) args -> . STRING body
    (34) body -> . COMMA args
    (35) body -> . COMMA body
    (36) body -> . empty empty
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (69) empty -> .

    INT             shift and go to state 104
    ID              shift and go to state 105
    TRUE            shift and go to state 107
    FALSE           shift and go to state 108
    STRING          shift and go to state 109
    COMMA           shift and go to state 127
    OPERA           shift and go to state 51
    RPAREN          reduce using rule 69 (empty -> .)

    args                           shift and go to state 147
    body                           shift and go to state 148
    opera                          shift and go to state 106
    empty                          shift and go to state 128

state 128

    (36) body -> empty . empty
    (69) empty -> .

    RPAREN          reduce using rule 69 (empty -> .)

    empty                          shift and go to state 149

state 129

    (29) args -> ID body .

    RPAREN          reduce using rule 29 (args -> ID body .)


state 130

    (30) args -> opera body .

    RPAREN          reduce using rule 30 (args -> opera body .)


state 131

    (31) args -> TRUE body .

    RPAREN          reduce using rule 31 (args -> TRUE body .)


state 132

    (32) args -> FALSE body .

    RPAREN          reduce using rule 32 (args -> FALSE body .)


state 133

    (33) args -> STRING body .

    RPAREN          reduce using rule 33 (args -> STRING body .)


state 134

    (42) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 150
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 135

    (14) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 151


state 136

    (16) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 152


state 137

    (17) while -> WHILE LPAREN expression compare expression RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 153


state 138

    (41) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 154


state 139

    (56) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN

    COMMA           shift and go to state 155


state 140

    (64) operand -> ID .

    COMMA           reduce using rule 64 (operand -> ID .)
    RPAREN          reduce using rule 64 (operand -> ID .)


state 141

    (19) move -> MOVE LPAREN STRING COMMA bool RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 156


state 142

    (20) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA . bool RPAREN SEMICOLON
    (65) bool -> . TRUE
    (66) bool -> . FALSE
    (67) bool -> . ID

    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    ID              shift and go to state 121

    bool                           shift and go to state 157

state 143

    (21) fingerList -> STRING COMMA STRING .
    (21) fingerList -> STRING . COMMA STRING
    (22) fingerList -> STRING . COMMA fingerList

    RSQRBRACKET     reduce using rule 21 (fingerList -> STRING COMMA STRING .)
    COMMA           shift and go to state 123


state 144

    (22) fingerList -> STRING COMMA fingerList .

    RSQRBRACKET     reduce using rule 22 (fingerList -> STRING COMMA fingerList .)


state 145

    (23) delay -> DELAY LPAREN INT COMMA STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 158


state 146

    (27) println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .

    FN              reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    LOOP            reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    FOR             reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    WHILE           reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    IF              reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    LET             reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    MOVE            reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    DELAY           reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    PRINT           reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    BREAK           reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    $end            reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 27 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)


state 147

    (34) body -> COMMA args .

    RPAREN          reduce using rule 34 (body -> COMMA args .)


state 148

    (35) body -> COMMA body .

    RPAREN          reduce using rule 35 (body -> COMMA body .)


state 149

    (36) body -> empty empty .

    RPAREN          reduce using rule 36 (body -> empty empty .)


state 150

    (42) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 159


state 151

    (14) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 14 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)


state 152

    (16) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 160
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 153

    (17) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main line
    (2) line -> . loop line
    (3) line -> . for line
    (4) line -> . while line
    (5) line -> . if line
    (6) line -> . if elseiforelse
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (14) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (15) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (16) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (18) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (41) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (54) let -> . LET ID ASSIGN operand SEMICOLON
    (55) let -> . LET ID ASSIGN bool SEMICOLON
    (19) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (20) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (23) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (27) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (68) break -> . BREAK
    (69) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 69 (empty -> .)

    line                           shift and go to state 161
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 154

    (41) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    ELSEIF          reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    ELSE            reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 41 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)


state 155

    (56) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN
    (62) operand -> . INT
    (63) operand -> . opera
    (64) operand -> . ID
    (56) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 95
    ID              shift and go to state 140
    OPERA           shift and go to state 51

    operand                        shift and go to state 162
    opera                          shift and go to state 96

state 156

    (19) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .

    FN              reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    LOOP            reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    FOR             reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    WHILE           reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    IF              reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    LET             reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    MOVE            reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    DELAY           reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    PRINT           reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    BREAK           reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    $end            reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 19 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)


state 157

    (20) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool . RPAREN SEMICOLON

    RPAREN          shift and go to state 163


state 158

    (23) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .

    FN              reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    LOOP            reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    IF              reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    LET             reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    MOVE            reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    DELAY           reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    PRINT           reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    BREAK           reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    $end            reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 23 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)


state 159

    (42) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    ELSEIF          reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    ELSE            reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET .)


state 160

    (16) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 164


state 161

    (17) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 165


state 162

    (56) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN

    RPAREN          shift and go to state 166


state 163

    (20) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 167


state 164

    (16) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 16 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)


state 165

    (17) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 17 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)


state 166

    (56) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .

    EQEQ            reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LTE             reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GTE             reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LT              reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GT              reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LCRLBRACKET     reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    SEMICOLON       reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    COMMA           reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    RPAREN          reduce using rule 56 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)


state 167

    (20) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .

    FN              reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    LOOP            reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    FOR             reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    WHILE           reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    IF              reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    LET             reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    MOVE            reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    DELAY           reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    PRINT           reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    BREAK           reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    $end            reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 20 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 92 resolved using rule (operand -> ID)
WARNING: rejected rule (bool -> ID) in state 92
