Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    INTEGER
    RANGE
    RETURN
    WRONG_ID

Grammar

Rule 0     S' -> line
Rule 1     line -> main
Rule 2     line -> loop
Rule 3     line -> for
Rule 4     line -> while
Rule 5     line -> if
Rule 6     line -> let
Rule 7     line -> move
Rule 8     line -> moveList
Rule 9     line -> delay
Rule 10    line -> println
Rule 11    line -> break
Rule 12    line -> empty
Rule 13    main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
Rule 14    loop -> LOOP LCRLBRACKET line RCRLBRACKET line
Rule 15    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
Rule 16    while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
Rule 17    while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET line
Rule 18    move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
Rule 19    moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
Rule 20    fingerList -> STRING COMMA STRING
Rule 21    fingerList -> STRING COMMA fingerList
Rule 22    delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
Rule 23    unit -> QUOT MIN QUOT
Rule 24    unit -> QUOT MIL QUOT
Rule 25    unit -> QUOT SEG QUOT
Rule 26    println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
Rule 27    println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line
Rule 28    text -> QUOT ID QUOT
Rule 29    elseiforelse -> elseif
Rule 30    elseiforelse -> else
Rule 31    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line
Rule 32    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 33    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
Rule 34    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 35    else -> ELSE LCRLBRACKET line RCRLBRACKET line
Rule 36    compare -> EQEQ
Rule 37    compare -> LTE
Rule 38    compare -> GTE
Rule 39    compare -> LT
Rule 40    compare -> GT
Rule 41    expression -> operand
Rule 42    expression -> bool
Rule 43    let -> LET ID ASSIGN operand SEMICOLON
Rule 44    let -> LET ID ASSIGN bool SEMICOLON line
Rule 45    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN
Rule 46    operator -> PLUS
Rule 47    operator -> MINUS
Rule 48    operator -> DIVIDE
Rule 49    operator -> ASTR
Rule 50    operator -> TIMES
Rule 51    operand -> INT
Rule 52    operand -> opera
Rule 53    operand -> ID
Rule 54    bool -> TRUE
Rule 55    bool -> FALSE
Rule 56    bool -> ID
Rule 57    break -> BREAK
Rule 58    empty -> <empty>

Terminals, with rules where they appear

ARROW                : 
ASSIGN               : 43 44
ASTR                 : 49
BREAK                : 57
COMMA                : 18 19 20 21 22 45 45
DELAY                : 22
DIVIDE               : 48
DOTDOT               : 15
ELSE                 : 35
ELSEIF               : 33 34
EQEQ                 : 36
EXPR                 : 26 27
FALSE                : 55
FN                   : 13
FOR                  : 15
GT                   : 40
GTE                  : 38
ID                   : 15 27 28 43 44 53 56
IF                   : 31 32
IN                   : 15
INT                  : 15 15 22 51
INTEGER              : 
LCRLBRACKET          : 13 14 15 16 17 31 32 33 34 35
LET                  : 43 44
LOOP                 : 14
LPAREN               : 13 16 18 19 22 26 27 45
LSQRBRACKET          : 19
LT                   : 39
LTE                  : 37
MAIN                 : 13
MIL                  : 24
MIN                  : 23
MINUS                : 47
MOVE                 : 18 19
OPERA                : 45
PLUS                 : 46
PRINT                : 26 27
QUOT                 : 23 23 24 24 25 25 28 28
RANGE                : 
RCRLBRACKET          : 13 14 15 16 17 31 32 33 34 35
RETURN               : 
RPAREN               : 13 16 18 19 22 26 27 45
RSQRBRACKET          : 19
SEG                  : 25
SEMICOLON            : 18 19 22 26 27 43 44
STRING               : 18 20 20 21 22 26
TIMES                : 50
TRUE                 : 17 54
WHILE                : 16 17
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

bool                 : 18 19 42 44
break                : 11
compare              : 16 31 32 33 34
delay                : 9
else                 : 30
elseif               : 29
elseiforelse         : 32 34
empty                : 12
expression           : 16 16 31 31 32 32 33 33 34 34
fingerList           : 19 21
for                  : 3
if                   : 5
let                  : 6
line                 : 13 14 14 15 15 16 16 17 17 18 19 22 26 27 31 31 32 33 33 34 35 35 44 0
loop                 : 2
main                 : 1
move                 : 7
moveList             : 8
opera                : 52
operand              : 41 43 45 45
operator             : 45
println              : 10
text                 : 
unit                 : 
while                : 4

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)

    line                           shift and go to state 1
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 1

    (0) S' -> line .



state 2

    (1) line -> main .

    $end            reduce using rule 1 (line -> main .)
    RCRLBRACKET     reduce using rule 1 (line -> main .)


state 3

    (2) line -> loop .

    $end            reduce using rule 2 (line -> loop .)
    RCRLBRACKET     reduce using rule 2 (line -> loop .)


state 4

    (3) line -> for .

    $end            reduce using rule 3 (line -> for .)
    RCRLBRACKET     reduce using rule 3 (line -> for .)


state 5

    (4) line -> while .

    $end            reduce using rule 4 (line -> while .)
    RCRLBRACKET     reduce using rule 4 (line -> while .)


state 6

    (5) line -> if .

    $end            reduce using rule 5 (line -> if .)
    RCRLBRACKET     reduce using rule 5 (line -> if .)


state 7

    (6) line -> let .

    $end            reduce using rule 6 (line -> let .)
    RCRLBRACKET     reduce using rule 6 (line -> let .)


state 8

    (7) line -> move .

    $end            reduce using rule 7 (line -> move .)
    RCRLBRACKET     reduce using rule 7 (line -> move .)


state 9

    (8) line -> moveList .

    $end            reduce using rule 8 (line -> moveList .)
    RCRLBRACKET     reduce using rule 8 (line -> moveList .)


state 10

    (9) line -> delay .

    $end            reduce using rule 9 (line -> delay .)
    RCRLBRACKET     reduce using rule 9 (line -> delay .)


state 11

    (10) line -> println .

    $end            reduce using rule 10 (line -> println .)
    RCRLBRACKET     reduce using rule 10 (line -> println .)


state 12

    (11) line -> break .

    $end            reduce using rule 11 (line -> break .)
    RCRLBRACKET     reduce using rule 11 (line -> break .)


state 13

    (12) line -> empty .

    $end            reduce using rule 12 (line -> empty .)
    RCRLBRACKET     reduce using rule 12 (line -> empty .)


state 14

    (13) main -> FN . MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 24


state 15

    (14) loop -> LOOP . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 25


state 16

    (15) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    ID              shift and go to state 26


state 17

    (16) while -> WHILE . LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> WHILE . TRUE LCRLBRACKET line RCRLBRACKET line

    LPAREN          shift and go to state 27
    TRUE            shift and go to state 28


state 18

    (31) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (41) expression -> . operand
    (42) expression -> . bool
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    OPERA           shift and go to state 37

    expression                     shift and go to state 29
    operand                        shift and go to state 30
    bool                           shift and go to state 31
    opera                          shift and go to state 33

state 19

    (43) let -> LET . ID ASSIGN operand SEMICOLON
    (44) let -> LET . ID ASSIGN bool SEMICOLON line

    ID              shift and go to state 38


state 20

    (18) move -> MOVE . LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> MOVE . LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    LPAREN          shift and go to state 39


state 21

    (22) delay -> DELAY . LPAREN INT COMMA STRING RPAREN SEMICOLON line

    LPAREN          shift and go to state 40


state 22

    (26) println -> PRINT . EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> PRINT . EXPR LPAREN ID RPAREN SEMICOLON line

    EXPR            shift and go to state 41


state 23

    (57) break -> BREAK .

    $end            reduce using rule 57 (break -> BREAK .)
    RCRLBRACKET     reduce using rule 57 (break -> BREAK .)


state 24

    (13) main -> FN MAIN . LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 42


state 25

    (14) loop -> LOOP LCRLBRACKET . line RCRLBRACKET line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 43
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 26

    (15) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    IN              shift and go to state 44


state 27

    (16) while -> WHILE LPAREN . expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (41) expression -> . operand
    (42) expression -> . bool
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    OPERA           shift and go to state 37

    expression                     shift and go to state 45
    operand                        shift and go to state 30
    bool                           shift and go to state 31
    opera                          shift and go to state 33

state 28

    (17) while -> WHILE TRUE . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 46


state 29

    (31) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (36) compare -> . EQEQ
    (37) compare -> . LTE
    (38) compare -> . GTE
    (39) compare -> . LT
    (40) compare -> . GT

    EQEQ            shift and go to state 48
    LTE             shift and go to state 49
    GTE             shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52

    compare                        shift and go to state 47

state 30

    (41) expression -> operand .

    EQEQ            reduce using rule 41 (expression -> operand .)
    LTE             reduce using rule 41 (expression -> operand .)
    GTE             reduce using rule 41 (expression -> operand .)
    LT              reduce using rule 41 (expression -> operand .)
    GT              reduce using rule 41 (expression -> operand .)
    LCRLBRACKET     reduce using rule 41 (expression -> operand .)
    RPAREN          reduce using rule 41 (expression -> operand .)


state 31

    (42) expression -> bool .

    EQEQ            reduce using rule 42 (expression -> bool .)
    LTE             reduce using rule 42 (expression -> bool .)
    GTE             reduce using rule 42 (expression -> bool .)
    LT              reduce using rule 42 (expression -> bool .)
    GT              reduce using rule 42 (expression -> bool .)
    LCRLBRACKET     reduce using rule 42 (expression -> bool .)
    RPAREN          reduce using rule 42 (expression -> bool .)


state 32

    (51) operand -> INT .

    EQEQ            reduce using rule 51 (operand -> INT .)
    LTE             reduce using rule 51 (operand -> INT .)
    GTE             reduce using rule 51 (operand -> INT .)
    LT              reduce using rule 51 (operand -> INT .)
    GT              reduce using rule 51 (operand -> INT .)
    LCRLBRACKET     reduce using rule 51 (operand -> INT .)
    SEMICOLON       reduce using rule 51 (operand -> INT .)
    RPAREN          reduce using rule 51 (operand -> INT .)
    COMMA           reduce using rule 51 (operand -> INT .)


state 33

    (52) operand -> opera .

    EQEQ            reduce using rule 52 (operand -> opera .)
    LTE             reduce using rule 52 (operand -> opera .)
    GTE             reduce using rule 52 (operand -> opera .)
    LT              reduce using rule 52 (operand -> opera .)
    GT              reduce using rule 52 (operand -> opera .)
    LCRLBRACKET     reduce using rule 52 (operand -> opera .)
    SEMICOLON       reduce using rule 52 (operand -> opera .)
    RPAREN          reduce using rule 52 (operand -> opera .)
    COMMA           reduce using rule 52 (operand -> opera .)


state 34

    (53) operand -> ID .
    (56) bool -> ID .

  ! reduce/reduce conflict for EQEQ resolved using rule 53 (operand -> ID .)
  ! reduce/reduce conflict for LTE resolved using rule 53 (operand -> ID .)
  ! reduce/reduce conflict for GTE resolved using rule 53 (operand -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 53 (operand -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 53 (operand -> ID .)
  ! reduce/reduce conflict for LCRLBRACKET resolved using rule 53 (operand -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (operand -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 53 (operand -> ID .)
    EQEQ            reduce using rule 53 (operand -> ID .)
    LTE             reduce using rule 53 (operand -> ID .)
    GTE             reduce using rule 53 (operand -> ID .)
    LT              reduce using rule 53 (operand -> ID .)
    GT              reduce using rule 53 (operand -> ID .)
    LCRLBRACKET     reduce using rule 53 (operand -> ID .)
    SEMICOLON       reduce using rule 53 (operand -> ID .)
    RPAREN          reduce using rule 53 (operand -> ID .)

  ! EQEQ            [ reduce using rule 56 (bool -> ID .) ]
  ! LTE             [ reduce using rule 56 (bool -> ID .) ]
  ! GTE             [ reduce using rule 56 (bool -> ID .) ]
  ! LT              [ reduce using rule 56 (bool -> ID .) ]
  ! GT              [ reduce using rule 56 (bool -> ID .) ]
  ! LCRLBRACKET     [ reduce using rule 56 (bool -> ID .) ]
  ! SEMICOLON       [ reduce using rule 56 (bool -> ID .) ]
  ! RPAREN          [ reduce using rule 56 (bool -> ID .) ]


state 35

    (54) bool -> TRUE .

    EQEQ            reduce using rule 54 (bool -> TRUE .)
    LTE             reduce using rule 54 (bool -> TRUE .)
    GTE             reduce using rule 54 (bool -> TRUE .)
    LT              reduce using rule 54 (bool -> TRUE .)
    GT              reduce using rule 54 (bool -> TRUE .)
    LCRLBRACKET     reduce using rule 54 (bool -> TRUE .)
    SEMICOLON       reduce using rule 54 (bool -> TRUE .)
    RPAREN          reduce using rule 54 (bool -> TRUE .)


state 36

    (55) bool -> FALSE .

    EQEQ            reduce using rule 55 (bool -> FALSE .)
    LTE             reduce using rule 55 (bool -> FALSE .)
    GTE             reduce using rule 55 (bool -> FALSE .)
    LT              reduce using rule 55 (bool -> FALSE .)
    GT              reduce using rule 55 (bool -> FALSE .)
    LCRLBRACKET     reduce using rule 55 (bool -> FALSE .)
    SEMICOLON       reduce using rule 55 (bool -> FALSE .)
    RPAREN          reduce using rule 55 (bool -> FALSE .)


state 37

    (45) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN

    LPAREN          shift and go to state 53


state 38

    (43) let -> LET ID . ASSIGN operand SEMICOLON
    (44) let -> LET ID . ASSIGN bool SEMICOLON line

    ASSIGN          shift and go to state 54


state 39

    (18) move -> MOVE LPAREN . STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> MOVE LPAREN . LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    STRING          shift and go to state 55
    LSQRBRACKET     shift and go to state 56


state 40

    (22) delay -> DELAY LPAREN . INT COMMA STRING RPAREN SEMICOLON line

    INT             shift and go to state 57


state 41

    (26) println -> PRINT EXPR . LPAREN STRING RPAREN SEMICOLON line
    (27) println -> PRINT EXPR . LPAREN ID RPAREN SEMICOLON line

    LPAREN          shift and go to state 58


state 42

    (13) main -> FN MAIN LPAREN . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 59


state 43

    (14) loop -> LOOP LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 60


state 44

    (15) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 61


state 45

    (16) while -> WHILE LPAREN expression . compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (36) compare -> . EQEQ
    (37) compare -> . LTE
    (38) compare -> . GTE
    (39) compare -> . LT
    (40) compare -> . GT

    EQEQ            shift and go to state 48
    LTE             shift and go to state 49
    GTE             shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52

    compare                        shift and go to state 62

state 46

    (17) while -> WHILE TRUE LCRLBRACKET . line RCRLBRACKET line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 63
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 47

    (31) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (41) expression -> . operand
    (42) expression -> . bool
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    OPERA           shift and go to state 37

    expression                     shift and go to state 64
    operand                        shift and go to state 30
    bool                           shift and go to state 31
    opera                          shift and go to state 33

state 48

    (36) compare -> EQEQ .

    INT             reduce using rule 36 (compare -> EQEQ .)
    ID              reduce using rule 36 (compare -> EQEQ .)
    TRUE            reduce using rule 36 (compare -> EQEQ .)
    FALSE           reduce using rule 36 (compare -> EQEQ .)
    OPERA           reduce using rule 36 (compare -> EQEQ .)


state 49

    (37) compare -> LTE .

    INT             reduce using rule 37 (compare -> LTE .)
    ID              reduce using rule 37 (compare -> LTE .)
    TRUE            reduce using rule 37 (compare -> LTE .)
    FALSE           reduce using rule 37 (compare -> LTE .)
    OPERA           reduce using rule 37 (compare -> LTE .)


state 50

    (38) compare -> GTE .

    INT             reduce using rule 38 (compare -> GTE .)
    ID              reduce using rule 38 (compare -> GTE .)
    TRUE            reduce using rule 38 (compare -> GTE .)
    FALSE           reduce using rule 38 (compare -> GTE .)
    OPERA           reduce using rule 38 (compare -> GTE .)


state 51

    (39) compare -> LT .

    INT             reduce using rule 39 (compare -> LT .)
    ID              reduce using rule 39 (compare -> LT .)
    TRUE            reduce using rule 39 (compare -> LT .)
    FALSE           reduce using rule 39 (compare -> LT .)
    OPERA           reduce using rule 39 (compare -> LT .)


state 52

    (40) compare -> GT .

    INT             reduce using rule 40 (compare -> GT .)
    ID              reduce using rule 40 (compare -> GT .)
    TRUE            reduce using rule 40 (compare -> GT .)
    FALSE           reduce using rule 40 (compare -> GT .)
    OPERA           reduce using rule 40 (compare -> GT .)


state 53

    (45) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN
    (46) operator -> . PLUS
    (47) operator -> . MINUS
    (48) operator -> . DIVIDE
    (49) operator -> . ASTR
    (50) operator -> . TIMES

    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    DIVIDE          shift and go to state 68
    ASTR            shift and go to state 69
    TIMES           shift and go to state 70

    operator                       shift and go to state 65

state 54

    (43) let -> LET ID ASSIGN . operand SEMICOLON
    (44) let -> LET ID ASSIGN . bool SEMICOLON line
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    OPERA           shift and go to state 37

    operand                        shift and go to state 71
    bool                           shift and go to state 72
    opera                          shift and go to state 33

state 55

    (18) move -> MOVE LPAREN STRING . COMMA bool RPAREN SEMICOLON line

    COMMA           shift and go to state 73


state 56

    (19) moveList -> MOVE LPAREN LSQRBRACKET . fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (20) fingerList -> . STRING COMMA STRING
    (21) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 75

    fingerList                     shift and go to state 74

state 57

    (22) delay -> DELAY LPAREN INT . COMMA STRING RPAREN SEMICOLON line

    COMMA           shift and go to state 76


state 58

    (26) println -> PRINT EXPR LPAREN . STRING RPAREN SEMICOLON line
    (27) println -> PRINT EXPR LPAREN . ID RPAREN SEMICOLON line

    STRING          shift and go to state 77
    ID              shift and go to state 78


state 59

    (13) main -> FN MAIN LPAREN RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 79


state 60

    (14) loop -> LOOP LCRLBRACKET line RCRLBRACKET . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 80
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 61

    (15) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    DOTDOT          shift and go to state 81


state 62

    (16) while -> WHILE LPAREN expression compare . expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (41) expression -> . operand
    (42) expression -> . bool
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    OPERA           shift and go to state 37

    expression                     shift and go to state 82
    operand                        shift and go to state 30
    bool                           shift and go to state 31
    opera                          shift and go to state 33

state 63

    (17) while -> WHILE TRUE LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 83


state 64

    (31) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET line
    (32) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 84


state 65

    (45) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN

    COMMA           shift and go to state 85


state 66

    (46) operator -> PLUS .

    COMMA           reduce using rule 46 (operator -> PLUS .)


state 67

    (47) operator -> MINUS .

    COMMA           reduce using rule 47 (operator -> MINUS .)


state 68

    (48) operator -> DIVIDE .

    COMMA           reduce using rule 48 (operator -> DIVIDE .)


state 69

    (49) operator -> ASTR .

    COMMA           reduce using rule 49 (operator -> ASTR .)


state 70

    (50) operator -> TIMES .

    COMMA           reduce using rule 50 (operator -> TIMES .)


state 71

    (43) let -> LET ID ASSIGN operand . SEMICOLON

    SEMICOLON       shift and go to state 86


state 72

    (44) let -> LET ID ASSIGN bool . SEMICOLON line

    SEMICOLON       shift and go to state 87


state 73

    (18) move -> MOVE LPAREN STRING COMMA . bool RPAREN SEMICOLON line
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID

    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    ID              shift and go to state 89

    bool                           shift and go to state 88

state 74

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList . RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    RSQRBRACKET     shift and go to state 90


state 75

    (20) fingerList -> STRING . COMMA STRING
    (21) fingerList -> STRING . COMMA fingerList

    COMMA           shift and go to state 91


state 76

    (22) delay -> DELAY LPAREN INT COMMA . STRING RPAREN SEMICOLON line

    STRING          shift and go to state 92


state 77

    (26) println -> PRINT EXPR LPAREN STRING . RPAREN SEMICOLON line

    RPAREN          shift and go to state 93


state 78

    (27) println -> PRINT EXPR LPAREN ID . RPAREN SEMICOLON line

    RPAREN          shift and go to state 94


state 79

    (13) main -> FN MAIN LPAREN RPAREN LCRLBRACKET . line RCRLBRACKET
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 95
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 80

    (14) loop -> LOOP LCRLBRACKET line RCRLBRACKET line .

    $end            reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)
    RCRLBRACKET     reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)


state 81

    (15) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 96


state 82

    (16) while -> WHILE LPAREN expression compare expression . RPAREN LCRLBRACKET line RCRLBRACKET line

    RPAREN          shift and go to state 97


state 83

    (17) while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 98
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 84

    (31) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET line
    (32) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 99
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 85

    (45) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 101
    OPERA           shift and go to state 37

    operand                        shift and go to state 100
    opera                          shift and go to state 33

state 86

    (43) let -> LET ID ASSIGN operand SEMICOLON .

    $end            reduce using rule 43 (let -> LET ID ASSIGN operand SEMICOLON .)
    RCRLBRACKET     reduce using rule 43 (let -> LET ID ASSIGN operand SEMICOLON .)


state 87

    (44) let -> LET ID ASSIGN bool SEMICOLON . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 102
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 88

    (18) move -> MOVE LPAREN STRING COMMA bool . RPAREN SEMICOLON line

    RPAREN          shift and go to state 103


state 89

    (56) bool -> ID .

    RPAREN          reduce using rule 56 (bool -> ID .)


state 90

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET . COMMA bool RPAREN SEMICOLON line

    COMMA           shift and go to state 104


state 91

    (20) fingerList -> STRING COMMA . STRING
    (21) fingerList -> STRING COMMA . fingerList
    (20) fingerList -> . STRING COMMA STRING
    (21) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 105

    fingerList                     shift and go to state 106

state 92

    (22) delay -> DELAY LPAREN INT COMMA STRING . RPAREN SEMICOLON line

    RPAREN          shift and go to state 107


state 93

    (26) println -> PRINT EXPR LPAREN STRING RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 108


state 94

    (27) println -> PRINT EXPR LPAREN ID RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 109


state 95

    (13) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 110


state 96

    (15) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 111


state 97

    (16) while -> WHILE LPAREN expression compare expression RPAREN . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 112


state 98

    (17) while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET line .

    $end            reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET line .)
    RCRLBRACKET     reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET line .)


state 99

    (31) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET line
    (32) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 113


state 100

    (45) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN

    COMMA           shift and go to state 114


state 101

    (53) operand -> ID .

    COMMA           reduce using rule 53 (operand -> ID .)
    RPAREN          reduce using rule 53 (operand -> ID .)


state 102

    (44) let -> LET ID ASSIGN bool SEMICOLON line .

    $end            reduce using rule 44 (let -> LET ID ASSIGN bool SEMICOLON line .)
    RCRLBRACKET     reduce using rule 44 (let -> LET ID ASSIGN bool SEMICOLON line .)


state 103

    (18) move -> MOVE LPAREN STRING COMMA bool RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 115


state 104

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA . bool RPAREN SEMICOLON line
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID

    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    ID              shift and go to state 89

    bool                           shift and go to state 116

state 105

    (20) fingerList -> STRING COMMA STRING .
    (20) fingerList -> STRING . COMMA STRING
    (21) fingerList -> STRING . COMMA fingerList

    RSQRBRACKET     reduce using rule 20 (fingerList -> STRING COMMA STRING .)
    COMMA           shift and go to state 91


state 106

    (21) fingerList -> STRING COMMA fingerList .

    RSQRBRACKET     reduce using rule 21 (fingerList -> STRING COMMA fingerList .)


state 107

    (22) delay -> DELAY LPAREN INT COMMA STRING RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 117


state 108

    (26) println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 118
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 109

    (27) println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 119
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 110

    (13) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .

    $end            reduce using rule 13 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 13 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)


state 111

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 120
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 112

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET . line RCRLBRACKET line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 121
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 113

    (31) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . line
    (32) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (29) elseiforelse -> . elseif
    (30) elseiforelse -> . else
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .
    (33) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (34) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (35) else -> . ELSE LCRLBRACKET line RCRLBRACKET line

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)
    ELSEIF          shift and go to state 126
    ELSE            shift and go to state 127

    line                           shift and go to state 122
    elseiforelse                   shift and go to state 123
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13
    elseif                         shift and go to state 124
    else                           shift and go to state 125

state 114

    (45) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 101
    OPERA           shift and go to state 37

    operand                        shift and go to state 128
    opera                          shift and go to state 33

state 115

    (18) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 129
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 116

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool . RPAREN SEMICOLON line

    RPAREN          shift and go to state 130


state 117

    (22) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 131
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 118

    (26) println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .

    $end            reduce using rule 26 (println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .)
    RCRLBRACKET     reduce using rule 26 (println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .)


state 119

    (27) println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .

    $end            reduce using rule 27 (println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .)
    RCRLBRACKET     reduce using rule 27 (println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .)


state 120

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 132


state 121

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 133


state 122

    (31) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line .

    $end            reduce using rule 31 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    RCRLBRACKET     reduce using rule 31 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line .)


state 123

    (32) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    $end            reduce using rule 32 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    RCRLBRACKET     reduce using rule 32 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)


state 124

    (29) elseiforelse -> elseif .

    $end            reduce using rule 29 (elseiforelse -> elseif .)
    RCRLBRACKET     reduce using rule 29 (elseiforelse -> elseif .)


state 125

    (30) elseiforelse -> else .

    $end            reduce using rule 30 (elseiforelse -> else .)
    RCRLBRACKET     reduce using rule 30 (elseiforelse -> else .)


state 126

    (33) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET line
    (34) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (41) expression -> . operand
    (42) expression -> . bool
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    OPERA           shift and go to state 37

    expression                     shift and go to state 134
    operand                        shift and go to state 30
    bool                           shift and go to state 31
    opera                          shift and go to state 33

state 127

    (35) else -> ELSE . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 135


state 128

    (45) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN

    RPAREN          shift and go to state 136


state 129

    (18) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line .

    $end            reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line .)
    RCRLBRACKET     reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line .)


state 130

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 137


state 131

    (22) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .

    $end            reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .)
    RCRLBRACKET     reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .)


state 132

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 138
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 133

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 139
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 134

    (33) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET line
    (34) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (36) compare -> . EQEQ
    (37) compare -> . LTE
    (38) compare -> . GTE
    (39) compare -> . LT
    (40) compare -> . GT

    EQEQ            shift and go to state 48
    LTE             shift and go to state 49
    GTE             shift and go to state 50
    LT              shift and go to state 51
    GT              shift and go to state 52

    compare                        shift and go to state 140

state 135

    (35) else -> ELSE LCRLBRACKET . line RCRLBRACKET line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 141
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 136

    (45) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .

    EQEQ            reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LTE             reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GTE             reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LT              reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GT              reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LCRLBRACKET     reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    SEMICOLON       reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    RPAREN          reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    COMMA           reduce using rule 45 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)


state 137

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 142
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 138

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .

    $end            reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)
    RCRLBRACKET     reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)


state 139

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line .

    $end            reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line .)
    RCRLBRACKET     reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line .)


state 140

    (33) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET line
    (34) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (41) expression -> . operand
    (42) expression -> . bool
    (51) operand -> . INT
    (52) operand -> . opera
    (53) operand -> . ID
    (54) bool -> . TRUE
    (55) bool -> . FALSE
    (56) bool -> . ID
    (45) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 32
    ID              shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    OPERA           shift and go to state 37

    expression                     shift and go to state 143
    operand                        shift and go to state 30
    bool                           shift and go to state 31
    opera                          shift and go to state 33

state 141

    (35) else -> ELSE LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 144


state 142

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line .

    $end            reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line .)
    RCRLBRACKET     reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line .)


state 143

    (33) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET line
    (34) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 145


state 144

    (35) else -> ELSE LCRLBRACKET line RCRLBRACKET . line
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 146
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 145

    (33) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET line
    (34) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 147
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13

state 146

    (35) else -> ELSE LCRLBRACKET line RCRLBRACKET line .

    $end            reduce using rule 35 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    RCRLBRACKET     reduce using rule 35 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)


state 147

    (33) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET line
    (34) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 148


state 148

    (33) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . line
    (34) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (1) line -> . main
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . while
    (5) line -> . if
    (6) line -> . let
    (7) line -> . move
    (8) line -> . moveList
    (9) line -> . delay
    (10) line -> . println
    (11) line -> . break
    (12) line -> . empty
    (29) elseiforelse -> . elseif
    (30) elseiforelse -> . else
    (13) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (31) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (32) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) let -> . LET ID ASSIGN operand SEMICOLON
    (44) let -> . LET ID ASSIGN bool SEMICOLON line
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (26) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (27) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .
    (33) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (34) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (35) else -> . ELSE LCRLBRACKET line RCRLBRACKET line

    FN              shift and go to state 14
    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    LET             shift and go to state 19
    MOVE            shift and go to state 20
    DELAY           shift and go to state 21
    PRINT           shift and go to state 22
    BREAK           shift and go to state 23
    $end            reduce using rule 58 (empty -> .)
    RCRLBRACKET     reduce using rule 58 (empty -> .)
    ELSEIF          shift and go to state 126
    ELSE            shift and go to state 127

    line                           shift and go to state 149
    elseiforelse                   shift and go to state 150
    main                           shift and go to state 2
    loop                           shift and go to state 3
    for                            shift and go to state 4
    while                          shift and go to state 5
    if                             shift and go to state 6
    let                            shift and go to state 7
    move                           shift and go to state 8
    moveList                       shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    break                          shift and go to state 12
    empty                          shift and go to state 13
    elseif                         shift and go to state 124
    else                           shift and go to state 125

state 149

    (33) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .

    $end            reduce using rule 33 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    RCRLBRACKET     reduce using rule 33 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)


state 150

    (34) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    $end            reduce using rule 34 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    RCRLBRACKET     reduce using rule 34 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 34 resolved using rule (operand -> ID)
WARNING: rejected rule (bool -> ID) in state 34
