Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    BREAK
    INTEGER
    RANGE
    RETURN
    WHILE
    WRONG_ID

Grammar

Rule 0     S' -> main
Rule 1     main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
Rule 2     line -> loop
Rule 3     line -> for
Rule 4     line -> if
Rule 5     line -> let
Rule 6     line -> move
Rule 7     line -> moveList
Rule 8     line -> delay
Rule 9     line -> println
Rule 10    line -> empty
Rule 11    loop -> LOOP LCRLBRACKET line RCRLBRACKET line
Rule 12    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
Rule 13    move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
Rule 14    moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
Rule 15    fingerList -> STRING COMMA STRING
Rule 16    fingerList -> STRING COMMA fingerList
Rule 17    delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
Rule 18    unit -> QUOT MIN QUOT
Rule 19    unit -> QUOT MIL QUOT
Rule 20    unit -> QUOT SEG QUOT
Rule 21    println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
Rule 22    println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line
Rule 23    text -> QUOT ID QUOT
Rule 24    elseiforelse -> elseif
Rule 25    elseiforelse -> else
Rule 26    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line
Rule 27    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 28    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
Rule 29    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 30    else -> ELSE LCRLBRACKET line RCRLBRACKET line
Rule 31    compare -> EQEQ
Rule 32    compare -> LTE
Rule 33    compare -> GTE
Rule 34    compare -> LT
Rule 35    compare -> GT
Rule 36    expression -> operand
Rule 37    expression -> bool
Rule 38    let -> LET ID ASSIGN operand SEMICOLON line
Rule 39    let -> LET ID ASSIGN bool SEMICOLON line
Rule 40    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN
Rule 41    operator -> PLUS
Rule 42    operator -> MINUS
Rule 43    operator -> DIVIDE
Rule 44    operator -> ASTR
Rule 45    operator -> TIMES
Rule 46    operand -> INT
Rule 47    operand -> opera
Rule 48    operand -> ID
Rule 49    bool -> TRUE
Rule 50    bool -> FALSE
Rule 51    bool -> ID
Rule 52    empty -> <empty>

Terminals, with rules where they appear

ARROW                : 
ASSIGN               : 38 39
ASTR                 : 44
BREAK                : 
COMMA                : 13 14 15 16 17 40 40
DELAY                : 17
DIVIDE               : 43
DOTDOT               : 12
ELSE                 : 30
ELSEIF               : 28 29
EQEQ                 : 31
EXPR                 : 21 22
FALSE                : 50
FN                   : 1
FOR                  : 12
GT                   : 35
GTE                  : 33
ID                   : 12 22 23 38 39 48 51
IF                   : 26 27
IN                   : 12
INT                  : 12 12 17 46
INTEGER              : 
LCRLBRACKET          : 1 11 12 26 27 28 29 30
LET                  : 38 39
LOOP                 : 11
LPAREN               : 1 13 14 17 21 22 40
LSQRBRACKET          : 14
LT                   : 34
LTE                  : 32
MAIN                 : 1
MIL                  : 19
MIN                  : 18
MINUS                : 42
MOVE                 : 13 14
OPERA                : 40
PLUS                 : 41
PRINT                : 21 22
QUOT                 : 18 18 19 19 20 20 23 23
RANGE                : 
RCRLBRACKET          : 1 11 12 26 27 28 29 30
RETURN               : 
RPAREN               : 1 13 14 17 21 22 40
RSQRBRACKET          : 14
SEG                  : 20
SEMICOLON            : 13 14 17 21 22 38 39
STRING               : 13 15 15 16 17 21
TIMES                : 45
TRUE                 : 49
WHILE                : 
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

bool                 : 13 14 37 39
compare              : 26 27 28 29
delay                : 8
else                 : 25
elseif               : 24
elseiforelse         : 27 29
empty                : 10
expression           : 26 26 27 27 28 28 29 29
fingerList           : 14 16
for                  : 3
if                   : 4
let                  : 5
line                 : 1 11 11 12 12 13 14 17 21 22 26 26 27 28 28 29 30 30 38 39
loop                 : 2
main                 : 0
move                 : 6
moveList             : 7
opera                : 47
operand              : 36 38 40 40
operator             : 40
println              : 9
text                 : 
unit                 : 

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    FN              shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> FN . MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 3


state 3

    (1) main -> FN MAIN . LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 4


state 4

    (1) main -> FN MAIN LPAREN . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 5


state 5

    (1) main -> FN MAIN LPAREN RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 6


state 6

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET . line RCRLBRACKET
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 7
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 7

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 24


state 8

    (2) line -> loop .

    RCRLBRACKET     reduce using rule 2 (line -> loop .)


state 9

    (3) line -> for .

    RCRLBRACKET     reduce using rule 3 (line -> for .)


state 10

    (4) line -> if .

    RCRLBRACKET     reduce using rule 4 (line -> if .)


state 11

    (5) line -> let .

    RCRLBRACKET     reduce using rule 5 (line -> let .)


state 12

    (6) line -> move .

    RCRLBRACKET     reduce using rule 6 (line -> move .)


state 13

    (7) line -> moveList .

    RCRLBRACKET     reduce using rule 7 (line -> moveList .)


state 14

    (8) line -> delay .

    RCRLBRACKET     reduce using rule 8 (line -> delay .)


state 15

    (9) line -> println .

    RCRLBRACKET     reduce using rule 9 (line -> println .)


state 16

    (10) line -> empty .

    RCRLBRACKET     reduce using rule 10 (line -> empty .)


state 17

    (11) loop -> LOOP . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 25


state 18

    (12) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    ID              shift and go to state 26


state 19

    (26) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (36) expression -> . operand
    (37) expression -> . bool
    (46) operand -> . INT
    (47) operand -> . opera
    (48) operand -> . ID
    (49) bool -> . TRUE
    (50) bool -> . FALSE
    (51) bool -> . ID
    (40) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 30
    ID              shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    OPERA           shift and go to state 35

    expression                     shift and go to state 27
    operand                        shift and go to state 28
    bool                           shift and go to state 29
    opera                          shift and go to state 31

state 20

    (38) let -> LET . ID ASSIGN operand SEMICOLON line
    (39) let -> LET . ID ASSIGN bool SEMICOLON line

    ID              shift and go to state 36


state 21

    (13) move -> MOVE . LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> MOVE . LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    LPAREN          shift and go to state 37


state 22

    (17) delay -> DELAY . LPAREN INT COMMA STRING RPAREN SEMICOLON line

    LPAREN          shift and go to state 38


state 23

    (21) println -> PRINT . EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> PRINT . EXPR LPAREN ID RPAREN SEMICOLON line

    EXPR            shift and go to state 39


state 24

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .

    $end            reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)


state 25

    (11) loop -> LOOP LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 40
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 26

    (12) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    IN              shift and go to state 41


state 27

    (26) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (31) compare -> . EQEQ
    (32) compare -> . LTE
    (33) compare -> . GTE
    (34) compare -> . LT
    (35) compare -> . GT

    EQEQ            shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47

    compare                        shift and go to state 42

state 28

    (36) expression -> operand .

    EQEQ            reduce using rule 36 (expression -> operand .)
    LTE             reduce using rule 36 (expression -> operand .)
    GTE             reduce using rule 36 (expression -> operand .)
    LT              reduce using rule 36 (expression -> operand .)
    GT              reduce using rule 36 (expression -> operand .)
    LCRLBRACKET     reduce using rule 36 (expression -> operand .)


state 29

    (37) expression -> bool .

    EQEQ            reduce using rule 37 (expression -> bool .)
    LTE             reduce using rule 37 (expression -> bool .)
    GTE             reduce using rule 37 (expression -> bool .)
    LT              reduce using rule 37 (expression -> bool .)
    GT              reduce using rule 37 (expression -> bool .)
    LCRLBRACKET     reduce using rule 37 (expression -> bool .)


state 30

    (46) operand -> INT .

    EQEQ            reduce using rule 46 (operand -> INT .)
    LTE             reduce using rule 46 (operand -> INT .)
    GTE             reduce using rule 46 (operand -> INT .)
    LT              reduce using rule 46 (operand -> INT .)
    GT              reduce using rule 46 (operand -> INT .)
    LCRLBRACKET     reduce using rule 46 (operand -> INT .)
    SEMICOLON       reduce using rule 46 (operand -> INT .)
    COMMA           reduce using rule 46 (operand -> INT .)
    RPAREN          reduce using rule 46 (operand -> INT .)


state 31

    (47) operand -> opera .

    EQEQ            reduce using rule 47 (operand -> opera .)
    LTE             reduce using rule 47 (operand -> opera .)
    GTE             reduce using rule 47 (operand -> opera .)
    LT              reduce using rule 47 (operand -> opera .)
    GT              reduce using rule 47 (operand -> opera .)
    LCRLBRACKET     reduce using rule 47 (operand -> opera .)
    SEMICOLON       reduce using rule 47 (operand -> opera .)
    COMMA           reduce using rule 47 (operand -> opera .)
    RPAREN          reduce using rule 47 (operand -> opera .)


state 32

    (48) operand -> ID .
    (51) bool -> ID .

  ! reduce/reduce conflict for EQEQ resolved using rule 48 (operand -> ID .)
  ! reduce/reduce conflict for LTE resolved using rule 48 (operand -> ID .)
  ! reduce/reduce conflict for GTE resolved using rule 48 (operand -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 48 (operand -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 48 (operand -> ID .)
  ! reduce/reduce conflict for LCRLBRACKET resolved using rule 48 (operand -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (operand -> ID .)
    EQEQ            reduce using rule 48 (operand -> ID .)
    LTE             reduce using rule 48 (operand -> ID .)
    GTE             reduce using rule 48 (operand -> ID .)
    LT              reduce using rule 48 (operand -> ID .)
    GT              reduce using rule 48 (operand -> ID .)
    LCRLBRACKET     reduce using rule 48 (operand -> ID .)
    SEMICOLON       reduce using rule 48 (operand -> ID .)

  ! EQEQ            [ reduce using rule 51 (bool -> ID .) ]
  ! LTE             [ reduce using rule 51 (bool -> ID .) ]
  ! GTE             [ reduce using rule 51 (bool -> ID .) ]
  ! LT              [ reduce using rule 51 (bool -> ID .) ]
  ! GT              [ reduce using rule 51 (bool -> ID .) ]
  ! LCRLBRACKET     [ reduce using rule 51 (bool -> ID .) ]
  ! SEMICOLON       [ reduce using rule 51 (bool -> ID .) ]


state 33

    (49) bool -> TRUE .

    EQEQ            reduce using rule 49 (bool -> TRUE .)
    LTE             reduce using rule 49 (bool -> TRUE .)
    GTE             reduce using rule 49 (bool -> TRUE .)
    LT              reduce using rule 49 (bool -> TRUE .)
    GT              reduce using rule 49 (bool -> TRUE .)
    LCRLBRACKET     reduce using rule 49 (bool -> TRUE .)
    SEMICOLON       reduce using rule 49 (bool -> TRUE .)
    RPAREN          reduce using rule 49 (bool -> TRUE .)


state 34

    (50) bool -> FALSE .

    EQEQ            reduce using rule 50 (bool -> FALSE .)
    LTE             reduce using rule 50 (bool -> FALSE .)
    GTE             reduce using rule 50 (bool -> FALSE .)
    LT              reduce using rule 50 (bool -> FALSE .)
    GT              reduce using rule 50 (bool -> FALSE .)
    LCRLBRACKET     reduce using rule 50 (bool -> FALSE .)
    SEMICOLON       reduce using rule 50 (bool -> FALSE .)
    RPAREN          reduce using rule 50 (bool -> FALSE .)


state 35

    (40) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN

    LPAREN          shift and go to state 48


state 36

    (38) let -> LET ID . ASSIGN operand SEMICOLON line
    (39) let -> LET ID . ASSIGN bool SEMICOLON line

    ASSIGN          shift and go to state 49


state 37

    (13) move -> MOVE LPAREN . STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> MOVE LPAREN . LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    STRING          shift and go to state 50
    LSQRBRACKET     shift and go to state 51


state 38

    (17) delay -> DELAY LPAREN . INT COMMA STRING RPAREN SEMICOLON line

    INT             shift and go to state 52


state 39

    (21) println -> PRINT EXPR . LPAREN STRING RPAREN SEMICOLON line
    (22) println -> PRINT EXPR . LPAREN ID RPAREN SEMICOLON line

    LPAREN          shift and go to state 53


state 40

    (11) loop -> LOOP LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 54


state 41

    (12) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 55


state 42

    (26) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (36) expression -> . operand
    (37) expression -> . bool
    (46) operand -> . INT
    (47) operand -> . opera
    (48) operand -> . ID
    (49) bool -> . TRUE
    (50) bool -> . FALSE
    (51) bool -> . ID
    (40) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 30
    ID              shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    OPERA           shift and go to state 35

    expression                     shift and go to state 56
    operand                        shift and go to state 28
    bool                           shift and go to state 29
    opera                          shift and go to state 31

state 43

    (31) compare -> EQEQ .

    INT             reduce using rule 31 (compare -> EQEQ .)
    ID              reduce using rule 31 (compare -> EQEQ .)
    TRUE            reduce using rule 31 (compare -> EQEQ .)
    FALSE           reduce using rule 31 (compare -> EQEQ .)
    OPERA           reduce using rule 31 (compare -> EQEQ .)


state 44

    (32) compare -> LTE .

    INT             reduce using rule 32 (compare -> LTE .)
    ID              reduce using rule 32 (compare -> LTE .)
    TRUE            reduce using rule 32 (compare -> LTE .)
    FALSE           reduce using rule 32 (compare -> LTE .)
    OPERA           reduce using rule 32 (compare -> LTE .)


state 45

    (33) compare -> GTE .

    INT             reduce using rule 33 (compare -> GTE .)
    ID              reduce using rule 33 (compare -> GTE .)
    TRUE            reduce using rule 33 (compare -> GTE .)
    FALSE           reduce using rule 33 (compare -> GTE .)
    OPERA           reduce using rule 33 (compare -> GTE .)


state 46

    (34) compare -> LT .

    INT             reduce using rule 34 (compare -> LT .)
    ID              reduce using rule 34 (compare -> LT .)
    TRUE            reduce using rule 34 (compare -> LT .)
    FALSE           reduce using rule 34 (compare -> LT .)
    OPERA           reduce using rule 34 (compare -> LT .)


state 47

    (35) compare -> GT .

    INT             reduce using rule 35 (compare -> GT .)
    ID              reduce using rule 35 (compare -> GT .)
    TRUE            reduce using rule 35 (compare -> GT .)
    FALSE           reduce using rule 35 (compare -> GT .)
    OPERA           reduce using rule 35 (compare -> GT .)


state 48

    (40) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN
    (41) operator -> . PLUS
    (42) operator -> . MINUS
    (43) operator -> . DIVIDE
    (44) operator -> . ASTR
    (45) operator -> . TIMES

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    DIVIDE          shift and go to state 60
    ASTR            shift and go to state 61
    TIMES           shift and go to state 62

    operator                       shift and go to state 57

state 49

    (38) let -> LET ID ASSIGN . operand SEMICOLON line
    (39) let -> LET ID ASSIGN . bool SEMICOLON line
    (46) operand -> . INT
    (47) operand -> . opera
    (48) operand -> . ID
    (49) bool -> . TRUE
    (50) bool -> . FALSE
    (51) bool -> . ID
    (40) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 30
    ID              shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    OPERA           shift and go to state 35

    operand                        shift and go to state 63
    bool                           shift and go to state 64
    opera                          shift and go to state 31

state 50

    (13) move -> MOVE LPAREN STRING . COMMA bool RPAREN SEMICOLON line

    COMMA           shift and go to state 65


state 51

    (14) moveList -> MOVE LPAREN LSQRBRACKET . fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (15) fingerList -> . STRING COMMA STRING
    (16) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 67

    fingerList                     shift and go to state 66

state 52

    (17) delay -> DELAY LPAREN INT . COMMA STRING RPAREN SEMICOLON line

    COMMA           shift and go to state 68


state 53

    (21) println -> PRINT EXPR LPAREN . STRING RPAREN SEMICOLON line
    (22) println -> PRINT EXPR LPAREN . ID RPAREN SEMICOLON line

    STRING          shift and go to state 69
    ID              shift and go to state 70


state 54

    (11) loop -> LOOP LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 71
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 55

    (12) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    DOTDOT          shift and go to state 72


state 56

    (26) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET line
    (27) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 73


state 57

    (40) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN

    COMMA           shift and go to state 74


state 58

    (41) operator -> PLUS .

    COMMA           reduce using rule 41 (operator -> PLUS .)


state 59

    (42) operator -> MINUS .

    COMMA           reduce using rule 42 (operator -> MINUS .)


state 60

    (43) operator -> DIVIDE .

    COMMA           reduce using rule 43 (operator -> DIVIDE .)


state 61

    (44) operator -> ASTR .

    COMMA           reduce using rule 44 (operator -> ASTR .)


state 62

    (45) operator -> TIMES .

    COMMA           reduce using rule 45 (operator -> TIMES .)


state 63

    (38) let -> LET ID ASSIGN operand . SEMICOLON line

    SEMICOLON       shift and go to state 75


state 64

    (39) let -> LET ID ASSIGN bool . SEMICOLON line

    SEMICOLON       shift and go to state 76


state 65

    (13) move -> MOVE LPAREN STRING COMMA . bool RPAREN SEMICOLON line
    (49) bool -> . TRUE
    (50) bool -> . FALSE
    (51) bool -> . ID

    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    ID              shift and go to state 78

    bool                           shift and go to state 77

state 66

    (14) moveList -> MOVE LPAREN LSQRBRACKET fingerList . RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    RSQRBRACKET     shift and go to state 79


state 67

    (15) fingerList -> STRING . COMMA STRING
    (16) fingerList -> STRING . COMMA fingerList

    COMMA           shift and go to state 80


state 68

    (17) delay -> DELAY LPAREN INT COMMA . STRING RPAREN SEMICOLON line

    STRING          shift and go to state 81


state 69

    (21) println -> PRINT EXPR LPAREN STRING . RPAREN SEMICOLON line

    RPAREN          shift and go to state 82


state 70

    (22) println -> PRINT EXPR LPAREN ID . RPAREN SEMICOLON line

    RPAREN          shift and go to state 83


state 71

    (11) loop -> LOOP LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 11 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)


state 72

    (12) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 84


state 73

    (26) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET line
    (27) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 85
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 74

    (40) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN
    (46) operand -> . INT
    (47) operand -> . opera
    (48) operand -> . ID
    (40) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 30
    ID              shift and go to state 87
    OPERA           shift and go to state 35

    operand                        shift and go to state 86
    opera                          shift and go to state 31

state 75

    (38) let -> LET ID ASSIGN operand SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 88
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 76

    (39) let -> LET ID ASSIGN bool SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 89
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 77

    (13) move -> MOVE LPAREN STRING COMMA bool . RPAREN SEMICOLON line

    RPAREN          shift and go to state 90


state 78

    (51) bool -> ID .

    RPAREN          reduce using rule 51 (bool -> ID .)


state 79

    (14) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET . COMMA bool RPAREN SEMICOLON line

    COMMA           shift and go to state 91


state 80

    (15) fingerList -> STRING COMMA . STRING
    (16) fingerList -> STRING COMMA . fingerList
    (15) fingerList -> . STRING COMMA STRING
    (16) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 92

    fingerList                     shift and go to state 93

state 81

    (17) delay -> DELAY LPAREN INT COMMA STRING . RPAREN SEMICOLON line

    RPAREN          shift and go to state 94


state 82

    (21) println -> PRINT EXPR LPAREN STRING RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 95


state 83

    (22) println -> PRINT EXPR LPAREN ID RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 96


state 84

    (12) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 97


state 85

    (26) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET line
    (27) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 98


state 86

    (40) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN

    COMMA           shift and go to state 99


state 87

    (48) operand -> ID .

    COMMA           reduce using rule 48 (operand -> ID .)
    RPAREN          reduce using rule 48 (operand -> ID .)


state 88

    (38) let -> LET ID ASSIGN operand SEMICOLON line .

    RCRLBRACKET     reduce using rule 38 (let -> LET ID ASSIGN operand SEMICOLON line .)


state 89

    (39) let -> LET ID ASSIGN bool SEMICOLON line .

    RCRLBRACKET     reduce using rule 39 (let -> LET ID ASSIGN bool SEMICOLON line .)


state 90

    (13) move -> MOVE LPAREN STRING COMMA bool RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 100


state 91

    (14) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA . bool RPAREN SEMICOLON line
    (49) bool -> . TRUE
    (50) bool -> . FALSE
    (51) bool -> . ID

    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    ID              shift and go to state 78

    bool                           shift and go to state 101

state 92

    (15) fingerList -> STRING COMMA STRING .
    (15) fingerList -> STRING . COMMA STRING
    (16) fingerList -> STRING . COMMA fingerList

    RSQRBRACKET     reduce using rule 15 (fingerList -> STRING COMMA STRING .)
    COMMA           shift and go to state 80


state 93

    (16) fingerList -> STRING COMMA fingerList .

    RSQRBRACKET     reduce using rule 16 (fingerList -> STRING COMMA fingerList .)


state 94

    (17) delay -> DELAY LPAREN INT COMMA STRING RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 102


state 95

    (21) println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 103
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 96

    (22) println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 104
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 97

    (12) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 105
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 98

    (26) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . line
    (27) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (24) elseiforelse -> . elseif
    (25) elseiforelse -> . else
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .
    (28) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (29) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (30) else -> . ELSE LCRLBRACKET line RCRLBRACKET line

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)
    ELSEIF          shift and go to state 110
    ELSE            shift and go to state 111

    line                           shift and go to state 106
    elseiforelse                   shift and go to state 107
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16
    elseif                         shift and go to state 108
    else                           shift and go to state 109

state 99

    (40) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN
    (46) operand -> . INT
    (47) operand -> . opera
    (48) operand -> . ID
    (40) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 30
    ID              shift and go to state 87
    OPERA           shift and go to state 35

    operand                        shift and go to state 112
    opera                          shift and go to state 31

state 100

    (13) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 113
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 101

    (14) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool . RPAREN SEMICOLON line

    RPAREN          shift and go to state 114


state 102

    (17) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 115
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 103

    (21) println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 21 (println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .)


state 104

    (22) println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 22 (println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .)


state 105

    (12) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 116


state 106

    (26) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 26 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line .)


state 107

    (27) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    RCRLBRACKET     reduce using rule 27 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)


state 108

    (24) elseiforelse -> elseif .

    RCRLBRACKET     reduce using rule 24 (elseiforelse -> elseif .)


state 109

    (25) elseiforelse -> else .

    RCRLBRACKET     reduce using rule 25 (elseiforelse -> else .)


state 110

    (28) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET line
    (29) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (36) expression -> . operand
    (37) expression -> . bool
    (46) operand -> . INT
    (47) operand -> . opera
    (48) operand -> . ID
    (49) bool -> . TRUE
    (50) bool -> . FALSE
    (51) bool -> . ID
    (40) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 30
    ID              shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    OPERA           shift and go to state 35

    expression                     shift and go to state 117
    operand                        shift and go to state 28
    bool                           shift and go to state 29
    opera                          shift and go to state 31

state 111

    (30) else -> ELSE . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 118


state 112

    (40) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN

    RPAREN          shift and go to state 119


state 113

    (13) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 13 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line .)


state 114

    (14) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 120


state 115

    (17) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 17 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .)


state 116

    (12) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 121
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 117

    (28) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET line
    (29) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (31) compare -> . EQEQ
    (32) compare -> . LTE
    (33) compare -> . GTE
    (34) compare -> . LT
    (35) compare -> . GT

    EQEQ            shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47

    compare                        shift and go to state 122

state 118

    (30) else -> ELSE LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 123
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 119

    (40) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .

    EQEQ            reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LTE             reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GTE             reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LT              reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GT              reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LCRLBRACKET     reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    SEMICOLON       reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    COMMA           reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    RPAREN          reduce using rule 40 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)


state 120

    (14) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 124
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 121

    (12) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 12 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)


state 122

    (28) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET line
    (29) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (36) expression -> . operand
    (37) expression -> . bool
    (46) operand -> . INT
    (47) operand -> . opera
    (48) operand -> . ID
    (49) bool -> . TRUE
    (50) bool -> . FALSE
    (51) bool -> . ID
    (40) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 30
    ID              shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    OPERA           shift and go to state 35

    expression                     shift and go to state 125
    operand                        shift and go to state 28
    bool                           shift and go to state 29
    opera                          shift and go to state 31

state 123

    (30) else -> ELSE LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 126


state 124

    (14) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 14 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line .)


state 125

    (28) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET line
    (29) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 127


state 126

    (30) else -> ELSE LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 128
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 127

    (28) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET line
    (29) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)

    line                           shift and go to state 129
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16

state 128

    (30) else -> ELSE LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 30 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)


state 129

    (28) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET line
    (29) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 130


state 130

    (28) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . line
    (29) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . if
    (5) line -> . let
    (6) line -> . move
    (7) line -> . moveList
    (8) line -> . delay
    (9) line -> . println
    (10) line -> . empty
    (24) elseiforelse -> . elseif
    (25) elseiforelse -> . else
    (11) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (12) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (26) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (27) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (38) let -> . LET ID ASSIGN operand SEMICOLON line
    (39) let -> . LET ID ASSIGN bool SEMICOLON line
    (13) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (14) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (17) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (21) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (22) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (52) empty -> .
    (28) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (29) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (30) else -> . ELSE LCRLBRACKET line RCRLBRACKET line

    LOOP            shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    LET             shift and go to state 20
    MOVE            shift and go to state 21
    DELAY           shift and go to state 22
    PRINT           shift and go to state 23
    RCRLBRACKET     reduce using rule 52 (empty -> .)
    ELSEIF          shift and go to state 110
    ELSE            shift and go to state 111

    line                           shift and go to state 131
    elseiforelse                   shift and go to state 132
    loop                           shift and go to state 8
    for                            shift and go to state 9
    if                             shift and go to state 10
    let                            shift and go to state 11
    move                           shift and go to state 12
    moveList                       shift and go to state 13
    delay                          shift and go to state 14
    println                        shift and go to state 15
    empty                          shift and go to state 16
    elseif                         shift and go to state 108
    else                           shift and go to state 109

state 131

    (28) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 28 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)


state 132

    (29) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    RCRLBRACKET     reduce using rule 29 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 32 resolved using rule (operand -> ID)
WARNING: rejected rule (bool -> ID) in state 32
