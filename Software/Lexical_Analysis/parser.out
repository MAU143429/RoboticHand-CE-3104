Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    INTEGER
    RANGE
    RETURN
    WRONG_ID

Grammar

Rule 0     S' -> root
Rule 1     root -> main root
Rule 2     root -> functions root
Rule 3     root -> let root
Rule 4     root -> empty
Rule 5     functions -> ID
Rule 6     main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
Rule 7     line -> loop line
Rule 8     line -> for line
Rule 9     line -> while line
Rule 10    line -> if line
Rule 11    line -> let line
Rule 12    line -> move line
Rule 13    line -> moveList line
Rule 14    line -> delay line
Rule 15    line -> println line
Rule 16    line -> break line
Rule 17    line -> empty
Rule 18    loop -> LOOP LCRLBRACKET line RCRLBRACKET
Rule 19    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
Rule 20    while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
Rule 21    while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET
Rule 22    move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
Rule 23    moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
Rule 24    fingerList -> STRING COMMA STRING
Rule 25    fingerList -> STRING COMMA fingerList
Rule 26    delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
Rule 27    unit -> QUOT MIN QUOT
Rule 28    unit -> QUOT MIL QUOT
Rule 29    unit -> QUOT SEG QUOT
Rule 30    println -> PRINT EXPR LPAREN args RPAREN SEMICOLON
Rule 31    args -> INT body
Rule 32    args -> ID body
Rule 33    args -> opera body
Rule 34    args -> TRUE body
Rule 35    args -> FALSE body
Rule 36    args -> STRING body
Rule 37    body -> COMMA args
Rule 38    body -> COMMA body
Rule 39    body -> empty empty
Rule 40    text -> QUOT ID QUOT
Rule 41    elseiforelse -> elseif
Rule 42    elseiforelse -> else
Rule 43    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
Rule 44    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 45    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty
Rule 46    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 47    else -> ELSE LCRLBRACKET line RCRLBRACKET
Rule 48    compare -> EQEQ
Rule 49    compare -> LTE
Rule 50    compare -> GTE
Rule 51    compare -> LT
Rule 52    compare -> GT
Rule 53    expression -> INT
Rule 54    expression -> TRUE
Rule 55    expression -> FALSE
Rule 56    expression -> opera
Rule 57    expression -> ID
Rule 58    let -> LET ID ASSIGN operand SEMICOLON
Rule 59    let -> LET ID ASSIGN bool SEMICOLON
Rule 60    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN
Rule 61    operator -> PLUS
Rule 62    operator -> MINUS
Rule 63    operator -> DIVIDE
Rule 64    operator -> ASTR
Rule 65    operator -> TIMES
Rule 66    operand -> INT
Rule 67    operand -> opera
Rule 68    operand -> ID
Rule 69    bool -> TRUE
Rule 70    bool -> FALSE
Rule 71    bool -> ID
Rule 72    break -> BREAK
Rule 73    empty -> <empty>

Terminals, with rules where they appear

ARROW                : 
ASSIGN               : 58 59
ASTR                 : 64
BREAK                : 72
COMMA                : 22 23 24 25 26 37 38 60 60
DELAY                : 26
DIVIDE               : 63
DOTDOT               : 19
ELSE                 : 47
ELSEIF               : 45 46
EQEQ                 : 48
EXPR                 : 30
FALSE                : 35 55 70
FN                   : 6
FOR                  : 19
GT                   : 52
GTE                  : 50
ID                   : 5 19 32 40 57 58 59 68 71
IF                   : 43 44
IN                   : 19
INT                  : 19 19 26 31 53 66
INTEGER              : 
LCRLBRACKET          : 6 18 19 20 21 43 44 45 46 47
LET                  : 58 59
LOOP                 : 18
LPAREN               : 6 20 22 23 26 30 60
LSQRBRACKET          : 23
LT                   : 51
LTE                  : 49
MAIN                 : 6
MIL                  : 28
MIN                  : 27
MINUS                : 62
MOVE                 : 22 23
OPERA                : 60
PLUS                 : 61
PRINT                : 30
QUOT                 : 27 27 28 28 29 29 40 40
RANGE                : 
RCRLBRACKET          : 6 18 19 20 21 43 44 45 46 47
RETURN               : 
RPAREN               : 6 20 22 23 26 30 60
RSQRBRACKET          : 23
SEG                  : 29
SEMICOLON            : 22 23 26 30 58 59
STRING               : 22 24 24 25 26 36
TIMES                : 65
TRUE                 : 21 34 54 69
WHILE                : 20 21
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

args                 : 30 37
body                 : 31 32 33 34 35 36 38
bool                 : 22 23 59
break                : 16
compare              : 20 43 44 45 46
delay                : 14
else                 : 42
elseif               : 41
elseiforelse         : 44 46
empty                : 4 17 39 39 43 45
expression           : 20 20 43 43 44 44 45 45 46 46
fingerList           : 23 25
for                  : 8
functions            : 2
if                   : 10
let                  : 3 11
line                 : 6 7 8 9 10 11 12 13 14 15 16 18 19 20 21 43 44 45 46 47
loop                 : 7
main                 : 1
move                 : 12
moveList             : 13
opera                : 33 56 67
operand              : 58 60 60
operator             : 60
println              : 15
root                 : 1 2 3 0
text                 : 
unit                 : 
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . root
    (1) root -> . main root
    (2) root -> . functions root
    (3) root -> . let root
    (4) root -> . empty
    (6) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (5) functions -> . ID
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (73) empty -> .

    FN              shift and go to state 6
    ID              shift and go to state 7
    LET             shift and go to state 8
    $end            reduce using rule 73 (empty -> .)

    root                           shift and go to state 1
    main                           shift and go to state 2
    functions                      shift and go to state 3
    let                            shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> root .



state 2

    (1) root -> main . root
    (1) root -> . main root
    (2) root -> . functions root
    (3) root -> . let root
    (4) root -> . empty
    (6) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (5) functions -> . ID
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (73) empty -> .

    FN              shift and go to state 6
    ID              shift and go to state 7
    LET             shift and go to state 8
    $end            reduce using rule 73 (empty -> .)

    main                           shift and go to state 2
    root                           shift and go to state 9
    functions                      shift and go to state 3
    let                            shift and go to state 4
    empty                          shift and go to state 5

state 3

    (2) root -> functions . root
    (1) root -> . main root
    (2) root -> . functions root
    (3) root -> . let root
    (4) root -> . empty
    (6) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (5) functions -> . ID
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (73) empty -> .

    FN              shift and go to state 6
    ID              shift and go to state 7
    LET             shift and go to state 8
    $end            reduce using rule 73 (empty -> .)

    functions                      shift and go to state 3
    root                           shift and go to state 10
    main                           shift and go to state 2
    let                            shift and go to state 4
    empty                          shift and go to state 5

state 4

    (3) root -> let . root
    (1) root -> . main root
    (2) root -> . functions root
    (3) root -> . let root
    (4) root -> . empty
    (6) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (5) functions -> . ID
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (73) empty -> .

    FN              shift and go to state 6
    ID              shift and go to state 7
    LET             shift and go to state 8
    $end            reduce using rule 73 (empty -> .)

    let                            shift and go to state 4
    root                           shift and go to state 11
    main                           shift and go to state 2
    functions                      shift and go to state 3
    empty                          shift and go to state 5

state 5

    (4) root -> empty .

    $end            reduce using rule 4 (root -> empty .)


state 6

    (6) main -> FN . MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 12


state 7

    (5) functions -> ID .

    FN              reduce using rule 5 (functions -> ID .)
    ID              reduce using rule 5 (functions -> ID .)
    LET             reduce using rule 5 (functions -> ID .)
    $end            reduce using rule 5 (functions -> ID .)


state 8

    (58) let -> LET . ID ASSIGN operand SEMICOLON
    (59) let -> LET . ID ASSIGN bool SEMICOLON

    ID              shift and go to state 13


state 9

    (1) root -> main root .

    $end            reduce using rule 1 (root -> main root .)


state 10

    (2) root -> functions root .

    $end            reduce using rule 2 (root -> functions root .)


state 11

    (3) root -> let root .

    $end            reduce using rule 3 (root -> let root .)


state 12

    (6) main -> FN MAIN . LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 14


state 13

    (58) let -> LET ID . ASSIGN operand SEMICOLON
    (59) let -> LET ID . ASSIGN bool SEMICOLON

    ASSIGN          shift and go to state 15


state 14

    (6) main -> FN MAIN LPAREN . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 16


state 15

    (58) let -> LET ID ASSIGN . operand SEMICOLON
    (59) let -> LET ID ASSIGN . bool SEMICOLON
    (66) operand -> . INT
    (67) operand -> . opera
    (68) operand -> . ID
    (69) bool -> . TRUE
    (70) bool -> . FALSE
    (71) bool -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 20
    ID              shift and go to state 17
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    OPERA           shift and go to state 24

    operand                        shift and go to state 18
    bool                           shift and go to state 19
    opera                          shift and go to state 21

state 16

    (6) main -> FN MAIN LPAREN RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 25


state 17

    (68) operand -> ID .
    (71) bool -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (operand -> ID .)
    SEMICOLON       reduce using rule 68 (operand -> ID .)

  ! SEMICOLON       [ reduce using rule 71 (bool -> ID .) ]


state 18

    (58) let -> LET ID ASSIGN operand . SEMICOLON

    SEMICOLON       shift and go to state 26


state 19

    (59) let -> LET ID ASSIGN bool . SEMICOLON

    SEMICOLON       shift and go to state 27


state 20

    (66) operand -> INT .

    SEMICOLON       reduce using rule 66 (operand -> INT .)
    COMMA           reduce using rule 66 (operand -> INT .)
    RPAREN          reduce using rule 66 (operand -> INT .)


state 21

    (67) operand -> opera .

    SEMICOLON       reduce using rule 67 (operand -> opera .)
    COMMA           reduce using rule 67 (operand -> opera .)
    RPAREN          reduce using rule 67 (operand -> opera .)


state 22

    (69) bool -> TRUE .

    SEMICOLON       reduce using rule 69 (bool -> TRUE .)
    RPAREN          reduce using rule 69 (bool -> TRUE .)


state 23

    (70) bool -> FALSE .

    SEMICOLON       reduce using rule 70 (bool -> FALSE .)
    RPAREN          reduce using rule 70 (bool -> FALSE .)


state 24

    (60) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN

    LPAREN          shift and go to state 28


state 25

    (6) main -> FN MAIN LPAREN RPAREN LCRLBRACKET . line RCRLBRACKET
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    line                           shift and go to state 29
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 26

    (58) let -> LET ID ASSIGN operand SEMICOLON .

    FN              reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    ID              reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    LET             reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    $end            reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    LOOP            reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    FOR             reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    WHILE           reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    IF              reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    MOVE            reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    DELAY           reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    PRINT           reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    BREAK           reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)
    RCRLBRACKET     reduce using rule 58 (let -> LET ID ASSIGN operand SEMICOLON .)


state 27

    (59) let -> LET ID ASSIGN bool SEMICOLON .

    FN              reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    ID              reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    LET             reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    $end            reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    LOOP            reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    FOR             reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    WHILE           reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    IF              reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    MOVE            reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    DELAY           reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    PRINT           reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    BREAK           reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)
    RCRLBRACKET     reduce using rule 59 (let -> LET ID ASSIGN bool SEMICOLON .)


state 28

    (60) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN
    (61) operator -> . PLUS
    (62) operator -> . MINUS
    (63) operator -> . DIVIDE
    (64) operator -> . ASTR
    (65) operator -> . TIMES

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    DIVIDE          shift and go to state 52
    ASTR            shift and go to state 53
    TIMES           shift and go to state 54

    operator                       shift and go to state 49

state 29

    (6) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 55


state 30

    (7) line -> loop . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    loop                           shift and go to state 30
    line                           shift and go to state 56
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 31

    (8) line -> for . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    for                            shift and go to state 31
    line                           shift and go to state 57
    loop                           shift and go to state 30
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 32

    (9) line -> while . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    while                          shift and go to state 32
    line                           shift and go to state 58
    loop                           shift and go to state 30
    for                            shift and go to state 31
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 33

    (10) line -> if . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    if                             shift and go to state 33
    line                           shift and go to state 59
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 34

    (11) line -> let . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    let                            shift and go to state 34
    line                           shift and go to state 60
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 35

    (12) line -> move . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    move                           shift and go to state 35
    line                           shift and go to state 61
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 36

    (13) line -> moveList . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    moveList                       shift and go to state 36
    line                           shift and go to state 62
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 37

    (14) line -> delay . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    delay                          shift and go to state 37
    line                           shift and go to state 63
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 38

    (15) line -> println . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    println                        shift and go to state 38
    line                           shift and go to state 64
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 39

    (16) line -> break . line
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    break                          shift and go to state 39
    line                           shift and go to state 65
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    empty                          shift and go to state 40

state 40

    (17) line -> empty .

    RCRLBRACKET     reduce using rule 17 (line -> empty .)


state 41

    (18) loop -> LOOP . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 66


state 42

    (19) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    ID              shift and go to state 67


state 43

    (20) while -> WHILE . LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> WHILE . TRUE LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 68
    TRUE            shift and go to state 69


state 44

    (43) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (53) expression -> . INT
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . opera
    (57) expression -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 75
    OPERA           shift and go to state 24

    expression                     shift and go to state 70
    opera                          shift and go to state 74

state 45

    (22) move -> MOVE . LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> MOVE . LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON

    LPAREN          shift and go to state 76


state 46

    (26) delay -> DELAY . LPAREN INT COMMA STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 77


state 47

    (30) println -> PRINT . EXPR LPAREN args RPAREN SEMICOLON

    EXPR            shift and go to state 78


state 48

    (72) break -> BREAK .

    LOOP            reduce using rule 72 (break -> BREAK .)
    FOR             reduce using rule 72 (break -> BREAK .)
    WHILE           reduce using rule 72 (break -> BREAK .)
    IF              reduce using rule 72 (break -> BREAK .)
    LET             reduce using rule 72 (break -> BREAK .)
    MOVE            reduce using rule 72 (break -> BREAK .)
    DELAY           reduce using rule 72 (break -> BREAK .)
    PRINT           reduce using rule 72 (break -> BREAK .)
    BREAK           reduce using rule 72 (break -> BREAK .)
    RCRLBRACKET     reduce using rule 72 (break -> BREAK .)


state 49

    (60) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN

    COMMA           shift and go to state 79


state 50

    (61) operator -> PLUS .

    COMMA           reduce using rule 61 (operator -> PLUS .)


state 51

    (62) operator -> MINUS .

    COMMA           reduce using rule 62 (operator -> MINUS .)


state 52

    (63) operator -> DIVIDE .

    COMMA           reduce using rule 63 (operator -> DIVIDE .)


state 53

    (64) operator -> ASTR .

    COMMA           reduce using rule 64 (operator -> ASTR .)


state 54

    (65) operator -> TIMES .

    COMMA           reduce using rule 65 (operator -> TIMES .)


state 55

    (6) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 6 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    ID              reduce using rule 6 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 6 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    $end            reduce using rule 6 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)


state 56

    (7) line -> loop line .

    RCRLBRACKET     reduce using rule 7 (line -> loop line .)


state 57

    (8) line -> for line .

    RCRLBRACKET     reduce using rule 8 (line -> for line .)


state 58

    (9) line -> while line .

    RCRLBRACKET     reduce using rule 9 (line -> while line .)


state 59

    (10) line -> if line .

    RCRLBRACKET     reduce using rule 10 (line -> if line .)


state 60

    (11) line -> let line .

    RCRLBRACKET     reduce using rule 11 (line -> let line .)


state 61

    (12) line -> move line .

    RCRLBRACKET     reduce using rule 12 (line -> move line .)


state 62

    (13) line -> moveList line .

    RCRLBRACKET     reduce using rule 13 (line -> moveList line .)


state 63

    (14) line -> delay line .

    RCRLBRACKET     reduce using rule 14 (line -> delay line .)


state 64

    (15) line -> println line .

    RCRLBRACKET     reduce using rule 15 (line -> println line .)


state 65

    (16) line -> break line .

    RCRLBRACKET     reduce using rule 16 (line -> break line .)


state 66

    (18) loop -> LOOP LCRLBRACKET . line RCRLBRACKET
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    line                           shift and go to state 80
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 67

    (19) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    IN              shift and go to state 81


state 68

    (20) while -> WHILE LPAREN . expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (53) expression -> . INT
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . opera
    (57) expression -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 75
    OPERA           shift and go to state 24

    expression                     shift and go to state 82
    opera                          shift and go to state 74

state 69

    (21) while -> WHILE TRUE . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 83


state 70

    (43) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (48) compare -> . EQEQ
    (49) compare -> . LTE
    (50) compare -> . GTE
    (51) compare -> . LT
    (52) compare -> . GT

    EQEQ            shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    LT              shift and go to state 88
    GT              shift and go to state 89

    compare                        shift and go to state 84

state 71

    (53) expression -> INT .

    EQEQ            reduce using rule 53 (expression -> INT .)
    LTE             reduce using rule 53 (expression -> INT .)
    GTE             reduce using rule 53 (expression -> INT .)
    LT              reduce using rule 53 (expression -> INT .)
    GT              reduce using rule 53 (expression -> INT .)
    LCRLBRACKET     reduce using rule 53 (expression -> INT .)
    RPAREN          reduce using rule 53 (expression -> INT .)


state 72

    (54) expression -> TRUE .

    EQEQ            reduce using rule 54 (expression -> TRUE .)
    LTE             reduce using rule 54 (expression -> TRUE .)
    GTE             reduce using rule 54 (expression -> TRUE .)
    LT              reduce using rule 54 (expression -> TRUE .)
    GT              reduce using rule 54 (expression -> TRUE .)
    LCRLBRACKET     reduce using rule 54 (expression -> TRUE .)
    RPAREN          reduce using rule 54 (expression -> TRUE .)


state 73

    (55) expression -> FALSE .

    EQEQ            reduce using rule 55 (expression -> FALSE .)
    LTE             reduce using rule 55 (expression -> FALSE .)
    GTE             reduce using rule 55 (expression -> FALSE .)
    LT              reduce using rule 55 (expression -> FALSE .)
    GT              reduce using rule 55 (expression -> FALSE .)
    LCRLBRACKET     reduce using rule 55 (expression -> FALSE .)
    RPAREN          reduce using rule 55 (expression -> FALSE .)


state 74

    (56) expression -> opera .

    EQEQ            reduce using rule 56 (expression -> opera .)
    LTE             reduce using rule 56 (expression -> opera .)
    GTE             reduce using rule 56 (expression -> opera .)
    LT              reduce using rule 56 (expression -> opera .)
    GT              reduce using rule 56 (expression -> opera .)
    LCRLBRACKET     reduce using rule 56 (expression -> opera .)
    RPAREN          reduce using rule 56 (expression -> opera .)


state 75

    (57) expression -> ID .

    EQEQ            reduce using rule 57 (expression -> ID .)
    LTE             reduce using rule 57 (expression -> ID .)
    GTE             reduce using rule 57 (expression -> ID .)
    LT              reduce using rule 57 (expression -> ID .)
    GT              reduce using rule 57 (expression -> ID .)
    LCRLBRACKET     reduce using rule 57 (expression -> ID .)
    RPAREN          reduce using rule 57 (expression -> ID .)


state 76

    (22) move -> MOVE LPAREN . STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> MOVE LPAREN . LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON

    STRING          shift and go to state 90
    LSQRBRACKET     shift and go to state 91


state 77

    (26) delay -> DELAY LPAREN . INT COMMA STRING RPAREN SEMICOLON

    INT             shift and go to state 92


state 78

    (30) println -> PRINT EXPR . LPAREN args RPAREN SEMICOLON

    LPAREN          shift and go to state 93


state 79

    (60) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN
    (66) operand -> . INT
    (67) operand -> . opera
    (68) operand -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 20
    ID              shift and go to state 95
    OPERA           shift and go to state 24

    operand                        shift and go to state 94
    opera                          shift and go to state 21

state 80

    (18) loop -> LOOP LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 96


state 81

    (19) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    INT             shift and go to state 97


state 82

    (20) while -> WHILE LPAREN expression . compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (48) compare -> . EQEQ
    (49) compare -> . LTE
    (50) compare -> . GTE
    (51) compare -> . LT
    (52) compare -> . GT

    EQEQ            shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    LT              shift and go to state 88
    GT              shift and go to state 89

    compare                        shift and go to state 98

state 83

    (21) while -> WHILE TRUE LCRLBRACKET . line RCRLBRACKET
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    line                           shift and go to state 99
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 84

    (43) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (53) expression -> . INT
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . opera
    (57) expression -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 75
    OPERA           shift and go to state 24

    expression                     shift and go to state 100
    opera                          shift and go to state 74

state 85

    (48) compare -> EQEQ .

    INT             reduce using rule 48 (compare -> EQEQ .)
    TRUE            reduce using rule 48 (compare -> EQEQ .)
    FALSE           reduce using rule 48 (compare -> EQEQ .)
    ID              reduce using rule 48 (compare -> EQEQ .)
    OPERA           reduce using rule 48 (compare -> EQEQ .)


state 86

    (49) compare -> LTE .

    INT             reduce using rule 49 (compare -> LTE .)
    TRUE            reduce using rule 49 (compare -> LTE .)
    FALSE           reduce using rule 49 (compare -> LTE .)
    ID              reduce using rule 49 (compare -> LTE .)
    OPERA           reduce using rule 49 (compare -> LTE .)


state 87

    (50) compare -> GTE .

    INT             reduce using rule 50 (compare -> GTE .)
    TRUE            reduce using rule 50 (compare -> GTE .)
    FALSE           reduce using rule 50 (compare -> GTE .)
    ID              reduce using rule 50 (compare -> GTE .)
    OPERA           reduce using rule 50 (compare -> GTE .)


state 88

    (51) compare -> LT .

    INT             reduce using rule 51 (compare -> LT .)
    TRUE            reduce using rule 51 (compare -> LT .)
    FALSE           reduce using rule 51 (compare -> LT .)
    ID              reduce using rule 51 (compare -> LT .)
    OPERA           reduce using rule 51 (compare -> LT .)


state 89

    (52) compare -> GT .

    INT             reduce using rule 52 (compare -> GT .)
    TRUE            reduce using rule 52 (compare -> GT .)
    FALSE           reduce using rule 52 (compare -> GT .)
    ID              reduce using rule 52 (compare -> GT .)
    OPERA           reduce using rule 52 (compare -> GT .)


state 90

    (22) move -> MOVE LPAREN STRING . COMMA bool RPAREN SEMICOLON

    COMMA           shift and go to state 101


state 91

    (23) moveList -> MOVE LPAREN LSQRBRACKET . fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (24) fingerList -> . STRING COMMA STRING
    (25) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 103

    fingerList                     shift and go to state 102

state 92

    (26) delay -> DELAY LPAREN INT . COMMA STRING RPAREN SEMICOLON

    COMMA           shift and go to state 104


state 93

    (30) println -> PRINT EXPR LPAREN . args RPAREN SEMICOLON
    (31) args -> . INT body
    (32) args -> . ID body
    (33) args -> . opera body
    (34) args -> . TRUE body
    (35) args -> . FALSE body
    (36) args -> . STRING body
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 106
    ID              shift and go to state 107
    TRUE            shift and go to state 109
    FALSE           shift and go to state 110
    STRING          shift and go to state 111
    OPERA           shift and go to state 24

    args                           shift and go to state 105
    opera                          shift and go to state 108

state 94

    (60) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN

    COMMA           shift and go to state 112


state 95

    (68) operand -> ID .

    COMMA           reduce using rule 68 (operand -> ID .)
    RPAREN          reduce using rule 68 (operand -> ID .)


state 96

    (18) loop -> LOOP LCRLBRACKET line RCRLBRACKET .

    LOOP            reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 18 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)


state 97

    (19) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET

    DOTDOT          shift and go to state 113


state 98

    (20) while -> WHILE LPAREN expression compare . expression RPAREN LCRLBRACKET line RCRLBRACKET
    (53) expression -> . INT
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . opera
    (57) expression -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 75
    OPERA           shift and go to state 24

    expression                     shift and go to state 114
    opera                          shift and go to state 74

state 99

    (21) while -> WHILE TRUE LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 115


state 100

    (43) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET empty
    (44) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 116


state 101

    (22) move -> MOVE LPAREN STRING COMMA . bool RPAREN SEMICOLON
    (69) bool -> . TRUE
    (70) bool -> . FALSE
    (71) bool -> . ID

    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    ID              shift and go to state 118

    bool                           shift and go to state 117

state 102

    (23) moveList -> MOVE LPAREN LSQRBRACKET fingerList . RSQRBRACKET COMMA bool RPAREN SEMICOLON

    RSQRBRACKET     shift and go to state 119


state 103

    (24) fingerList -> STRING . COMMA STRING
    (25) fingerList -> STRING . COMMA fingerList

    COMMA           shift and go to state 120


state 104

    (26) delay -> DELAY LPAREN INT COMMA . STRING RPAREN SEMICOLON

    STRING          shift and go to state 121


state 105

    (30) println -> PRINT EXPR LPAREN args . RPAREN SEMICOLON

    RPAREN          shift and go to state 122


state 106

    (31) args -> INT . body
    (37) body -> . COMMA args
    (38) body -> . COMMA body
    (39) body -> . empty empty
    (73) empty -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 73 (empty -> .)

    body                           shift and go to state 123
    empty                          shift and go to state 125

state 107

    (32) args -> ID . body
    (37) body -> . COMMA args
    (38) body -> . COMMA body
    (39) body -> . empty empty
    (73) empty -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 73 (empty -> .)

    body                           shift and go to state 126
    empty                          shift and go to state 125

state 108

    (33) args -> opera . body
    (37) body -> . COMMA args
    (38) body -> . COMMA body
    (39) body -> . empty empty
    (73) empty -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 73 (empty -> .)

    body                           shift and go to state 127
    empty                          shift and go to state 125

state 109

    (34) args -> TRUE . body
    (37) body -> . COMMA args
    (38) body -> . COMMA body
    (39) body -> . empty empty
    (73) empty -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 73 (empty -> .)

    body                           shift and go to state 128
    empty                          shift and go to state 125

state 110

    (35) args -> FALSE . body
    (37) body -> . COMMA args
    (38) body -> . COMMA body
    (39) body -> . empty empty
    (73) empty -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 73 (empty -> .)

    body                           shift and go to state 129
    empty                          shift and go to state 125

state 111

    (36) args -> STRING . body
    (37) body -> . COMMA args
    (38) body -> . COMMA body
    (39) body -> . empty empty
    (73) empty -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 73 (empty -> .)

    body                           shift and go to state 130
    empty                          shift and go to state 125

state 112

    (60) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN
    (66) operand -> . INT
    (67) operand -> . opera
    (68) operand -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 20
    ID              shift and go to state 95
    OPERA           shift and go to state 24

    operand                        shift and go to state 131
    opera                          shift and go to state 21

state 113

    (19) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET

    INT             shift and go to state 132


state 114

    (20) while -> WHILE LPAREN expression compare expression . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 133


state 115

    (21) while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .

    LOOP            reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 21 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)


state 116

    (43) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET empty
    (44) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    line                           shift and go to state 134
    empty                          shift and go to state 40
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39

state 117

    (22) move -> MOVE LPAREN STRING COMMA bool . RPAREN SEMICOLON

    RPAREN          shift and go to state 135


state 118

    (71) bool -> ID .

    RPAREN          reduce using rule 71 (bool -> ID .)


state 119

    (23) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET . COMMA bool RPAREN SEMICOLON

    COMMA           shift and go to state 136


state 120

    (24) fingerList -> STRING COMMA . STRING
    (25) fingerList -> STRING COMMA . fingerList
    (24) fingerList -> . STRING COMMA STRING
    (25) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 137

    fingerList                     shift and go to state 138

state 121

    (26) delay -> DELAY LPAREN INT COMMA STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 139


state 122

    (30) println -> PRINT EXPR LPAREN args RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 140


state 123

    (31) args -> INT body .

    RPAREN          reduce using rule 31 (args -> INT body .)


state 124

    (37) body -> COMMA . args
    (38) body -> COMMA . body
    (31) args -> . INT body
    (32) args -> . ID body
    (33) args -> . opera body
    (34) args -> . TRUE body
    (35) args -> . FALSE body
    (36) args -> . STRING body
    (37) body -> . COMMA args
    (38) body -> . COMMA body
    (39) body -> . empty empty
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (73) empty -> .

    INT             shift and go to state 106
    ID              shift and go to state 107
    TRUE            shift and go to state 109
    FALSE           shift and go to state 110
    STRING          shift and go to state 111
    COMMA           shift and go to state 124
    OPERA           shift and go to state 24
    RPAREN          reduce using rule 73 (empty -> .)

    args                           shift and go to state 141
    body                           shift and go to state 142
    opera                          shift and go to state 108
    empty                          shift and go to state 125

state 125

    (39) body -> empty . empty
    (73) empty -> .

    RPAREN          reduce using rule 73 (empty -> .)

    empty                          shift and go to state 143

state 126

    (32) args -> ID body .

    RPAREN          reduce using rule 32 (args -> ID body .)


state 127

    (33) args -> opera body .

    RPAREN          reduce using rule 33 (args -> opera body .)


state 128

    (34) args -> TRUE body .

    RPAREN          reduce using rule 34 (args -> TRUE body .)


state 129

    (35) args -> FALSE body .

    RPAREN          reduce using rule 35 (args -> FALSE body .)


state 130

    (36) args -> STRING body .

    RPAREN          reduce using rule 36 (args -> STRING body .)


state 131

    (60) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN

    RPAREN          shift and go to state 144


state 132

    (19) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 145


state 133

    (20) while -> WHILE LPAREN expression compare expression RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 146


state 134

    (43) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET empty
    (44) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 147


state 135

    (22) move -> MOVE LPAREN STRING COMMA bool RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 148


state 136

    (23) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA . bool RPAREN SEMICOLON
    (69) bool -> . TRUE
    (70) bool -> . FALSE
    (71) bool -> . ID

    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    ID              shift and go to state 118

    bool                           shift and go to state 149

state 137

    (24) fingerList -> STRING COMMA STRING .
    (24) fingerList -> STRING . COMMA STRING
    (25) fingerList -> STRING . COMMA fingerList

    RSQRBRACKET     reduce using rule 24 (fingerList -> STRING COMMA STRING .)
    COMMA           shift and go to state 120


state 138

    (25) fingerList -> STRING COMMA fingerList .

    RSQRBRACKET     reduce using rule 25 (fingerList -> STRING COMMA fingerList .)


state 139

    (26) delay -> DELAY LPAREN INT COMMA STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 150


state 140

    (30) println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .

    LOOP            reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    FOR             reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    WHILE           reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    IF              reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    LET             reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    MOVE            reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    DELAY           reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    PRINT           reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    BREAK           reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 30 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)


state 141

    (37) body -> COMMA args .

    RPAREN          reduce using rule 37 (body -> COMMA args .)


state 142

    (38) body -> COMMA body .

    RPAREN          reduce using rule 38 (body -> COMMA body .)


state 143

    (39) body -> empty empty .

    RPAREN          reduce using rule 39 (body -> empty empty .)


state 144

    (60) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .

    SEMICOLON       reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    EQEQ            reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LTE             reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GTE             reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LT              reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GT              reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    COMMA           reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LCRLBRACKET     reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    RPAREN          reduce using rule 60 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)


state 145

    (19) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    line                           shift and go to state 151
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 146

    (20) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET . line RCRLBRACKET
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    line                           shift and go to state 152
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 147

    (43) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . empty
    (44) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (73) empty -> .
    (41) elseiforelse -> . elseif
    (42) elseiforelse -> . else
    (45) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (46) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (47) else -> . ELSE LCRLBRACKET line RCRLBRACKET

    LOOP            reduce using rule 73 (empty -> .)
    FOR             reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    LET             reduce using rule 73 (empty -> .)
    MOVE            reduce using rule 73 (empty -> .)
    DELAY           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    BREAK           reduce using rule 73 (empty -> .)
    RCRLBRACKET     reduce using rule 73 (empty -> .)
    ELSEIF          shift and go to state 157
    ELSE            shift and go to state 158

    empty                          shift and go to state 153
    elseiforelse                   shift and go to state 154
    elseif                         shift and go to state 155
    else                           shift and go to state 156

state 148

    (22) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .

    LOOP            reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    FOR             reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    WHILE           reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    IF              reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    LET             reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    MOVE            reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    DELAY           reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    PRINT           reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    BREAK           reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 22 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)


state 149

    (23) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool . RPAREN SEMICOLON

    RPAREN          shift and go to state 159


state 150

    (26) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .

    LOOP            reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    IF              reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    LET             reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    MOVE            reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    DELAY           reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    PRINT           reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    BREAK           reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 26 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)


state 151

    (19) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 160


state 152

    (20) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 161


state 153

    (43) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .

    LOOP            reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    FOR             reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    WHILE           reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    IF              reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    LET             reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    MOVE            reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    DELAY           reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    PRINT           reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    BREAK           reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    RCRLBRACKET     reduce using rule 43 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)


state 154

    (44) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    LOOP            reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    FOR             reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    WHILE           reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    IF              reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    LET             reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    MOVE            reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    DELAY           reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    PRINT           reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    BREAK           reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    RCRLBRACKET     reduce using rule 44 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)


state 155

    (41) elseiforelse -> elseif .

    LOOP            reduce using rule 41 (elseiforelse -> elseif .)
    FOR             reduce using rule 41 (elseiforelse -> elseif .)
    WHILE           reduce using rule 41 (elseiforelse -> elseif .)
    IF              reduce using rule 41 (elseiforelse -> elseif .)
    LET             reduce using rule 41 (elseiforelse -> elseif .)
    MOVE            reduce using rule 41 (elseiforelse -> elseif .)
    DELAY           reduce using rule 41 (elseiforelse -> elseif .)
    PRINT           reduce using rule 41 (elseiforelse -> elseif .)
    BREAK           reduce using rule 41 (elseiforelse -> elseif .)
    RCRLBRACKET     reduce using rule 41 (elseiforelse -> elseif .)


state 156

    (42) elseiforelse -> else .

    LOOP            reduce using rule 42 (elseiforelse -> else .)
    FOR             reduce using rule 42 (elseiforelse -> else .)
    WHILE           reduce using rule 42 (elseiforelse -> else .)
    IF              reduce using rule 42 (elseiforelse -> else .)
    LET             reduce using rule 42 (elseiforelse -> else .)
    MOVE            reduce using rule 42 (elseiforelse -> else .)
    DELAY           reduce using rule 42 (elseiforelse -> else .)
    PRINT           reduce using rule 42 (elseiforelse -> else .)
    BREAK           reduce using rule 42 (elseiforelse -> else .)
    RCRLBRACKET     reduce using rule 42 (elseiforelse -> else .)


state 157

    (45) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (46) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (53) expression -> . INT
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . opera
    (57) expression -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 75
    OPERA           shift and go to state 24

    expression                     shift and go to state 162
    opera                          shift and go to state 74

state 158

    (47) else -> ELSE . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 163


state 159

    (23) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 160

    (19) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .

    LOOP            reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 19 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)


state 161

    (20) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .

    LOOP            reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 20 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)


state 162

    (45) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET empty
    (46) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (48) compare -> . EQEQ
    (49) compare -> . LTE
    (50) compare -> . GTE
    (51) compare -> . LT
    (52) compare -> . GT

    EQEQ            shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    LT              shift and go to state 88
    GT              shift and go to state 89

    compare                        shift and go to state 165

state 163

    (47) else -> ELSE LCRLBRACKET . line RCRLBRACKET
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    line                           shift and go to state 166
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39
    empty                          shift and go to state 40

state 164

    (23) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .

    LOOP            reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    FOR             reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    WHILE           reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    IF              reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    LET             reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    MOVE            reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    DELAY           reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    PRINT           reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    BREAK           reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 23 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)


state 165

    (45) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET empty
    (46) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (53) expression -> . INT
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . opera
    (57) expression -> . ID
    (60) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ID              shift and go to state 75
    OPERA           shift and go to state 24

    expression                     shift and go to state 167
    opera                          shift and go to state 74

state 166

    (47) else -> ELSE LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 168


state 167

    (45) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET empty
    (46) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 169


state 168

    (47) else -> ELSE LCRLBRACKET line RCRLBRACKET .

    LOOP            reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 47 (else -> ELSE LCRLBRACKET line RCRLBRACKET .)


state 169

    (45) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET empty
    (46) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (7) line -> . loop line
    (8) line -> . for line
    (9) line -> . while line
    (10) line -> . if line
    (11) line -> . let line
    (12) line -> . move line
    (13) line -> . moveList line
    (14) line -> . delay line
    (15) line -> . println line
    (16) line -> . break line
    (17) line -> . empty
    (18) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (19) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (20) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (21) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (43) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (44) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (58) let -> . LET ID ASSIGN operand SEMICOLON
    (59) let -> . LET ID ASSIGN bool SEMICOLON
    (22) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (23) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (26) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (30) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (72) break -> . BREAK
    (73) empty -> .

    LOOP            shift and go to state 41
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    LET             shift and go to state 8
    MOVE            shift and go to state 45
    DELAY           shift and go to state 46
    PRINT           shift and go to state 47
    BREAK           shift and go to state 48
    RCRLBRACKET     reduce using rule 73 (empty -> .)

    line                           shift and go to state 170
    empty                          shift and go to state 40
    loop                           shift and go to state 30
    for                            shift and go to state 31
    while                          shift and go to state 32
    if                             shift and go to state 33
    let                            shift and go to state 34
    move                           shift and go to state 35
    moveList                       shift and go to state 36
    delay                          shift and go to state 37
    println                        shift and go to state 38
    break                          shift and go to state 39

state 170

    (45) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET empty
    (46) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 171


state 171

    (45) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . empty
    (46) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (73) empty -> .
    (41) elseiforelse -> . elseif
    (42) elseiforelse -> . else
    (45) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty
    (46) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (47) else -> . ELSE LCRLBRACKET line RCRLBRACKET

    LOOP            reduce using rule 73 (empty -> .)
    FOR             reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    LET             reduce using rule 73 (empty -> .)
    MOVE            reduce using rule 73 (empty -> .)
    DELAY           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    BREAK           reduce using rule 73 (empty -> .)
    RCRLBRACKET     reduce using rule 73 (empty -> .)
    ELSEIF          shift and go to state 157
    ELSE            shift and go to state 158

    empty                          shift and go to state 172
    elseiforelse                   shift and go to state 173
    elseif                         shift and go to state 155
    else                           shift and go to state 156

state 172

    (45) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .

    LOOP            reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    FOR             reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    WHILE           reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    IF              reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    LET             reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    MOVE            reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    DELAY           reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    PRINT           reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    BREAK           reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)
    RCRLBRACKET     reduce using rule 45 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET empty .)


state 173

    (46) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    LOOP            reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    FOR             reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    WHILE           reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    IF              reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    LET             reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    MOVE            reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    DELAY           reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    PRINT           reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    BREAK           reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    RCRLBRACKET     reduce using rule 46 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 17 resolved using rule (operand -> ID)
WARNING: rejected rule (bool -> ID) in state 17
