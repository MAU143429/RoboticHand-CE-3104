Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    INTEGER
    RANGE
    RETURN
    WRONG_ID

Grammar

Rule 0     S' -> main
Rule 1     main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
Rule 2     line -> main
Rule 3     line -> loop line
Rule 4     line -> for line
Rule 5     line -> while line
Rule 6     line -> if line
Rule 7     line -> let line
Rule 8     line -> move line
Rule 9     line -> moveList line
Rule 10    line -> delay line
Rule 11    line -> println line
Rule 12    line -> break line
Rule 13    line -> empty
Rule 14    loop -> LOOP LCRLBRACKET line RCRLBRACKET
Rule 15    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
Rule 16    while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
Rule 17    while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET
Rule 18    move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
Rule 19    moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
Rule 20    fingerList -> STRING COMMA STRING
Rule 21    fingerList -> STRING COMMA fingerList
Rule 22    delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
Rule 23    unit -> QUOT MIN QUOT
Rule 24    unit -> QUOT MIL QUOT
Rule 25    unit -> QUOT SEG QUOT
Rule 26    println -> PRINT EXPR LPAREN args RPAREN SEMICOLON
Rule 27    args -> INT body
Rule 28    args -> ID body
Rule 29    args -> opera body
Rule 30    args -> TRUE body
Rule 31    args -> FALSE body
Rule 32    args -> STRING body
Rule 33    body -> COMMA args
Rule 34    body -> COMMA body
Rule 35    body -> empty empty
Rule 36    text -> QUOT ID QUOT
Rule 37    elseiforelse -> elseif
Rule 38    elseiforelse -> else
Rule 39    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET
Rule 40    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 41    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
Rule 42    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 43    else -> ELSE LCRLBRACKET line RCRLBRACKET line
Rule 44    compare -> EQEQ
Rule 45    compare -> LTE
Rule 46    compare -> GTE
Rule 47    compare -> LT
Rule 48    compare -> GT
Rule 49    expression -> operand
Rule 50    expression -> bool
Rule 51    let -> LET ID ASSIGN operand SEMICOLON
Rule 52    let -> LET ID ASSIGN bool SEMICOLON
Rule 53    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN
Rule 54    operator -> PLUS
Rule 55    operator -> MINUS
Rule 56    operator -> DIVIDE
Rule 57    operator -> ASTR
Rule 58    operator -> TIMES
Rule 59    operand -> INT
Rule 60    operand -> opera
Rule 61    operand -> ID
Rule 62    bool -> TRUE
Rule 63    bool -> FALSE
Rule 64    bool -> ID
Rule 65    break -> BREAK
Rule 66    empty -> <empty>

Terminals, with rules where they appear

ARROW                : 
ASSIGN               : 51 52
ASTR                 : 57
BREAK                : 65
COMMA                : 18 19 20 21 22 33 34 53 53
DELAY                : 22
DIVIDE               : 56
DOTDOT               : 15
ELSE                 : 43
ELSEIF               : 41 42
EQEQ                 : 44
EXPR                 : 26
FALSE                : 31 63
FN                   : 1
FOR                  : 15
GT                   : 48
GTE                  : 46
ID                   : 15 28 36 51 52 61 64
IF                   : 39 40
IN                   : 15
INT                  : 15 15 22 27 59
INTEGER              : 
LCRLBRACKET          : 1 14 15 16 17 39 40 41 42 43
LET                  : 51 52
LOOP                 : 14
LPAREN               : 1 16 18 19 22 26 53
LSQRBRACKET          : 19
LT                   : 47
LTE                  : 45
MAIN                 : 1
MIL                  : 24
MIN                  : 23
MINUS                : 55
MOVE                 : 18 19
OPERA                : 53
PLUS                 : 54
PRINT                : 26
QUOT                 : 23 23 24 24 25 25 36 36
RANGE                : 
RCRLBRACKET          : 1 14 15 16 17 39 40 41 42 43
RETURN               : 
RPAREN               : 1 16 18 19 22 26 53
RSQRBRACKET          : 19
SEG                  : 25
SEMICOLON            : 18 19 22 26 51 52
STRING               : 18 20 20 21 22 32
TIMES                : 58
TRUE                 : 17 30 62
WHILE                : 16 17
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

args                 : 26 33
body                 : 27 28 29 30 31 32 34
bool                 : 18 19 50 52
break                : 12
compare              : 16 39 40 41 42
delay                : 10
else                 : 38
elseif               : 37
elseiforelse         : 40 42
empty                : 13 35 35
expression           : 16 16 39 39 40 40 41 41 42 42
fingerList           : 19 21
for                  : 4
if                   : 6
let                  : 7
line                 : 1 3 4 5 6 7 8 9 10 11 12 14 15 16 17 39 40 41 41 42 43 43
loop                 : 3
main                 : 2 0
move                 : 8
moveList             : 9
opera                : 29 60
operand              : 49 51 53 53
operator             : 53
println              : 11
text                 : 
unit                 : 
while                : 5

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    FN              shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> FN . MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 3


state 3

    (1) main -> FN MAIN . LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 4


state 4

    (1) main -> FN MAIN LPAREN . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 5


state 5

    (1) main -> FN MAIN LPAREN RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 6


state 6

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET . line RCRLBRACKET
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

    line                           shift and go to state 7
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 7

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 29


state 8

    (2) line -> main .

    RCRLBRACKET     reduce using rule 2 (line -> main .)
    FN              reduce using rule 2 (line -> main .)
    LOOP            reduce using rule 2 (line -> main .)
    FOR             reduce using rule 2 (line -> main .)
    WHILE           reduce using rule 2 (line -> main .)
    IF              reduce using rule 2 (line -> main .)
    LET             reduce using rule 2 (line -> main .)
    MOVE            reduce using rule 2 (line -> main .)
    DELAY           reduce using rule 2 (line -> main .)
    PRINT           reduce using rule 2 (line -> main .)
    BREAK           reduce using rule 2 (line -> main .)


state 9

    (3) line -> loop . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    loop                           shift and go to state 9
    line                           shift and go to state 30
    main                           shift and go to state 8
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 10

    (4) line -> for . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    for                            shift and go to state 10
    line                           shift and go to state 31
    main                           shift and go to state 8
    loop                           shift and go to state 9
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 11

    (5) line -> while . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    while                          shift and go to state 11
    line                           shift and go to state 32
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 12

    (6) line -> if . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    if                             shift and go to state 12
    line                           shift and go to state 33
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 13

    (7) line -> let . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    let                            shift and go to state 13
    line                           shift and go to state 34
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 14

    (8) line -> move . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    move                           shift and go to state 14
    line                           shift and go to state 35
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 15

    (9) line -> moveList . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    moveList                       shift and go to state 15
    line                           shift and go to state 36
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 16

    (10) line -> delay . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    delay                          shift and go to state 16
    line                           shift and go to state 37
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 17

    (11) line -> println . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    println                        shift and go to state 17
    line                           shift and go to state 38
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 18

    (12) line -> break . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    break                          shift and go to state 18
    line                           shift and go to state 39
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    empty                          shift and go to state 19

state 19

    (13) line -> empty .

    RCRLBRACKET     reduce using rule 13 (line -> empty .)
    FN              reduce using rule 13 (line -> empty .)
    LOOP            reduce using rule 13 (line -> empty .)
    FOR             reduce using rule 13 (line -> empty .)
    WHILE           reduce using rule 13 (line -> empty .)
    IF              reduce using rule 13 (line -> empty .)
    LET             reduce using rule 13 (line -> empty .)
    MOVE            reduce using rule 13 (line -> empty .)
    DELAY           reduce using rule 13 (line -> empty .)
    PRINT           reduce using rule 13 (line -> empty .)
    BREAK           reduce using rule 13 (line -> empty .)


state 20

    (14) loop -> LOOP . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 40


state 21

    (15) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    ID              shift and go to state 41


state 22

    (16) while -> WHILE . LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> WHILE . TRUE LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 42
    TRUE            shift and go to state 43


state 23

    (39) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (49) expression -> . operand
    (50) expression -> . bool
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    OPERA           shift and go to state 52

    expression                     shift and go to state 44
    operand                        shift and go to state 45
    bool                           shift and go to state 46
    opera                          shift and go to state 48

state 24

    (51) let -> LET . ID ASSIGN operand SEMICOLON
    (52) let -> LET . ID ASSIGN bool SEMICOLON

    ID              shift and go to state 53


state 25

    (18) move -> MOVE . LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> MOVE . LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON

    LPAREN          shift and go to state 54


state 26

    (22) delay -> DELAY . LPAREN INT COMMA STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 55


state 27

    (26) println -> PRINT . EXPR LPAREN args RPAREN SEMICOLON

    EXPR            shift and go to state 56


state 28

    (65) break -> BREAK .

    FN              reduce using rule 65 (break -> BREAK .)
    LOOP            reduce using rule 65 (break -> BREAK .)
    FOR             reduce using rule 65 (break -> BREAK .)
    WHILE           reduce using rule 65 (break -> BREAK .)
    IF              reduce using rule 65 (break -> BREAK .)
    LET             reduce using rule 65 (break -> BREAK .)
    MOVE            reduce using rule 65 (break -> BREAK .)
    DELAY           reduce using rule 65 (break -> BREAK .)
    PRINT           reduce using rule 65 (break -> BREAK .)
    BREAK           reduce using rule 65 (break -> BREAK .)
    RCRLBRACKET     reduce using rule 65 (break -> BREAK .)


state 29

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .

    $end            reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    FN              reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)


state 30

    (3) line -> loop line .

    RCRLBRACKET     reduce using rule 3 (line -> loop line .)
    FN              reduce using rule 3 (line -> loop line .)
    LOOP            reduce using rule 3 (line -> loop line .)
    FOR             reduce using rule 3 (line -> loop line .)
    WHILE           reduce using rule 3 (line -> loop line .)
    IF              reduce using rule 3 (line -> loop line .)
    LET             reduce using rule 3 (line -> loop line .)
    MOVE            reduce using rule 3 (line -> loop line .)
    DELAY           reduce using rule 3 (line -> loop line .)
    PRINT           reduce using rule 3 (line -> loop line .)
    BREAK           reduce using rule 3 (line -> loop line .)


state 31

    (4) line -> for line .

    RCRLBRACKET     reduce using rule 4 (line -> for line .)
    FN              reduce using rule 4 (line -> for line .)
    LOOP            reduce using rule 4 (line -> for line .)
    FOR             reduce using rule 4 (line -> for line .)
    WHILE           reduce using rule 4 (line -> for line .)
    IF              reduce using rule 4 (line -> for line .)
    LET             reduce using rule 4 (line -> for line .)
    MOVE            reduce using rule 4 (line -> for line .)
    DELAY           reduce using rule 4 (line -> for line .)
    PRINT           reduce using rule 4 (line -> for line .)
    BREAK           reduce using rule 4 (line -> for line .)


state 32

    (5) line -> while line .

    RCRLBRACKET     reduce using rule 5 (line -> while line .)
    FN              reduce using rule 5 (line -> while line .)
    LOOP            reduce using rule 5 (line -> while line .)
    FOR             reduce using rule 5 (line -> while line .)
    WHILE           reduce using rule 5 (line -> while line .)
    IF              reduce using rule 5 (line -> while line .)
    LET             reduce using rule 5 (line -> while line .)
    MOVE            reduce using rule 5 (line -> while line .)
    DELAY           reduce using rule 5 (line -> while line .)
    PRINT           reduce using rule 5 (line -> while line .)
    BREAK           reduce using rule 5 (line -> while line .)


state 33

    (6) line -> if line .

    RCRLBRACKET     reduce using rule 6 (line -> if line .)
    FN              reduce using rule 6 (line -> if line .)
    LOOP            reduce using rule 6 (line -> if line .)
    FOR             reduce using rule 6 (line -> if line .)
    WHILE           reduce using rule 6 (line -> if line .)
    IF              reduce using rule 6 (line -> if line .)
    LET             reduce using rule 6 (line -> if line .)
    MOVE            reduce using rule 6 (line -> if line .)
    DELAY           reduce using rule 6 (line -> if line .)
    PRINT           reduce using rule 6 (line -> if line .)
    BREAK           reduce using rule 6 (line -> if line .)


state 34

    (7) line -> let line .

    RCRLBRACKET     reduce using rule 7 (line -> let line .)
    FN              reduce using rule 7 (line -> let line .)
    LOOP            reduce using rule 7 (line -> let line .)
    FOR             reduce using rule 7 (line -> let line .)
    WHILE           reduce using rule 7 (line -> let line .)
    IF              reduce using rule 7 (line -> let line .)
    LET             reduce using rule 7 (line -> let line .)
    MOVE            reduce using rule 7 (line -> let line .)
    DELAY           reduce using rule 7 (line -> let line .)
    PRINT           reduce using rule 7 (line -> let line .)
    BREAK           reduce using rule 7 (line -> let line .)


state 35

    (8) line -> move line .

    RCRLBRACKET     reduce using rule 8 (line -> move line .)
    FN              reduce using rule 8 (line -> move line .)
    LOOP            reduce using rule 8 (line -> move line .)
    FOR             reduce using rule 8 (line -> move line .)
    WHILE           reduce using rule 8 (line -> move line .)
    IF              reduce using rule 8 (line -> move line .)
    LET             reduce using rule 8 (line -> move line .)
    MOVE            reduce using rule 8 (line -> move line .)
    DELAY           reduce using rule 8 (line -> move line .)
    PRINT           reduce using rule 8 (line -> move line .)
    BREAK           reduce using rule 8 (line -> move line .)


state 36

    (9) line -> moveList line .

    RCRLBRACKET     reduce using rule 9 (line -> moveList line .)
    FN              reduce using rule 9 (line -> moveList line .)
    LOOP            reduce using rule 9 (line -> moveList line .)
    FOR             reduce using rule 9 (line -> moveList line .)
    WHILE           reduce using rule 9 (line -> moveList line .)
    IF              reduce using rule 9 (line -> moveList line .)
    LET             reduce using rule 9 (line -> moveList line .)
    MOVE            reduce using rule 9 (line -> moveList line .)
    DELAY           reduce using rule 9 (line -> moveList line .)
    PRINT           reduce using rule 9 (line -> moveList line .)
    BREAK           reduce using rule 9 (line -> moveList line .)


state 37

    (10) line -> delay line .

    RCRLBRACKET     reduce using rule 10 (line -> delay line .)
    FN              reduce using rule 10 (line -> delay line .)
    LOOP            reduce using rule 10 (line -> delay line .)
    FOR             reduce using rule 10 (line -> delay line .)
    WHILE           reduce using rule 10 (line -> delay line .)
    IF              reduce using rule 10 (line -> delay line .)
    LET             reduce using rule 10 (line -> delay line .)
    MOVE            reduce using rule 10 (line -> delay line .)
    DELAY           reduce using rule 10 (line -> delay line .)
    PRINT           reduce using rule 10 (line -> delay line .)
    BREAK           reduce using rule 10 (line -> delay line .)


state 38

    (11) line -> println line .

    RCRLBRACKET     reduce using rule 11 (line -> println line .)
    FN              reduce using rule 11 (line -> println line .)
    LOOP            reduce using rule 11 (line -> println line .)
    FOR             reduce using rule 11 (line -> println line .)
    WHILE           reduce using rule 11 (line -> println line .)
    IF              reduce using rule 11 (line -> println line .)
    LET             reduce using rule 11 (line -> println line .)
    MOVE            reduce using rule 11 (line -> println line .)
    DELAY           reduce using rule 11 (line -> println line .)
    PRINT           reduce using rule 11 (line -> println line .)
    BREAK           reduce using rule 11 (line -> println line .)


state 39

    (12) line -> break line .

    RCRLBRACKET     reduce using rule 12 (line -> break line .)
    FN              reduce using rule 12 (line -> break line .)
    LOOP            reduce using rule 12 (line -> break line .)
    FOR             reduce using rule 12 (line -> break line .)
    WHILE           reduce using rule 12 (line -> break line .)
    IF              reduce using rule 12 (line -> break line .)
    LET             reduce using rule 12 (line -> break line .)
    MOVE            reduce using rule 12 (line -> break line .)
    DELAY           reduce using rule 12 (line -> break line .)
    PRINT           reduce using rule 12 (line -> break line .)
    BREAK           reduce using rule 12 (line -> break line .)


state 40

    (14) loop -> LOOP LCRLBRACKET . line RCRLBRACKET
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

    line                           shift and go to state 57
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 41

    (15) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    IN              shift and go to state 58


state 42

    (16) while -> WHILE LPAREN . expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (49) expression -> . operand
    (50) expression -> . bool
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    OPERA           shift and go to state 52

    expression                     shift and go to state 59
    operand                        shift and go to state 45
    bool                           shift and go to state 46
    opera                          shift and go to state 48

state 43

    (17) while -> WHILE TRUE . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 60


state 44

    (39) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (44) compare -> . EQEQ
    (45) compare -> . LTE
    (46) compare -> . GTE
    (47) compare -> . LT
    (48) compare -> . GT

    EQEQ            shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64
    LT              shift and go to state 65
    GT              shift and go to state 66

    compare                        shift and go to state 61

state 45

    (49) expression -> operand .

    EQEQ            reduce using rule 49 (expression -> operand .)
    LTE             reduce using rule 49 (expression -> operand .)
    GTE             reduce using rule 49 (expression -> operand .)
    LT              reduce using rule 49 (expression -> operand .)
    GT              reduce using rule 49 (expression -> operand .)
    LCRLBRACKET     reduce using rule 49 (expression -> operand .)
    RPAREN          reduce using rule 49 (expression -> operand .)


state 46

    (50) expression -> bool .

    EQEQ            reduce using rule 50 (expression -> bool .)
    LTE             reduce using rule 50 (expression -> bool .)
    GTE             reduce using rule 50 (expression -> bool .)
    LT              reduce using rule 50 (expression -> bool .)
    GT              reduce using rule 50 (expression -> bool .)
    LCRLBRACKET     reduce using rule 50 (expression -> bool .)
    RPAREN          reduce using rule 50 (expression -> bool .)


state 47

    (59) operand -> INT .

    EQEQ            reduce using rule 59 (operand -> INT .)
    LTE             reduce using rule 59 (operand -> INT .)
    GTE             reduce using rule 59 (operand -> INT .)
    LT              reduce using rule 59 (operand -> INT .)
    GT              reduce using rule 59 (operand -> INT .)
    LCRLBRACKET     reduce using rule 59 (operand -> INT .)
    SEMICOLON       reduce using rule 59 (operand -> INT .)
    RPAREN          reduce using rule 59 (operand -> INT .)
    COMMA           reduce using rule 59 (operand -> INT .)


state 48

    (60) operand -> opera .

    EQEQ            reduce using rule 60 (operand -> opera .)
    LTE             reduce using rule 60 (operand -> opera .)
    GTE             reduce using rule 60 (operand -> opera .)
    LT              reduce using rule 60 (operand -> opera .)
    GT              reduce using rule 60 (operand -> opera .)
    LCRLBRACKET     reduce using rule 60 (operand -> opera .)
    SEMICOLON       reduce using rule 60 (operand -> opera .)
    RPAREN          reduce using rule 60 (operand -> opera .)
    COMMA           reduce using rule 60 (operand -> opera .)


state 49

    (61) operand -> ID .
    (64) bool -> ID .

  ! reduce/reduce conflict for EQEQ resolved using rule 61 (operand -> ID .)
  ! reduce/reduce conflict for LTE resolved using rule 61 (operand -> ID .)
  ! reduce/reduce conflict for GTE resolved using rule 61 (operand -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 61 (operand -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 61 (operand -> ID .)
  ! reduce/reduce conflict for LCRLBRACKET resolved using rule 61 (operand -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 61 (operand -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 61 (operand -> ID .)
    EQEQ            reduce using rule 61 (operand -> ID .)
    LTE             reduce using rule 61 (operand -> ID .)
    GTE             reduce using rule 61 (operand -> ID .)
    LT              reduce using rule 61 (operand -> ID .)
    GT              reduce using rule 61 (operand -> ID .)
    LCRLBRACKET     reduce using rule 61 (operand -> ID .)
    SEMICOLON       reduce using rule 61 (operand -> ID .)
    RPAREN          reduce using rule 61 (operand -> ID .)

  ! EQEQ            [ reduce using rule 64 (bool -> ID .) ]
  ! LTE             [ reduce using rule 64 (bool -> ID .) ]
  ! GTE             [ reduce using rule 64 (bool -> ID .) ]
  ! LT              [ reduce using rule 64 (bool -> ID .) ]
  ! GT              [ reduce using rule 64 (bool -> ID .) ]
  ! LCRLBRACKET     [ reduce using rule 64 (bool -> ID .) ]
  ! SEMICOLON       [ reduce using rule 64 (bool -> ID .) ]
  ! RPAREN          [ reduce using rule 64 (bool -> ID .) ]


state 50

    (62) bool -> TRUE .

    EQEQ            reduce using rule 62 (bool -> TRUE .)
    LTE             reduce using rule 62 (bool -> TRUE .)
    GTE             reduce using rule 62 (bool -> TRUE .)
    LT              reduce using rule 62 (bool -> TRUE .)
    GT              reduce using rule 62 (bool -> TRUE .)
    LCRLBRACKET     reduce using rule 62 (bool -> TRUE .)
    SEMICOLON       reduce using rule 62 (bool -> TRUE .)
    RPAREN          reduce using rule 62 (bool -> TRUE .)


state 51

    (63) bool -> FALSE .

    EQEQ            reduce using rule 63 (bool -> FALSE .)
    LTE             reduce using rule 63 (bool -> FALSE .)
    GTE             reduce using rule 63 (bool -> FALSE .)
    LT              reduce using rule 63 (bool -> FALSE .)
    GT              reduce using rule 63 (bool -> FALSE .)
    LCRLBRACKET     reduce using rule 63 (bool -> FALSE .)
    SEMICOLON       reduce using rule 63 (bool -> FALSE .)
    RPAREN          reduce using rule 63 (bool -> FALSE .)


state 52

    (53) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN

    LPAREN          shift and go to state 67


state 53

    (51) let -> LET ID . ASSIGN operand SEMICOLON
    (52) let -> LET ID . ASSIGN bool SEMICOLON

    ASSIGN          shift and go to state 68


state 54

    (18) move -> MOVE LPAREN . STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> MOVE LPAREN . LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON

    STRING          shift and go to state 69
    LSQRBRACKET     shift and go to state 70


state 55

    (22) delay -> DELAY LPAREN . INT COMMA STRING RPAREN SEMICOLON

    INT             shift and go to state 71


state 56

    (26) println -> PRINT EXPR . LPAREN args RPAREN SEMICOLON

    LPAREN          shift and go to state 72


state 57

    (14) loop -> LOOP LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 73


state 58

    (15) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET

    INT             shift and go to state 74


state 59

    (16) while -> WHILE LPAREN expression . compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (44) compare -> . EQEQ
    (45) compare -> . LTE
    (46) compare -> . GTE
    (47) compare -> . LT
    (48) compare -> . GT

    EQEQ            shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64
    LT              shift and go to state 65
    GT              shift and go to state 66

    compare                        shift and go to state 75

state 60

    (17) while -> WHILE TRUE LCRLBRACKET . line RCRLBRACKET
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

    line                           shift and go to state 76
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 61

    (39) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET
    (40) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (49) expression -> . operand
    (50) expression -> . bool
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    OPERA           shift and go to state 52

    expression                     shift and go to state 77
    operand                        shift and go to state 45
    bool                           shift and go to state 46
    opera                          shift and go to state 48

state 62

    (44) compare -> EQEQ .

    INT             reduce using rule 44 (compare -> EQEQ .)
    ID              reduce using rule 44 (compare -> EQEQ .)
    TRUE            reduce using rule 44 (compare -> EQEQ .)
    FALSE           reduce using rule 44 (compare -> EQEQ .)
    OPERA           reduce using rule 44 (compare -> EQEQ .)


state 63

    (45) compare -> LTE .

    INT             reduce using rule 45 (compare -> LTE .)
    ID              reduce using rule 45 (compare -> LTE .)
    TRUE            reduce using rule 45 (compare -> LTE .)
    FALSE           reduce using rule 45 (compare -> LTE .)
    OPERA           reduce using rule 45 (compare -> LTE .)


state 64

    (46) compare -> GTE .

    INT             reduce using rule 46 (compare -> GTE .)
    ID              reduce using rule 46 (compare -> GTE .)
    TRUE            reduce using rule 46 (compare -> GTE .)
    FALSE           reduce using rule 46 (compare -> GTE .)
    OPERA           reduce using rule 46 (compare -> GTE .)


state 65

    (47) compare -> LT .

    INT             reduce using rule 47 (compare -> LT .)
    ID              reduce using rule 47 (compare -> LT .)
    TRUE            reduce using rule 47 (compare -> LT .)
    FALSE           reduce using rule 47 (compare -> LT .)
    OPERA           reduce using rule 47 (compare -> LT .)


state 66

    (48) compare -> GT .

    INT             reduce using rule 48 (compare -> GT .)
    ID              reduce using rule 48 (compare -> GT .)
    TRUE            reduce using rule 48 (compare -> GT .)
    FALSE           reduce using rule 48 (compare -> GT .)
    OPERA           reduce using rule 48 (compare -> GT .)


state 67

    (53) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN
    (54) operator -> . PLUS
    (55) operator -> . MINUS
    (56) operator -> . DIVIDE
    (57) operator -> . ASTR
    (58) operator -> . TIMES

    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    DIVIDE          shift and go to state 81
    ASTR            shift and go to state 82
    TIMES           shift and go to state 83

    operator                       shift and go to state 78

state 68

    (51) let -> LET ID ASSIGN . operand SEMICOLON
    (52) let -> LET ID ASSIGN . bool SEMICOLON
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    OPERA           shift and go to state 52

    operand                        shift and go to state 84
    bool                           shift and go to state 85
    opera                          shift and go to state 48

state 69

    (18) move -> MOVE LPAREN STRING . COMMA bool RPAREN SEMICOLON

    COMMA           shift and go to state 86


state 70

    (19) moveList -> MOVE LPAREN LSQRBRACKET . fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (20) fingerList -> . STRING COMMA STRING
    (21) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 88

    fingerList                     shift and go to state 87

state 71

    (22) delay -> DELAY LPAREN INT . COMMA STRING RPAREN SEMICOLON

    COMMA           shift and go to state 89


state 72

    (26) println -> PRINT EXPR LPAREN . args RPAREN SEMICOLON
    (27) args -> . INT body
    (28) args -> . ID body
    (29) args -> . opera body
    (30) args -> . TRUE body
    (31) args -> . FALSE body
    (32) args -> . STRING body
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    STRING          shift and go to state 96
    OPERA           shift and go to state 52

    args                           shift and go to state 90
    opera                          shift and go to state 93

state 73

    (14) loop -> LOOP LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET .)


state 74

    (15) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET

    DOTDOT          shift and go to state 97


state 75

    (16) while -> WHILE LPAREN expression compare . expression RPAREN LCRLBRACKET line RCRLBRACKET
    (49) expression -> . operand
    (50) expression -> . bool
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    OPERA           shift and go to state 52

    expression                     shift and go to state 98
    operand                        shift and go to state 45
    bool                           shift and go to state 46
    opera                          shift and go to state 48

state 76

    (17) while -> WHILE TRUE LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 99


state 77

    (39) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET
    (40) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 100


state 78

    (53) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN

    COMMA           shift and go to state 101


state 79

    (54) operator -> PLUS .

    COMMA           reduce using rule 54 (operator -> PLUS .)


state 80

    (55) operator -> MINUS .

    COMMA           reduce using rule 55 (operator -> MINUS .)


state 81

    (56) operator -> DIVIDE .

    COMMA           reduce using rule 56 (operator -> DIVIDE .)


state 82

    (57) operator -> ASTR .

    COMMA           reduce using rule 57 (operator -> ASTR .)


state 83

    (58) operator -> TIMES .

    COMMA           reduce using rule 58 (operator -> TIMES .)


state 84

    (51) let -> LET ID ASSIGN operand . SEMICOLON

    SEMICOLON       shift and go to state 102


state 85

    (52) let -> LET ID ASSIGN bool . SEMICOLON

    SEMICOLON       shift and go to state 103


state 86

    (18) move -> MOVE LPAREN STRING COMMA . bool RPAREN SEMICOLON
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    ID              shift and go to state 105

    bool                           shift and go to state 104

state 87

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList . RSQRBRACKET COMMA bool RPAREN SEMICOLON

    RSQRBRACKET     shift and go to state 106


state 88

    (20) fingerList -> STRING . COMMA STRING
    (21) fingerList -> STRING . COMMA fingerList

    COMMA           shift and go to state 107


state 89

    (22) delay -> DELAY LPAREN INT COMMA . STRING RPAREN SEMICOLON

    STRING          shift and go to state 108


state 90

    (26) println -> PRINT EXPR LPAREN args . RPAREN SEMICOLON

    RPAREN          shift and go to state 109


state 91

    (27) args -> INT . body
    (33) body -> . COMMA args
    (34) body -> . COMMA body
    (35) body -> . empty empty
    (66) empty -> .

    COMMA           shift and go to state 111
    RPAREN          reduce using rule 66 (empty -> .)

    body                           shift and go to state 110
    empty                          shift and go to state 112

state 92

    (28) args -> ID . body
    (33) body -> . COMMA args
    (34) body -> . COMMA body
    (35) body -> . empty empty
    (66) empty -> .

    COMMA           shift and go to state 111
    RPAREN          reduce using rule 66 (empty -> .)

    body                           shift and go to state 113
    empty                          shift and go to state 112

state 93

    (29) args -> opera . body
    (33) body -> . COMMA args
    (34) body -> . COMMA body
    (35) body -> . empty empty
    (66) empty -> .

    COMMA           shift and go to state 111
    RPAREN          reduce using rule 66 (empty -> .)

    body                           shift and go to state 114
    empty                          shift and go to state 112

state 94

    (30) args -> TRUE . body
    (33) body -> . COMMA args
    (34) body -> . COMMA body
    (35) body -> . empty empty
    (66) empty -> .

    COMMA           shift and go to state 111
    RPAREN          reduce using rule 66 (empty -> .)

    body                           shift and go to state 115
    empty                          shift and go to state 112

state 95

    (31) args -> FALSE . body
    (33) body -> . COMMA args
    (34) body -> . COMMA body
    (35) body -> . empty empty
    (66) empty -> .

    COMMA           shift and go to state 111
    RPAREN          reduce using rule 66 (empty -> .)

    body                           shift and go to state 116
    empty                          shift and go to state 112

state 96

    (32) args -> STRING . body
    (33) body -> . COMMA args
    (34) body -> . COMMA body
    (35) body -> . empty empty
    (66) empty -> .

    COMMA           shift and go to state 111
    RPAREN          reduce using rule 66 (empty -> .)

    body                           shift and go to state 117
    empty                          shift and go to state 112

state 97

    (15) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET

    INT             shift and go to state 118


state 98

    (16) while -> WHILE LPAREN expression compare expression . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 119


state 99

    (17) while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET .)


state 100

    (39) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET
    (40) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

    line                           shift and go to state 120
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 101

    (53) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 122
    OPERA           shift and go to state 52

    operand                        shift and go to state 121
    opera                          shift and go to state 48

state 102

    (51) let -> LET ID ASSIGN operand SEMICOLON .

    FN              reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    LOOP            reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    FOR             reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    WHILE           reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    IF              reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    LET             reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    MOVE            reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    DELAY           reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    PRINT           reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    BREAK           reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)
    RCRLBRACKET     reduce using rule 51 (let -> LET ID ASSIGN operand SEMICOLON .)


state 103

    (52) let -> LET ID ASSIGN bool SEMICOLON .

    FN              reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    LOOP            reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    FOR             reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    WHILE           reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    IF              reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    LET             reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    MOVE            reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    DELAY           reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    PRINT           reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    BREAK           reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)
    RCRLBRACKET     reduce using rule 52 (let -> LET ID ASSIGN bool SEMICOLON .)


state 104

    (18) move -> MOVE LPAREN STRING COMMA bool . RPAREN SEMICOLON

    RPAREN          shift and go to state 123


state 105

    (64) bool -> ID .

    RPAREN          reduce using rule 64 (bool -> ID .)


state 106

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET . COMMA bool RPAREN SEMICOLON

    COMMA           shift and go to state 124


state 107

    (20) fingerList -> STRING COMMA . STRING
    (21) fingerList -> STRING COMMA . fingerList
    (20) fingerList -> . STRING COMMA STRING
    (21) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 125

    fingerList                     shift and go to state 126

state 108

    (22) delay -> DELAY LPAREN INT COMMA STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 127


state 109

    (26) println -> PRINT EXPR LPAREN args RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 128


state 110

    (27) args -> INT body .

    RPAREN          reduce using rule 27 (args -> INT body .)


state 111

    (33) body -> COMMA . args
    (34) body -> COMMA . body
    (27) args -> . INT body
    (28) args -> . ID body
    (29) args -> . opera body
    (30) args -> . TRUE body
    (31) args -> . FALSE body
    (32) args -> . STRING body
    (33) body -> . COMMA args
    (34) body -> . COMMA body
    (35) body -> . empty empty
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (66) empty -> .

    INT             shift and go to state 91
    ID              shift and go to state 92
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    STRING          shift and go to state 96
    COMMA           shift and go to state 111
    OPERA           shift and go to state 52
    RPAREN          reduce using rule 66 (empty -> .)

    args                           shift and go to state 129
    body                           shift and go to state 130
    opera                          shift and go to state 93
    empty                          shift and go to state 112

state 112

    (35) body -> empty . empty
    (66) empty -> .

    RPAREN          reduce using rule 66 (empty -> .)

    empty                          shift and go to state 131

state 113

    (28) args -> ID body .

    RPAREN          reduce using rule 28 (args -> ID body .)


state 114

    (29) args -> opera body .

    RPAREN          reduce using rule 29 (args -> opera body .)


state 115

    (30) args -> TRUE body .

    RPAREN          reduce using rule 30 (args -> TRUE body .)


state 116

    (31) args -> FALSE body .

    RPAREN          reduce using rule 31 (args -> FALSE body .)


state 117

    (32) args -> STRING body .

    RPAREN          reduce using rule 32 (args -> STRING body .)


state 118

    (15) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 132


state 119

    (16) while -> WHILE LPAREN expression compare expression RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 133


state 120

    (39) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET
    (40) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 134


state 121

    (53) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN

    COMMA           shift and go to state 135


state 122

    (61) operand -> ID .

    COMMA           reduce using rule 61 (operand -> ID .)
    RPAREN          reduce using rule 61 (operand -> ID .)


state 123

    (18) move -> MOVE LPAREN STRING COMMA bool RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 136


state 124

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA . bool RPAREN SEMICOLON
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID

    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    ID              shift and go to state 105

    bool                           shift and go to state 137

state 125

    (20) fingerList -> STRING COMMA STRING .
    (20) fingerList -> STRING . COMMA STRING
    (21) fingerList -> STRING . COMMA fingerList

    RSQRBRACKET     reduce using rule 20 (fingerList -> STRING COMMA STRING .)
    COMMA           shift and go to state 107


state 126

    (21) fingerList -> STRING COMMA fingerList .

    RSQRBRACKET     reduce using rule 21 (fingerList -> STRING COMMA fingerList .)


state 127

    (22) delay -> DELAY LPAREN INT COMMA STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 138


state 128

    (26) println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .

    FN              reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    LOOP            reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    FOR             reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    WHILE           reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    IF              reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    LET             reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    MOVE            reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    DELAY           reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    PRINT           reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    BREAK           reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 26 (println -> PRINT EXPR LPAREN args RPAREN SEMICOLON .)


state 129

    (33) body -> COMMA args .

    RPAREN          reduce using rule 33 (body -> COMMA args .)


state 130

    (34) body -> COMMA body .

    RPAREN          reduce using rule 34 (body -> COMMA body .)


state 131

    (35) body -> empty empty .

    RPAREN          reduce using rule 35 (body -> empty empty .)


state 132

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

    line                           shift and go to state 139
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 133

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET . line RCRLBRACKET
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

    line                           shift and go to state 140
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 134

    (39) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .
    (40) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (37) elseiforelse -> . elseif
    (38) elseiforelse -> . else
    (41) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (42) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) else -> . ELSE LCRLBRACKET line RCRLBRACKET line

    FN              reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 39 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET .)
    ELSEIF          shift and go to state 144
    ELSE            shift and go to state 145

    elseiforelse                   shift and go to state 141
    elseif                         shift and go to state 142
    else                           shift and go to state 143

state 135

    (53) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 122
    OPERA           shift and go to state 52

    operand                        shift and go to state 146
    opera                          shift and go to state 48

state 136

    (18) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .

    FN              reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    LOOP            reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    FOR             reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    WHILE           reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    IF              reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    LET             reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    MOVE            reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    DELAY           reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    PRINT           reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    BREAK           reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 18 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON .)


state 137

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool . RPAREN SEMICOLON

    RPAREN          shift and go to state 147


state 138

    (22) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .

    FN              reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    LOOP            reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    IF              reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    LET             reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    MOVE            reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    DELAY           reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    PRINT           reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    BREAK           reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 22 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON .)


state 139

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 148


state 140

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 149


state 141

    (40) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    FN              reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    LOOP            reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    FOR             reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    WHILE           reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    IF              reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    LET             reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    MOVE            reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    DELAY           reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    PRINT           reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    BREAK           reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    RCRLBRACKET     reduce using rule 40 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)


state 142

    (37) elseiforelse -> elseif .

    RCRLBRACKET     reduce using rule 37 (elseiforelse -> elseif .)
    FN              reduce using rule 37 (elseiforelse -> elseif .)
    LOOP            reduce using rule 37 (elseiforelse -> elseif .)
    FOR             reduce using rule 37 (elseiforelse -> elseif .)
    WHILE           reduce using rule 37 (elseiforelse -> elseif .)
    IF              reduce using rule 37 (elseiforelse -> elseif .)
    LET             reduce using rule 37 (elseiforelse -> elseif .)
    MOVE            reduce using rule 37 (elseiforelse -> elseif .)
    DELAY           reduce using rule 37 (elseiforelse -> elseif .)
    PRINT           reduce using rule 37 (elseiforelse -> elseif .)
    BREAK           reduce using rule 37 (elseiforelse -> elseif .)


state 143

    (38) elseiforelse -> else .

    RCRLBRACKET     reduce using rule 38 (elseiforelse -> else .)
    FN              reduce using rule 38 (elseiforelse -> else .)
    LOOP            reduce using rule 38 (elseiforelse -> else .)
    FOR             reduce using rule 38 (elseiforelse -> else .)
    WHILE           reduce using rule 38 (elseiforelse -> else .)
    IF              reduce using rule 38 (elseiforelse -> else .)
    LET             reduce using rule 38 (elseiforelse -> else .)
    MOVE            reduce using rule 38 (elseiforelse -> else .)
    DELAY           reduce using rule 38 (elseiforelse -> else .)
    PRINT           reduce using rule 38 (elseiforelse -> else .)
    BREAK           reduce using rule 38 (elseiforelse -> else .)


state 144

    (41) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET line
    (42) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (49) expression -> . operand
    (50) expression -> . bool
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    OPERA           shift and go to state 52

    expression                     shift and go to state 150
    operand                        shift and go to state 45
    bool                           shift and go to state 46
    opera                          shift and go to state 48

state 145

    (43) else -> ELSE . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 151


state 146

    (53) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN

    RPAREN          shift and go to state 152


state 147

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 153


state 148

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET .)


state 149

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .

    FN              reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    LOOP            reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    FOR             reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    WHILE           reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    IF              reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    LET             reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    MOVE            reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    DELAY           reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    PRINT           reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    BREAK           reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET .)


state 150

    (41) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET line
    (42) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (44) compare -> . EQEQ
    (45) compare -> . LTE
    (46) compare -> . GTE
    (47) compare -> . LT
    (48) compare -> . GT

    EQEQ            shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64
    LT              shift and go to state 65
    GT              shift and go to state 66

    compare                        shift and go to state 154

state 151

    (43) else -> ELSE LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

    line                           shift and go to state 155
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 152

    (53) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .

    EQEQ            reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LTE             reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GTE             reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LT              reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GT              reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LCRLBRACKET     reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    SEMICOLON       reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    COMMA           reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    RPAREN          reduce using rule 53 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)


state 153

    (19) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .

    FN              reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    LOOP            reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    FOR             reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    WHILE           reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    IF              reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    LET             reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    MOVE            reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    DELAY           reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    PRINT           reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    BREAK           reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)
    RCRLBRACKET     reduce using rule 19 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON .)


state 154

    (41) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET line
    (42) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (49) expression -> . operand
    (50) expression -> . bool
    (59) operand -> . INT
    (60) operand -> . opera
    (61) operand -> . ID
    (62) bool -> . TRUE
    (63) bool -> . FALSE
    (64) bool -> . ID
    (53) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 47
    ID              shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    OPERA           shift and go to state 52

    expression                     shift and go to state 156
    operand                        shift and go to state 45
    bool                           shift and go to state 46
    opera                          shift and go to state 48

state 155

    (43) else -> ELSE LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 157


state 156

    (41) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET line
    (42) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 158


state 157

    (43) else -> ELSE LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    line                           shift and go to state 159
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 158

    (41) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET line
    (42) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)

    line                           shift and go to state 160
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 159

    (43) else -> ELSE LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    FN              reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    LOOP            reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    FOR             reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    WHILE           reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    IF              reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    LET             reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    MOVE            reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    DELAY           reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    PRINT           reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)
    BREAK           reduce using rule 43 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)


state 160

    (41) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET line
    (42) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 161


state 161

    (41) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . line
    (42) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (2) line -> . main
    (3) line -> . loop line
    (4) line -> . for line
    (5) line -> . while line
    (6) line -> . if line
    (7) line -> . let line
    (8) line -> . move line
    (9) line -> . moveList line
    (10) line -> . delay line
    (11) line -> . println line
    (12) line -> . break line
    (13) line -> . empty
    (37) elseiforelse -> . elseif
    (38) elseiforelse -> . else
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET
    (39) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET
    (40) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (51) let -> . LET ID ASSIGN operand SEMICOLON
    (52) let -> . LET ID ASSIGN bool SEMICOLON
    (18) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON
    (19) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON
    (22) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON
    (26) println -> . PRINT EXPR LPAREN args RPAREN SEMICOLON
    (65) break -> . BREAK
    (66) empty -> .
    (41) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (42) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (43) else -> . ELSE LCRLBRACKET line RCRLBRACKET line

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for MOVE resolved as shift
  ! shift/reduce conflict for DELAY resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 66 (empty -> .)
    ELSEIF          shift and go to state 144
    ELSE            shift and go to state 145

  ! FN              [ reduce using rule 66 (empty -> .) ]
  ! LOOP            [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! LET             [ reduce using rule 66 (empty -> .) ]
  ! MOVE            [ reduce using rule 66 (empty -> .) ]
  ! DELAY           [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]

    line                           shift and go to state 162
    elseiforelse                   shift and go to state 163
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19
    elseif                         shift and go to state 142
    else                           shift and go to state 143

state 162

    (41) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    FN              reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    LOOP            reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    FOR             reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    WHILE           reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    IF              reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    LET             reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    MOVE            reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    DELAY           reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    PRINT           reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)
    BREAK           reduce using rule 41 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)


state 163

    (42) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    RCRLBRACKET     reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    FN              reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    LOOP            reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    FOR             reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    WHILE           reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    IF              reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    LET             reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    MOVE            reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    DELAY           reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    PRINT           reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)
    BREAK           reduce using rule 42 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FN in state 9 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 9 resolved as shift
WARNING: shift/reduce conflict for FOR in state 9 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 9 resolved as shift
WARNING: shift/reduce conflict for IF in state 9 resolved as shift
WARNING: shift/reduce conflict for LET in state 9 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 9 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 9 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 9 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 9 resolved as shift
WARNING: shift/reduce conflict for FN in state 10 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 10 resolved as shift
WARNING: shift/reduce conflict for FOR in state 10 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 10 resolved as shift
WARNING: shift/reduce conflict for IF in state 10 resolved as shift
WARNING: shift/reduce conflict for LET in state 10 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 10 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 10 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 10 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 10 resolved as shift
WARNING: shift/reduce conflict for FN in state 11 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 11 resolved as shift
WARNING: shift/reduce conflict for FOR in state 11 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 11 resolved as shift
WARNING: shift/reduce conflict for IF in state 11 resolved as shift
WARNING: shift/reduce conflict for LET in state 11 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 11 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 11 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 11 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 11 resolved as shift
WARNING: shift/reduce conflict for FN in state 12 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 12 resolved as shift
WARNING: shift/reduce conflict for FOR in state 12 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 12 resolved as shift
WARNING: shift/reduce conflict for IF in state 12 resolved as shift
WARNING: shift/reduce conflict for LET in state 12 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 12 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 12 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 12 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 12 resolved as shift
WARNING: shift/reduce conflict for FN in state 13 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 13 resolved as shift
WARNING: shift/reduce conflict for FOR in state 13 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 13 resolved as shift
WARNING: shift/reduce conflict for IF in state 13 resolved as shift
WARNING: shift/reduce conflict for LET in state 13 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 13 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 13 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 13 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 13 resolved as shift
WARNING: shift/reduce conflict for FN in state 14 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 14 resolved as shift
WARNING: shift/reduce conflict for FOR in state 14 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 14 resolved as shift
WARNING: shift/reduce conflict for IF in state 14 resolved as shift
WARNING: shift/reduce conflict for LET in state 14 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 14 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 14 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 14 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 14 resolved as shift
WARNING: shift/reduce conflict for FN in state 15 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 15 resolved as shift
WARNING: shift/reduce conflict for FOR in state 15 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 15 resolved as shift
WARNING: shift/reduce conflict for IF in state 15 resolved as shift
WARNING: shift/reduce conflict for LET in state 15 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 15 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 15 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 15 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 15 resolved as shift
WARNING: shift/reduce conflict for FN in state 16 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 16 resolved as shift
WARNING: shift/reduce conflict for FOR in state 16 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 16 resolved as shift
WARNING: shift/reduce conflict for IF in state 16 resolved as shift
WARNING: shift/reduce conflict for LET in state 16 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 16 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 16 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 16 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 16 resolved as shift
WARNING: shift/reduce conflict for FN in state 17 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 17 resolved as shift
WARNING: shift/reduce conflict for FOR in state 17 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 17 resolved as shift
WARNING: shift/reduce conflict for IF in state 17 resolved as shift
WARNING: shift/reduce conflict for LET in state 17 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 17 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 17 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 17 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 17 resolved as shift
WARNING: shift/reduce conflict for FN in state 18 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 18 resolved as shift
WARNING: shift/reduce conflict for FOR in state 18 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 18 resolved as shift
WARNING: shift/reduce conflict for IF in state 18 resolved as shift
WARNING: shift/reduce conflict for LET in state 18 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 18 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 18 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 18 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 18 resolved as shift
WARNING: shift/reduce conflict for FN in state 157 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 157 resolved as shift
WARNING: shift/reduce conflict for FOR in state 157 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 157 resolved as shift
WARNING: shift/reduce conflict for IF in state 157 resolved as shift
WARNING: shift/reduce conflict for LET in state 157 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 157 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 157 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 157 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 157 resolved as shift
WARNING: shift/reduce conflict for FN in state 161 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 161 resolved as shift
WARNING: shift/reduce conflict for FOR in state 161 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 161 resolved as shift
WARNING: shift/reduce conflict for IF in state 161 resolved as shift
WARNING: shift/reduce conflict for LET in state 161 resolved as shift
WARNING: shift/reduce conflict for MOVE in state 161 resolved as shift
WARNING: shift/reduce conflict for DELAY in state 161 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 161 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 161 resolved as shift
WARNING: reduce/reduce conflict in state 49 resolved using rule (operand -> ID)
WARNING: rejected rule (bool -> ID) in state 49
