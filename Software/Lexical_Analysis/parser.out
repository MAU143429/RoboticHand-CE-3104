Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    BREAK
    ELSE
    ELSEIF
    EQEQ
    GT
    GTE
    IF
    INTEGER
    LSQRBRACKET
    LT
    LTE
    RANGE
    RETURN
    RSQRBRACKET
    WHILE
    WRONG_ID

Grammar

Rule 0     S' -> main
Rule 1     main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
Rule 2     line -> loop
Rule 3     line -> for
Rule 4     line -> let
Rule 5     line -> move
Rule 6     line -> delay
Rule 7     line -> println
Rule 8     line -> empty
Rule 9     loop -> LOOP LCRLBRACKET line RCRLBRACKET line
Rule 10    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
Rule 11    move -> MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
Rule 12    delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
Rule 13    unit -> QUOT MIN QUOT
Rule 14    unit -> QUOT MIL QUOT
Rule 15    unit -> QUOT SEG QUOT
Rule 16    println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
Rule 17    println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line
Rule 18    text -> QUOT ID QUOT
Rule 19    let -> LET ID ASSIGN INT SEMICOLON line
Rule 20    let -> LET ID ASSIGN expression SEMICOLON line
Rule 21    expression -> TRUE
Rule 22    expression -> FALSE
Rule 23    expression -> ID
Rule 24    expression -> opera
Rule 25    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN
Rule 26    operator -> PLUS
Rule 27    operator -> MINUS
Rule 28    operator -> DIVIDE
Rule 29    operator -> ASTR
Rule 30    operator -> TIMES
Rule 31    operand -> INT
Rule 32    operand -> ID
Rule 33    operand -> opera
Rule 34    empty -> <empty>

Terminals, with rules where they appear

ARROW                : 
ASSIGN               : 19 20
ASTR                 : 29
BREAK                : 
COMMA                : 11 12 25 25
DELAY                : 12
DIVIDE               : 28
DOTDOT               : 10
ELSE                 : 
ELSEIF               : 
EQEQ                 : 
EXPR                 : 16 17
FALSE                : 22
FN                   : 1
FOR                  : 10
GT                   : 
GTE                  : 
ID                   : 10 17 18 19 20 23 32
IF                   : 
IN                   : 10
INT                  : 10 10 12 19 31
INTEGER              : 
LCRLBRACKET          : 1 9 10
LET                  : 19 20
LOOP                 : 9
LPAREN               : 1 11 12 16 17 25
LSQRBRACKET          : 
LT                   : 
LTE                  : 
MAIN                 : 1
MIL                  : 14
MIN                  : 13
MINUS                : 27
MOVE                 : 11
OPERA                : 25
PLUS                 : 26
PRINT                : 16 17
QUOT                 : 13 13 14 14 15 15 18 18
RANGE                : 
RCRLBRACKET          : 1 9 10
RETURN               : 
RPAREN               : 1 11 12 16 17 25
RSQRBRACKET          : 
SEG                  : 15
SEMICOLON            : 11 12 16 17 19 20
STRING               : 11 12 16
TIMES                : 30
TRUE                 : 21
WHILE                : 
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

delay                : 6
empty                : 8
expression           : 11 20
for                  : 3
let                  : 4
line                 : 1 9 9 10 10 11 12 16 17 19 20
loop                 : 2
main                 : 0
move                 : 5
opera                : 24 33
operand              : 25 25
operator             : 25
println              : 7
text                 : 
unit                 : 

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    FN              shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> FN . MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 3


state 3

    (1) main -> FN MAIN . LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 4


state 4

    (1) main -> FN MAIN LPAREN . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 5


state 5

    (1) main -> FN MAIN LPAREN RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 6


state 6

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET . line RCRLBRACKET
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 7
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 7

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 21


state 8

    (2) line -> loop .

    RCRLBRACKET     reduce using rule 2 (line -> loop .)


state 9

    (3) line -> for .

    RCRLBRACKET     reduce using rule 3 (line -> for .)


state 10

    (4) line -> let .

    RCRLBRACKET     reduce using rule 4 (line -> let .)


state 11

    (5) line -> move .

    RCRLBRACKET     reduce using rule 5 (line -> move .)


state 12

    (6) line -> delay .

    RCRLBRACKET     reduce using rule 6 (line -> delay .)


state 13

    (7) line -> println .

    RCRLBRACKET     reduce using rule 7 (line -> println .)


state 14

    (8) line -> empty .

    RCRLBRACKET     reduce using rule 8 (line -> empty .)


state 15

    (9) loop -> LOOP . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 22


state 16

    (10) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    ID              shift and go to state 23


state 17

    (19) let -> LET . ID ASSIGN INT SEMICOLON line
    (20) let -> LET . ID ASSIGN expression SEMICOLON line

    ID              shift and go to state 24


state 18

    (11) move -> MOVE . LPAREN STRING COMMA expression RPAREN SEMICOLON line

    LPAREN          shift and go to state 25


state 19

    (12) delay -> DELAY . LPAREN INT COMMA STRING RPAREN SEMICOLON line

    LPAREN          shift and go to state 26


state 20

    (16) println -> PRINT . EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> PRINT . EXPR LPAREN ID RPAREN SEMICOLON line

    EXPR            shift and go to state 27


state 21

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .

    $end            reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)


state 22

    (9) loop -> LOOP LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 28
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 23

    (10) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    IN              shift and go to state 29


state 24

    (19) let -> LET ID . ASSIGN INT SEMICOLON line
    (20) let -> LET ID . ASSIGN expression SEMICOLON line

    ASSIGN          shift and go to state 30


state 25

    (11) move -> MOVE LPAREN . STRING COMMA expression RPAREN SEMICOLON line

    STRING          shift and go to state 31


state 26

    (12) delay -> DELAY LPAREN . INT COMMA STRING RPAREN SEMICOLON line

    INT             shift and go to state 32


state 27

    (16) println -> PRINT EXPR . LPAREN STRING RPAREN SEMICOLON line
    (17) println -> PRINT EXPR . LPAREN ID RPAREN SEMICOLON line

    LPAREN          shift and go to state 33


state 28

    (9) loop -> LOOP LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 34


state 29

    (10) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 35


state 30

    (19) let -> LET ID ASSIGN . INT SEMICOLON line
    (20) let -> LET ID ASSIGN . expression SEMICOLON line
    (21) expression -> . TRUE
    (22) expression -> . FALSE
    (23) expression -> . ID
    (24) expression -> . opera
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    ID              shift and go to state 36
    OPERA           shift and go to state 42

    expression                     shift and go to state 38
    opera                          shift and go to state 41

state 31

    (11) move -> MOVE LPAREN STRING . COMMA expression RPAREN SEMICOLON line

    COMMA           shift and go to state 43


state 32

    (12) delay -> DELAY LPAREN INT . COMMA STRING RPAREN SEMICOLON line

    COMMA           shift and go to state 44


state 33

    (16) println -> PRINT EXPR LPAREN . STRING RPAREN SEMICOLON line
    (17) println -> PRINT EXPR LPAREN . ID RPAREN SEMICOLON line

    STRING          shift and go to state 45
    ID              shift and go to state 46


state 34

    (9) loop -> LOOP LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 47
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 35

    (10) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    DOTDOT          shift and go to state 48


state 36

    (23) expression -> ID .

    SEMICOLON       reduce using rule 23 (expression -> ID .)
    RPAREN          reduce using rule 23 (expression -> ID .)


state 37

    (19) let -> LET ID ASSIGN INT . SEMICOLON line

    SEMICOLON       shift and go to state 49


state 38

    (20) let -> LET ID ASSIGN expression . SEMICOLON line

    SEMICOLON       shift and go to state 50


state 39

    (21) expression -> TRUE .

    SEMICOLON       reduce using rule 21 (expression -> TRUE .)
    RPAREN          reduce using rule 21 (expression -> TRUE .)


state 40

    (22) expression -> FALSE .

    SEMICOLON       reduce using rule 22 (expression -> FALSE .)
    RPAREN          reduce using rule 22 (expression -> FALSE .)


state 41

    (24) expression -> opera .

    SEMICOLON       reduce using rule 24 (expression -> opera .)
    RPAREN          reduce using rule 24 (expression -> opera .)


state 42

    (25) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN

    LPAREN          shift and go to state 51


state 43

    (11) move -> MOVE LPAREN STRING COMMA . expression RPAREN SEMICOLON line
    (21) expression -> . TRUE
    (22) expression -> . FALSE
    (23) expression -> . ID
    (24) expression -> . opera
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    ID              shift and go to state 36
    OPERA           shift and go to state 42

    expression                     shift and go to state 52
    opera                          shift and go to state 41

state 44

    (12) delay -> DELAY LPAREN INT COMMA . STRING RPAREN SEMICOLON line

    STRING          shift and go to state 53


state 45

    (16) println -> PRINT EXPR LPAREN STRING . RPAREN SEMICOLON line

    RPAREN          shift and go to state 54


state 46

    (17) println -> PRINT EXPR LPAREN ID . RPAREN SEMICOLON line

    RPAREN          shift and go to state 55


state 47

    (9) loop -> LOOP LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 9 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)


state 48

    (10) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 56


state 49

    (19) let -> LET ID ASSIGN INT SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 57
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 50

    (20) let -> LET ID ASSIGN expression SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 58
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 51

    (25) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN
    (26) operator -> . PLUS
    (27) operator -> . MINUS
    (28) operator -> . DIVIDE
    (29) operator -> . ASTR
    (30) operator -> . TIMES

    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    DIVIDE          shift and go to state 62
    ASTR            shift and go to state 63
    TIMES           shift and go to state 64

    operator                       shift and go to state 59

state 52

    (11) move -> MOVE LPAREN STRING COMMA expression . RPAREN SEMICOLON line

    RPAREN          shift and go to state 65


state 53

    (12) delay -> DELAY LPAREN INT COMMA STRING . RPAREN SEMICOLON line

    RPAREN          shift and go to state 66


state 54

    (16) println -> PRINT EXPR LPAREN STRING RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 67


state 55

    (17) println -> PRINT EXPR LPAREN ID RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 68


state 56

    (10) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 69


state 57

    (19) let -> LET ID ASSIGN INT SEMICOLON line .

    RCRLBRACKET     reduce using rule 19 (let -> LET ID ASSIGN INT SEMICOLON line .)


state 58

    (20) let -> LET ID ASSIGN expression SEMICOLON line .

    RCRLBRACKET     reduce using rule 20 (let -> LET ID ASSIGN expression SEMICOLON line .)


state 59

    (25) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN

    COMMA           shift and go to state 70


state 60

    (26) operator -> PLUS .

    COMMA           reduce using rule 26 (operator -> PLUS .)


state 61

    (27) operator -> MINUS .

    COMMA           reduce using rule 27 (operator -> MINUS .)


state 62

    (28) operator -> DIVIDE .

    COMMA           reduce using rule 28 (operator -> DIVIDE .)


state 63

    (29) operator -> ASTR .

    COMMA           reduce using rule 29 (operator -> ASTR .)


state 64

    (30) operator -> TIMES .

    COMMA           reduce using rule 30 (operator -> TIMES .)


state 65

    (11) move -> MOVE LPAREN STRING COMMA expression RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 71


state 66

    (12) delay -> DELAY LPAREN INT COMMA STRING RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 72


state 67

    (16) println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 73
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 68

    (17) println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 74
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 69

    (10) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 75
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 70

    (25) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN
    (31) operand -> . INT
    (32) operand -> . ID
    (33) operand -> . opera
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 77
    ID              shift and go to state 78
    OPERA           shift and go to state 42

    operand                        shift and go to state 76
    opera                          shift and go to state 79

state 71

    (11) move -> MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 80
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 72

    (12) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 81
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 73

    (16) println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 16 (println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .)


state 74

    (17) println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 17 (println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .)


state 75

    (10) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 82


state 76

    (25) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN

    COMMA           shift and go to state 83


state 77

    (31) operand -> INT .

    COMMA           reduce using rule 31 (operand -> INT .)
    RPAREN          reduce using rule 31 (operand -> INT .)


state 78

    (32) operand -> ID .

    COMMA           reduce using rule 32 (operand -> ID .)
    RPAREN          reduce using rule 32 (operand -> ID .)


state 79

    (33) operand -> opera .

    COMMA           reduce using rule 33 (operand -> opera .)
    RPAREN          reduce using rule 33 (operand -> opera .)


state 80

    (11) move -> MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 11 (move -> MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line .)


state 81

    (12) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 12 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .)


state 82

    (10) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . empty
    (9) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (10) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (19) let -> . LET ID ASSIGN INT SEMICOLON line
    (20) let -> . LET ID ASSIGN expression SEMICOLON line
    (11) move -> . MOVE LPAREN STRING COMMA expression RPAREN SEMICOLON line
    (12) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (16) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (17) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (34) empty -> .

    LOOP            shift and go to state 15
    FOR             shift and go to state 16
    LET             shift and go to state 17
    MOVE            shift and go to state 18
    DELAY           shift and go to state 19
    PRINT           shift and go to state 20
    RCRLBRACKET     reduce using rule 34 (empty -> .)

    line                           shift and go to state 84
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    empty                          shift and go to state 14

state 83

    (25) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN
    (31) operand -> . INT
    (32) operand -> . ID
    (33) operand -> . opera
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 77
    ID              shift and go to state 78
    OPERA           shift and go to state 42

    operand                        shift and go to state 85
    opera                          shift and go to state 79

state 84

    (10) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 10 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)


state 85

    (25) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN

    RPAREN          shift and go to state 86


state 86

    (25) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .

    SEMICOLON       reduce using rule 25 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    RPAREN          reduce using rule 25 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    COMMA           reduce using rule 25 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)

