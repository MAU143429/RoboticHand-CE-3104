Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    BREAK
    ELSE
    ELSEIF
    EQEQ
    GT
    GTE
    IF
    INTEGER
    LSQRBRACKET
    LT
    LTE
    RANGE
    RETURN
    RSQRBRACKET
    WHILE
    WRONG_ID

Grammar

Rule 0     S' -> main
Rule 1     main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
Rule 2     line -> loop
Rule 3     line -> for
Rule 4     line -> let
Rule 5     line -> move
Rule 6     line -> delay
Rule 7     line -> println
Rule 8     line -> opera
Rule 9     line -> empty
Rule 10    loop -> LOOP LCRLBRACKET line RCRLBRACKET line
Rule 11    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
Rule 12    move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
Rule 13    finger -> P
Rule 14    finger -> I
Rule 15    finger -> M
Rule 16    finger -> A
Rule 17    finger -> Q
Rule 18    finger -> T
Rule 19    delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
Rule 20    unit -> QUOT MIN QUOT
Rule 21    unit -> QUOT MIL QUOT
Rule 22    unit -> QUOT SEG QUOT
Rule 23    println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
Rule 24    text -> ID
Rule 25    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
Rule 26    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN
Rule 27    operator -> PLUS
Rule 28    operator -> MINUS
Rule 29    operator -> DIVIDE
Rule 30    operator -> ASTR
Rule 31    operator -> TIMES
Rule 32    operand -> INT
Rule 33    operand -> ID
Rule 34    operand -> opera
Rule 35    let -> LET ID ASSIGN INT SEMICOLON line
Rule 36    let -> LET ID ASSIGN expression SEMICOLON line
Rule 37    expression -> TRUE
Rule 38    expression -> FALSE
Rule 39    expression -> ID
Rule 40    empty -> <empty>

Terminals, with rules where they appear

A                    : 16
ARROW                : 
ASSIGN               : 35 36
ASTR                 : 30
BREAK                : 
COMMA                : 12 19 25 25 26 26
DELAY                : 19
DIVIDE               : 29
DOTDOT               : 11
ELSE                 : 
ELSEIF               : 
EQEQ                 : 
EXPR                 : 23
FALSE                : 38
FN                   : 1
FOR                  : 11
GT                   : 
GTE                  : 
I                    : 14
ID                   : 11 12 24 33 35 36 39
IF                   : 
IN                   : 11
INT                  : 11 11 19 32 35
INTEGER              : 
LCRLBRACKET          : 1 10 11
LET                  : 35 36
LOOP                 : 10
LPAREN               : 1 12 19 23 25 26
LSQRBRACKET          : 
LT                   : 
LTE                  : 
M                    : 15
MAIN                 : 1
MIL                  : 21
MIN                  : 20
MINUS                : 28
MOVE                 : 12
OPERA                : 25 26
P                    : 13
PLUS                 : 27
PRINT                : 23
Q                    : 17
QUOT                 : 12 12 20 20 21 21 22 22 23 23
RANGE                : 
RCRLBRACKET          : 1 10 11
RETURN               : 
RPAREN               : 1 12 19 23 25 26
RSQRBRACKET          : 
SEG                  : 22
SEMICOLON            : 12 19 23 25 35 36
T                    : 18
TIMES                : 31
TRUE                 : 37
WHILE                : 
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

delay                : 6
empty                : 9
expression           : 12 36
finger               : 
for                  : 3
let                  : 4
line                 : 1 10 10 11 11 12 19 23 25 35 36
loop                 : 2
main                 : 0
move                 : 5
opera                : 8 34
operand              : 25 25 26 26
operator             : 25 26
println              : 7
text                 : 23
unit                 : 19

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    FN              shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> FN . MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 3


state 3

    (1) main -> FN MAIN . LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 4


state 4

    (1) main -> FN MAIN LPAREN . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 5


state 5

    (1) main -> FN MAIN LPAREN RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 6


state 6

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET . line RCRLBRACKET
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)

    line                           shift and go to state 7
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 7

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 23


state 8

    (2) line -> loop .

    RCRLBRACKET     reduce using rule 2 (line -> loop .)
    COMMA           reduce using rule 2 (line -> loop .)
    RPAREN          reduce using rule 2 (line -> loop .)


state 9

    (3) line -> for .

    RCRLBRACKET     reduce using rule 3 (line -> for .)
    COMMA           reduce using rule 3 (line -> for .)
    RPAREN          reduce using rule 3 (line -> for .)


state 10

    (4) line -> let .

    RCRLBRACKET     reduce using rule 4 (line -> let .)
    COMMA           reduce using rule 4 (line -> let .)
    RPAREN          reduce using rule 4 (line -> let .)


state 11

    (5) line -> move .

    RCRLBRACKET     reduce using rule 5 (line -> move .)
    COMMA           reduce using rule 5 (line -> move .)
    RPAREN          reduce using rule 5 (line -> move .)


state 12

    (6) line -> delay .

    RCRLBRACKET     reduce using rule 6 (line -> delay .)
    COMMA           reduce using rule 6 (line -> delay .)
    RPAREN          reduce using rule 6 (line -> delay .)


state 13

    (7) line -> println .

    RCRLBRACKET     reduce using rule 7 (line -> println .)
    COMMA           reduce using rule 7 (line -> println .)
    RPAREN          reduce using rule 7 (line -> println .)


state 14

    (8) line -> opera .

    RCRLBRACKET     reduce using rule 8 (line -> opera .)
    COMMA           reduce using rule 8 (line -> opera .)
    RPAREN          reduce using rule 8 (line -> opera .)


state 15

    (9) line -> empty .

    RCRLBRACKET     reduce using rule 9 (line -> empty .)
    COMMA           reduce using rule 9 (line -> empty .)
    RPAREN          reduce using rule 9 (line -> empty .)


state 16

    (10) loop -> LOOP . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 24


state 17

    (11) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    ID              shift and go to state 25


state 18

    (35) let -> LET . ID ASSIGN INT SEMICOLON line
    (36) let -> LET . ID ASSIGN expression SEMICOLON line

    ID              shift and go to state 26


state 19

    (12) move -> MOVE . LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line

    LPAREN          shift and go to state 27


state 20

    (19) delay -> DELAY . LPAREN INT COMMA unit RPAREN SEMICOLON line

    LPAREN          shift and go to state 28


state 21

    (23) println -> PRINT . EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line

    EXPR            shift and go to state 29


state 22

    (25) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN

    LPAREN          shift and go to state 30


state 23

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .

    $end            reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)


state 24

    (10) loop -> LOOP LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)

    line                           shift and go to state 31
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 25

    (11) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    IN              shift and go to state 32


state 26

    (35) let -> LET ID . ASSIGN INT SEMICOLON line
    (36) let -> LET ID . ASSIGN expression SEMICOLON line

    ASSIGN          shift and go to state 33


state 27

    (12) move -> MOVE LPAREN . QUOT ID QUOT COMMA expression RPAREN SEMICOLON line

    QUOT            shift and go to state 34


state 28

    (19) delay -> DELAY LPAREN . INT COMMA unit RPAREN SEMICOLON line

    INT             shift and go to state 35


state 29

    (23) println -> PRINT EXPR . LPAREN QUOT text QUOT RPAREN SEMICOLON line

    LPAREN          shift and go to state 36


state 30

    (25) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN
    (27) operator -> . PLUS
    (28) operator -> . MINUS
    (29) operator -> . DIVIDE
    (30) operator -> . ASTR
    (31) operator -> . TIMES

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    DIVIDE          shift and go to state 40
    ASTR            shift and go to state 41
    TIMES           shift and go to state 42

    operator                       shift and go to state 37

state 31

    (10) loop -> LOOP LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 43


state 32

    (11) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 44


state 33

    (35) let -> LET ID ASSIGN . INT SEMICOLON line
    (36) let -> LET ID ASSIGN . expression SEMICOLON line
    (37) expression -> . TRUE
    (38) expression -> . FALSE
    (39) expression -> . ID

    INT             shift and go to state 46
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    ID              shift and go to state 45

    expression                     shift and go to state 47

state 34

    (12) move -> MOVE LPAREN QUOT . ID QUOT COMMA expression RPAREN SEMICOLON line

    ID              shift and go to state 50


state 35

    (19) delay -> DELAY LPAREN INT . COMMA unit RPAREN SEMICOLON line

    COMMA           shift and go to state 51


state 36

    (23) println -> PRINT EXPR LPAREN . QUOT text QUOT RPAREN SEMICOLON line

    QUOT            shift and go to state 52


state 37

    (25) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN

    COMMA           shift and go to state 53


state 38

    (27) operator -> PLUS .

    COMMA           reduce using rule 27 (operator -> PLUS .)


state 39

    (28) operator -> MINUS .

    COMMA           reduce using rule 28 (operator -> MINUS .)


state 40

    (29) operator -> DIVIDE .

    COMMA           reduce using rule 29 (operator -> DIVIDE .)


state 41

    (30) operator -> ASTR .

    COMMA           reduce using rule 30 (operator -> ASTR .)


state 42

    (31) operator -> TIMES .

    COMMA           reduce using rule 31 (operator -> TIMES .)


state 43

    (10) loop -> LOOP LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)
    COMMA           reduce using rule 40 (empty -> .)
    RPAREN          reduce using rule 40 (empty -> .)

    line                           shift and go to state 54
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 44

    (11) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    DOTDOT          shift and go to state 55


state 45

    (39) expression -> ID .

    SEMICOLON       reduce using rule 39 (expression -> ID .)
    RPAREN          reduce using rule 39 (expression -> ID .)


state 46

    (35) let -> LET ID ASSIGN INT . SEMICOLON line

    SEMICOLON       shift and go to state 56


state 47

    (36) let -> LET ID ASSIGN expression . SEMICOLON line

    SEMICOLON       shift and go to state 57


state 48

    (37) expression -> TRUE .

    SEMICOLON       reduce using rule 37 (expression -> TRUE .)
    RPAREN          reduce using rule 37 (expression -> TRUE .)


state 49

    (38) expression -> FALSE .

    SEMICOLON       reduce using rule 38 (expression -> FALSE .)
    RPAREN          reduce using rule 38 (expression -> FALSE .)


state 50

    (12) move -> MOVE LPAREN QUOT ID . QUOT COMMA expression RPAREN SEMICOLON line

    QUOT            shift and go to state 58


state 51

    (19) delay -> DELAY LPAREN INT COMMA . unit RPAREN SEMICOLON line
    (20) unit -> . QUOT MIN QUOT
    (21) unit -> . QUOT MIL QUOT
    (22) unit -> . QUOT SEG QUOT

    QUOT            shift and go to state 60

    unit                           shift and go to state 59

state 52

    (23) println -> PRINT EXPR LPAREN QUOT . text QUOT RPAREN SEMICOLON line
    (24) text -> . ID

    ID              shift and go to state 62

    text                           shift and go to state 61

state 53

    (25) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN
    (32) operand -> . INT
    (33) operand -> . ID
    (34) operand -> . opera
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 64
    ID              shift and go to state 65
    OPERA           shift and go to state 22

    operand                        shift and go to state 63
    opera                          shift and go to state 66

state 54

    (10) loop -> LOOP LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 10 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)
    COMMA           reduce using rule 10 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)
    RPAREN          reduce using rule 10 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)


state 55

    (11) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 67


state 56

    (35) let -> LET ID ASSIGN INT SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)
    COMMA           reduce using rule 40 (empty -> .)
    RPAREN          reduce using rule 40 (empty -> .)

    line                           shift and go to state 68
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 57

    (36) let -> LET ID ASSIGN expression SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)
    COMMA           reduce using rule 40 (empty -> .)
    RPAREN          reduce using rule 40 (empty -> .)

    line                           shift and go to state 69
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 58

    (12) move -> MOVE LPAREN QUOT ID QUOT . COMMA expression RPAREN SEMICOLON line

    COMMA           shift and go to state 70


state 59

    (19) delay -> DELAY LPAREN INT COMMA unit . RPAREN SEMICOLON line

    RPAREN          shift and go to state 71


state 60

    (20) unit -> QUOT . MIN QUOT
    (21) unit -> QUOT . MIL QUOT
    (22) unit -> QUOT . SEG QUOT

    MIN             shift and go to state 72
    MIL             shift and go to state 73
    SEG             shift and go to state 74


state 61

    (23) println -> PRINT EXPR LPAREN QUOT text . QUOT RPAREN SEMICOLON line

    QUOT            shift and go to state 75


state 62

    (24) text -> ID .

    QUOT            reduce using rule 24 (text -> ID .)


state 63

    (25) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN SEMICOLON line
    (26) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN

    COMMA           shift and go to state 76


state 64

    (32) operand -> INT .

    COMMA           reduce using rule 32 (operand -> INT .)
    RPAREN          reduce using rule 32 (operand -> INT .)


state 65

    (33) operand -> ID .

    COMMA           reduce using rule 33 (operand -> ID .)
    RPAREN          reduce using rule 33 (operand -> ID .)


state 66

    (34) operand -> opera .

    COMMA           reduce using rule 34 (operand -> opera .)
    RPAREN          reduce using rule 34 (operand -> opera .)


state 67

    (11) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 77


state 68

    (35) let -> LET ID ASSIGN INT SEMICOLON line .

    RCRLBRACKET     reduce using rule 35 (let -> LET ID ASSIGN INT SEMICOLON line .)
    COMMA           reduce using rule 35 (let -> LET ID ASSIGN INT SEMICOLON line .)
    RPAREN          reduce using rule 35 (let -> LET ID ASSIGN INT SEMICOLON line .)


state 69

    (36) let -> LET ID ASSIGN expression SEMICOLON line .

    RCRLBRACKET     reduce using rule 36 (let -> LET ID ASSIGN expression SEMICOLON line .)
    COMMA           reduce using rule 36 (let -> LET ID ASSIGN expression SEMICOLON line .)
    RPAREN          reduce using rule 36 (let -> LET ID ASSIGN expression SEMICOLON line .)


state 70

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA . expression RPAREN SEMICOLON line
    (37) expression -> . TRUE
    (38) expression -> . FALSE
    (39) expression -> . ID

    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    ID              shift and go to state 45

    expression                     shift and go to state 78

state 71

    (19) delay -> DELAY LPAREN INT COMMA unit RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 79


state 72

    (20) unit -> QUOT MIN . QUOT

    QUOT            shift and go to state 80


state 73

    (21) unit -> QUOT MIL . QUOT

    QUOT            shift and go to state 81


state 74

    (22) unit -> QUOT SEG . QUOT

    QUOT            shift and go to state 82


state 75

    (23) println -> PRINT EXPR LPAREN QUOT text QUOT . RPAREN SEMICOLON line

    RPAREN          shift and go to state 83


state 76

    (25) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN SEMICOLON line
    (26) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN
    (32) operand -> . INT
    (33) operand -> . ID
    (34) operand -> . opera
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 64
    ID              shift and go to state 65
    OPERA           shift and go to state 22

    operand                        shift and go to state 84
    opera                          shift and go to state 66

state 77

    (11) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)

    line                           shift and go to state 85
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 78

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA expression . RPAREN SEMICOLON line

    RPAREN          shift and go to state 86


state 79

    (19) delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)
    COMMA           reduce using rule 40 (empty -> .)
    RPAREN          reduce using rule 40 (empty -> .)

    line                           shift and go to state 87
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 80

    (20) unit -> QUOT MIN QUOT .

    RPAREN          reduce using rule 20 (unit -> QUOT MIN QUOT .)


state 81

    (21) unit -> QUOT MIL QUOT .

    RPAREN          reduce using rule 21 (unit -> QUOT MIL QUOT .)


state 82

    (22) unit -> QUOT SEG QUOT .

    RPAREN          reduce using rule 22 (unit -> QUOT SEG QUOT .)


state 83

    (23) println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 88


state 84

    (25) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN SEMICOLON line
    (26) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN

    RPAREN          shift and go to state 89


state 85

    (11) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 90


state 86

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 91


state 87

    (19) delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 19 (delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line .)
    COMMA           reduce using rule 19 (delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line .)
    RPAREN          reduce using rule 19 (delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line .)


state 88

    (23) println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)
    COMMA           reduce using rule 40 (empty -> .)
    RPAREN          reduce using rule 40 (empty -> .)

    line                           shift and go to state 92
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 89

    (25) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN . SEMICOLON line
    (26) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .

    SEMICOLON       shift and go to state 93
    RCRLBRACKET     reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    COMMA           reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    RPAREN          reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)


state 90

    (11) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)
    COMMA           reduce using rule 40 (empty -> .)
    RPAREN          reduce using rule 40 (empty -> .)

    line                           shift and go to state 94
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 91

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)
    COMMA           reduce using rule 40 (empty -> .)
    RPAREN          reduce using rule 40 (empty -> .)

    line                           shift and go to state 95
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 92

    (23) println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 23 (println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line .)
    COMMA           reduce using rule 23 (println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line .)
    RPAREN          reduce using rule 23 (println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line .)


state 93

    (25) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . let
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (35) let -> . LET ID ASSIGN INT SEMICOLON line
    (36) let -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (25) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN
    (40) empty -> .

    LOOP            shift and go to state 16
    FOR             shift and go to state 17
    LET             shift and go to state 18
    MOVE            shift and go to state 19
    DELAY           shift and go to state 20
    PRINT           shift and go to state 21
    OPERA           shift and go to state 22
    RCRLBRACKET     reduce using rule 40 (empty -> .)
    COMMA           reduce using rule 40 (empty -> .)
    RPAREN          reduce using rule 40 (empty -> .)

    line                           shift and go to state 96
    loop                           shift and go to state 8
    for                            shift and go to state 9
    let                            shift and go to state 10
    move                           shift and go to state 11
    delay                          shift and go to state 12
    println                        shift and go to state 13
    opera                          shift and go to state 14
    empty                          shift and go to state 15

state 94

    (11) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 11 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)
    COMMA           reduce using rule 11 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)
    RPAREN          reduce using rule 11 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)


state 95

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 12 (move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line .)
    COMMA           reduce using rule 12 (move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line .)
    RPAREN          reduce using rule 12 (move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line .)


state 96

    (25) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 25 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line .)
    COMMA           reduce using rule 25 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line .)
    RPAREN          reduce using rule 25 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN SEMICOLON line .)

