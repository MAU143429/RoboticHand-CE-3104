Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    BREAK
    ELSE
    ELSEIF
    EQEQ
    GT
    GTE
    IF
    INTEGER
    LSQRBRACKET
    LT
    LTE
    RANGE
    RETURN
    RSQRBRACKET
    WHILE
    WRONG_ID

Grammar

Rule 0     S' -> main
Rule 1     main -> FN MAIN LCRLBRACKET line RCRLBRACKET
Rule 2     line -> loop
Rule 3     line -> for
Rule 4     line -> variable
Rule 5     line -> move
Rule 6     line -> delay
Rule 7     line -> println
Rule 8     line -> opera
Rule 9     line -> empty
Rule 10    loop -> LOOP LCRLBRACKET line RCRLBRACKET line
Rule 11    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
Rule 12    move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
Rule 13    finger -> P
Rule 14    finger -> I
Rule 15    finger -> M
Rule 16    finger -> A
Rule 17    finger -> Q
Rule 18    finger -> T
Rule 19    delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
Rule 20    unit -> QUOT MIN QUOT
Rule 21    unit -> QUOT MIL QUOT
Rule 22    unit -> QUOT SEG QUOT
Rule 23    println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
Rule 24    text -> ID
Rule 25    variable -> LET ID ASSIGN INT SEMICOLON line
Rule 26    variable -> LET ID ASSIGN expression SEMICOLON line
Rule 27    expression -> TRUE
Rule 28    expression -> FALSE
Rule 29    expression -> ID
Rule 30    opera -> OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
Rule 31    operators -> PLUS
Rule 32    operators -> MINUS
Rule 33    operators -> DIVIDE
Rule 34    operators -> ASTR
Rule 35    operators -> TIMES
Rule 36    operand -> INT
Rule 37    operand -> ID
Rule 38    operand -> OPERA
Rule 39    empty -> <empty>

Terminals, with rules where they appear

A                    : 16
ARROW                : 
ASSIGN               : 25 26
ASTR                 : 34
BREAK                : 
COMMA                : 12 19 30 30
DELAY                : 19
DIVIDE               : 33
DOTDOT               : 11
ELSE                 : 
ELSEIF               : 
EQEQ                 : 
EXPR                 : 23
FALSE                : 28
FN                   : 1
FOR                  : 11
GT                   : 
GTE                  : 
I                    : 14
ID                   : 11 12 24 25 26 29 37
IF                   : 
IN                   : 11
INT                  : 11 11 19 25 36
INTEGER              : 
LCRLBRACKET          : 1 10 11
LET                  : 25 26
LOOP                 : 10
LPAREN               : 12 19 23 30
LSQRBRACKET          : 
LT                   : 
LTE                  : 
M                    : 15
MAIN                 : 1
MIL                  : 21
MIN                  : 20
MINUS                : 32
MOVE                 : 12
OPERA                : 30 38
P                    : 13
PLUS                 : 31
PRINT                : 23
Q                    : 17
QUOT                 : 12 12 20 20 21 21 22 22 23 23
RANGE                : 
RCRLBRACKET          : 1 10 11
RETURN               : 
RPAREN               : 12 19 23 30
RSQRBRACKET          : 
SEG                  : 22
SEMICOLON            : 12 19 23 25 26 30
T                    : 18
TIMES                : 35
TRUE                 : 27
WHILE                : 
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

delay                : 6
empty                : 9
expression           : 12 26
finger               : 
for                  : 3
line                 : 1 10 10 11 11 12 19 23 25 26 30
loop                 : 2
main                 : 0
move                 : 5
opera                : 8
operand              : 30 30
operators            : 30
println              : 7
text                 : 23
unit                 : 19
variable             : 4

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . FN MAIN LCRLBRACKET line RCRLBRACKET

    FN              shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> FN . MAIN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 3


state 3

    (1) main -> FN MAIN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 4


state 4

    (1) main -> FN MAIN LCRLBRACKET . line RCRLBRACKET
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 5
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 5

    (1) main -> FN MAIN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 21


state 6

    (2) line -> loop .

    RCRLBRACKET     reduce using rule 2 (line -> loop .)


state 7

    (3) line -> for .

    RCRLBRACKET     reduce using rule 3 (line -> for .)


state 8

    (4) line -> variable .

    RCRLBRACKET     reduce using rule 4 (line -> variable .)


state 9

    (5) line -> move .

    RCRLBRACKET     reduce using rule 5 (line -> move .)


state 10

    (6) line -> delay .

    RCRLBRACKET     reduce using rule 6 (line -> delay .)


state 11

    (7) line -> println .

    RCRLBRACKET     reduce using rule 7 (line -> println .)


state 12

    (8) line -> opera .

    RCRLBRACKET     reduce using rule 8 (line -> opera .)


state 13

    (9) line -> empty .

    RCRLBRACKET     reduce using rule 9 (line -> empty .)


state 14

    (10) loop -> LOOP . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 22


state 15

    (11) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    ID              shift and go to state 23


state 16

    (25) variable -> LET . ID ASSIGN INT SEMICOLON line
    (26) variable -> LET . ID ASSIGN expression SEMICOLON line

    ID              shift and go to state 24


state 17

    (12) move -> MOVE . LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line

    LPAREN          shift and go to state 25


state 18

    (19) delay -> DELAY . LPAREN INT COMMA unit RPAREN SEMICOLON line

    LPAREN          shift and go to state 26


state 19

    (23) println -> PRINT . EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line

    EXPR            shift and go to state 27


state 20

    (30) opera -> OPERA . LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line

    LPAREN          shift and go to state 28


state 21

    (1) main -> FN MAIN LCRLBRACKET line RCRLBRACKET .

    $end            reduce using rule 1 (main -> FN MAIN LCRLBRACKET line RCRLBRACKET .)


state 22

    (10) loop -> LOOP LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 29
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 23

    (11) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    IN              shift and go to state 30


state 24

    (25) variable -> LET ID . ASSIGN INT SEMICOLON line
    (26) variable -> LET ID . ASSIGN expression SEMICOLON line

    ASSIGN          shift and go to state 31


state 25

    (12) move -> MOVE LPAREN . QUOT ID QUOT COMMA expression RPAREN SEMICOLON line

    QUOT            shift and go to state 32


state 26

    (19) delay -> DELAY LPAREN . INT COMMA unit RPAREN SEMICOLON line

    INT             shift and go to state 33


state 27

    (23) println -> PRINT EXPR . LPAREN QUOT text QUOT RPAREN SEMICOLON line

    LPAREN          shift and go to state 34


state 28

    (30) opera -> OPERA LPAREN . operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (31) operators -> . PLUS
    (32) operators -> . MINUS
    (33) operators -> . DIVIDE
    (34) operators -> . ASTR
    (35) operators -> . TIMES

    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    DIVIDE          shift and go to state 38
    ASTR            shift and go to state 39
    TIMES           shift and go to state 40

    operators                      shift and go to state 35

state 29

    (10) loop -> LOOP LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 41


state 30

    (11) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 42


state 31

    (25) variable -> LET ID ASSIGN . INT SEMICOLON line
    (26) variable -> LET ID ASSIGN . expression SEMICOLON line
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . ID

    INT             shift and go to state 44
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 43

    expression                     shift and go to state 45

state 32

    (12) move -> MOVE LPAREN QUOT . ID QUOT COMMA expression RPAREN SEMICOLON line

    ID              shift and go to state 48


state 33

    (19) delay -> DELAY LPAREN INT . COMMA unit RPAREN SEMICOLON line

    COMMA           shift and go to state 49


state 34

    (23) println -> PRINT EXPR LPAREN . QUOT text QUOT RPAREN SEMICOLON line

    QUOT            shift and go to state 50


state 35

    (30) opera -> OPERA LPAREN operators . COMMA operand COMMA operand RPAREN SEMICOLON line

    COMMA           shift and go to state 51


state 36

    (31) operators -> PLUS .

    COMMA           reduce using rule 31 (operators -> PLUS .)


state 37

    (32) operators -> MINUS .

    COMMA           reduce using rule 32 (operators -> MINUS .)


state 38

    (33) operators -> DIVIDE .

    COMMA           reduce using rule 33 (operators -> DIVIDE .)


state 39

    (34) operators -> ASTR .

    COMMA           reduce using rule 34 (operators -> ASTR .)


state 40

    (35) operators -> TIMES .

    COMMA           reduce using rule 35 (operators -> TIMES .)


state 41

    (10) loop -> LOOP LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 52
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 42

    (11) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    DOTDOT          shift and go to state 53


state 43

    (29) expression -> ID .

    SEMICOLON       reduce using rule 29 (expression -> ID .)
    RPAREN          reduce using rule 29 (expression -> ID .)


state 44

    (25) variable -> LET ID ASSIGN INT . SEMICOLON line

    SEMICOLON       shift and go to state 54


state 45

    (26) variable -> LET ID ASSIGN expression . SEMICOLON line

    SEMICOLON       shift and go to state 55


state 46

    (27) expression -> TRUE .

    SEMICOLON       reduce using rule 27 (expression -> TRUE .)
    RPAREN          reduce using rule 27 (expression -> TRUE .)


state 47

    (28) expression -> FALSE .

    SEMICOLON       reduce using rule 28 (expression -> FALSE .)
    RPAREN          reduce using rule 28 (expression -> FALSE .)


state 48

    (12) move -> MOVE LPAREN QUOT ID . QUOT COMMA expression RPAREN SEMICOLON line

    QUOT            shift and go to state 56


state 49

    (19) delay -> DELAY LPAREN INT COMMA . unit RPAREN SEMICOLON line
    (20) unit -> . QUOT MIN QUOT
    (21) unit -> . QUOT MIL QUOT
    (22) unit -> . QUOT SEG QUOT

    QUOT            shift and go to state 58

    unit                           shift and go to state 57

state 50

    (23) println -> PRINT EXPR LPAREN QUOT . text QUOT RPAREN SEMICOLON line
    (24) text -> . ID

    ID              shift and go to state 60

    text                           shift and go to state 59

state 51

    (30) opera -> OPERA LPAREN operators COMMA . operand COMMA operand RPAREN SEMICOLON line
    (36) operand -> . INT
    (37) operand -> . ID
    (38) operand -> . OPERA

    INT             shift and go to state 63
    ID              shift and go to state 64
    OPERA           shift and go to state 61

    operand                        shift and go to state 62

state 52

    (10) loop -> LOOP LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 10 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)


state 53

    (11) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 65


state 54

    (25) variable -> LET ID ASSIGN INT SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 66
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 55

    (26) variable -> LET ID ASSIGN expression SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 67
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 56

    (12) move -> MOVE LPAREN QUOT ID QUOT . COMMA expression RPAREN SEMICOLON line

    COMMA           shift and go to state 68


state 57

    (19) delay -> DELAY LPAREN INT COMMA unit . RPAREN SEMICOLON line

    RPAREN          shift and go to state 69


state 58

    (20) unit -> QUOT . MIN QUOT
    (21) unit -> QUOT . MIL QUOT
    (22) unit -> QUOT . SEG QUOT

    MIN             shift and go to state 70
    MIL             shift and go to state 71
    SEG             shift and go to state 72


state 59

    (23) println -> PRINT EXPR LPAREN QUOT text . QUOT RPAREN SEMICOLON line

    QUOT            shift and go to state 73


state 60

    (24) text -> ID .

    QUOT            reduce using rule 24 (text -> ID .)


state 61

    (38) operand -> OPERA .

    COMMA           reduce using rule 38 (operand -> OPERA .)
    RPAREN          reduce using rule 38 (operand -> OPERA .)


state 62

    (30) opera -> OPERA LPAREN operators COMMA operand . COMMA operand RPAREN SEMICOLON line

    COMMA           shift and go to state 74


state 63

    (36) operand -> INT .

    COMMA           reduce using rule 36 (operand -> INT .)
    RPAREN          reduce using rule 36 (operand -> INT .)


state 64

    (37) operand -> ID .

    COMMA           reduce using rule 37 (operand -> ID .)
    RPAREN          reduce using rule 37 (operand -> ID .)


state 65

    (11) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 75


state 66

    (25) variable -> LET ID ASSIGN INT SEMICOLON line .

    RCRLBRACKET     reduce using rule 25 (variable -> LET ID ASSIGN INT SEMICOLON line .)


state 67

    (26) variable -> LET ID ASSIGN expression SEMICOLON line .

    RCRLBRACKET     reduce using rule 26 (variable -> LET ID ASSIGN expression SEMICOLON line .)


state 68

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA . expression RPAREN SEMICOLON line
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . ID

    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 43

    expression                     shift and go to state 76

state 69

    (19) delay -> DELAY LPAREN INT COMMA unit RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 77


state 70

    (20) unit -> QUOT MIN . QUOT

    QUOT            shift and go to state 78


state 71

    (21) unit -> QUOT MIL . QUOT

    QUOT            shift and go to state 79


state 72

    (22) unit -> QUOT SEG . QUOT

    QUOT            shift and go to state 80


state 73

    (23) println -> PRINT EXPR LPAREN QUOT text QUOT . RPAREN SEMICOLON line

    RPAREN          shift and go to state 81


state 74

    (30) opera -> OPERA LPAREN operators COMMA operand COMMA . operand RPAREN SEMICOLON line
    (36) operand -> . INT
    (37) operand -> . ID
    (38) operand -> . OPERA

    INT             shift and go to state 63
    ID              shift and go to state 64
    OPERA           shift and go to state 61

    operand                        shift and go to state 82

state 75

    (11) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 83
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 76

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA expression . RPAREN SEMICOLON line

    RPAREN          shift and go to state 84


state 77

    (19) delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 85
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 78

    (20) unit -> QUOT MIN QUOT .

    RPAREN          reduce using rule 20 (unit -> QUOT MIN QUOT .)


state 79

    (21) unit -> QUOT MIL QUOT .

    RPAREN          reduce using rule 21 (unit -> QUOT MIL QUOT .)


state 80

    (22) unit -> QUOT SEG QUOT .

    RPAREN          reduce using rule 22 (unit -> QUOT SEG QUOT .)


state 81

    (23) println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 86


state 82

    (30) opera -> OPERA LPAREN operators COMMA operand COMMA operand . RPAREN SEMICOLON line

    RPAREN          shift and go to state 87


state 83

    (11) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 88


state 84

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 89


state 85

    (19) delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 19 (delay -> DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line .)


state 86

    (23) println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 90
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 87

    (30) opera -> OPERA LPAREN operators COMMA operand COMMA operand RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 91


state 88

    (11) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 92
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 89

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 93
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 90

    (23) println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 23 (println -> PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line .)


state 91

    (30) opera -> OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON . line
    (2) line -> . loop
    (3) line -> . for
    (4) line -> . variable
    (5) line -> . move
    (6) line -> . delay
    (7) line -> . println
    (8) line -> . opera
    (9) line -> . empty
    (10) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (11) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (25) variable -> . LET ID ASSIGN INT SEMICOLON line
    (26) variable -> . LET ID ASSIGN expression SEMICOLON line
    (12) move -> . MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line
    (19) delay -> . DELAY LPAREN INT COMMA unit RPAREN SEMICOLON line
    (23) println -> . PRINT EXPR LPAREN QUOT text QUOT RPAREN SEMICOLON line
    (30) opera -> . OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line
    (39) empty -> .

    LOOP            shift and go to state 14
    FOR             shift and go to state 15
    LET             shift and go to state 16
    MOVE            shift and go to state 17
    DELAY           shift and go to state 18
    PRINT           shift and go to state 19
    OPERA           shift and go to state 20
    RCRLBRACKET     reduce using rule 39 (empty -> .)

    line                           shift and go to state 94
    loop                           shift and go to state 6
    for                            shift and go to state 7
    variable                       shift and go to state 8
    move                           shift and go to state 9
    delay                          shift and go to state 10
    println                        shift and go to state 11
    opera                          shift and go to state 12
    empty                          shift and go to state 13

state 92

    (11) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 11 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)


state 93

    (12) move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 12 (move -> MOVE LPAREN QUOT ID QUOT COMMA expression RPAREN SEMICOLON line .)


state 94

    (30) opera -> OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 30 (opera -> OPERA LPAREN operators COMMA operand COMMA operand RPAREN SEMICOLON line .)

