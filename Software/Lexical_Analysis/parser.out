Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    INTEGER
    RANGE
    RETURN
    WRONG_ID

Grammar

Rule 0     S' -> main
Rule 1     main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
Rule 2     line -> main
Rule 3     line -> loop
Rule 4     line -> for
Rule 5     line -> while
Rule 6     line -> if
Rule 7     line -> let
Rule 8     line -> move
Rule 9     line -> moveList
Rule 10    line -> delay
Rule 11    line -> println
Rule 12    line -> break
Rule 13    line -> empty
Rule 14    loop -> LOOP LCRLBRACKET line RCRLBRACKET line
Rule 15    for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
Rule 16    while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
Rule 17    while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET line
Rule 18    let -> LET ID ASSIGN operand SEMICOLON
Rule 19    let -> LET ID ASSIGN bool SEMICOLON line
Rule 20    operand -> INT
Rule 21    operand -> opera
Rule 22    operand -> ID
Rule 23    bool -> TRUE
Rule 24    bool -> FALSE
Rule 25    bool -> ID
Rule 26    opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN
Rule 27    operator -> PLUS
Rule 28    operator -> MINUS
Rule 29    operator -> DIVIDE
Rule 30    operator -> ASTR
Rule 31    operator -> TIMES
Rule 32    move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
Rule 33    moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
Rule 34    fingerList -> STRING COMMA STRING
Rule 35    fingerList -> STRING COMMA fingerList
Rule 36    delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
Rule 37    unit -> QUOT MIN QUOT
Rule 38    unit -> QUOT MIL QUOT
Rule 39    unit -> QUOT SEG QUOT
Rule 40    println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
Rule 41    println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line
Rule 42    text -> QUOT ID QUOT
Rule 43    elseiforelse -> elseif
Rule 44    elseiforelse -> else
Rule 45    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line
Rule 46    if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 47    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
Rule 48    elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
Rule 49    else -> ELSE LCRLBRACKET line RCRLBRACKET line
Rule 50    compare -> EQEQ
Rule 51    compare -> LTE
Rule 52    compare -> GTE
Rule 53    compare -> LT
Rule 54    compare -> GT
Rule 55    expression -> operand
Rule 56    expression -> bool
Rule 57    break -> BREAK
Rule 58    empty -> <empty>

Terminals, with rules where they appear

ARROW                : 
ASSIGN               : 18 19
ASTR                 : 30
BREAK                : 57
COMMA                : 26 26 32 33 34 35 36
DELAY                : 36
DIVIDE               : 29
DOTDOT               : 15
ELSE                 : 49
ELSEIF               : 47 48
EQEQ                 : 50
EXPR                 : 40 41
FALSE                : 24
FN                   : 1
FOR                  : 15
GT                   : 54
GTE                  : 52
ID                   : 15 18 19 22 25 41 42
IF                   : 45 46
IN                   : 15
INT                  : 15 15 20 36
INTEGER              : 
LCRLBRACKET          : 1 14 15 16 17 45 46 47 48 49
LET                  : 18 19
LOOP                 : 14
LPAREN               : 1 16 26 32 33 36 40 41
LSQRBRACKET          : 33
LT                   : 53
LTE                  : 51
MAIN                 : 1
MIL                  : 38
MIN                  : 37
MINUS                : 28
MOVE                 : 32 33
OPERA                : 26
PLUS                 : 27
PRINT                : 40 41
QUOT                 : 37 37 38 38 39 39 42 42
RANGE                : 
RCRLBRACKET          : 1 14 15 16 17 45 46 47 48 49
RETURN               : 
RPAREN               : 1 16 26 32 33 36 40 41
RSQRBRACKET          : 33
SEG                  : 39
SEMICOLON            : 18 19 32 33 36 40 41
STRING               : 32 34 34 35 36 40
TIMES                : 31
TRUE                 : 17 23
WHILE                : 16 17
WRONG_ID             : 
error                : 

Nonterminals, with rules where they appear

bool                 : 19 32 33 56
break                : 12
compare              : 16 45 46 47 48
delay                : 10
else                 : 44
elseif               : 43
elseiforelse         : 46 48
empty                : 13
expression           : 16 16 45 45 46 46 47 47 48 48
fingerList           : 33 35
for                  : 4
if                   : 6
let                  : 7
line                 : 1 14 14 15 15 16 16 17 17 19 32 33 36 40 41 45 45 46 47 47 48 49 49
loop                 : 3
main                 : 2 0
move                 : 8
moveList             : 9
opera                : 21
operand              : 18 26 26 55
operator             : 26
println              : 11
text                 : 
unit                 : 
while                : 5

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    FN              shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> FN . MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    MAIN            shift and go to state 3


state 3

    (1) main -> FN MAIN . LPAREN RPAREN LCRLBRACKET line RCRLBRACKET

    LPAREN          shift and go to state 4


state 4

    (1) main -> FN MAIN LPAREN . RPAREN LCRLBRACKET line RCRLBRACKET

    RPAREN          shift and go to state 5


state 5

    (1) main -> FN MAIN LPAREN RPAREN . LCRLBRACKET line RCRLBRACKET

    LCRLBRACKET     shift and go to state 6


state 6

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET . line RCRLBRACKET
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 7
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 7

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line . RCRLBRACKET

    RCRLBRACKET     shift and go to state 29


state 8

    (2) line -> main .

    RCRLBRACKET     reduce using rule 2 (line -> main .)


state 9

    (3) line -> loop .

    RCRLBRACKET     reduce using rule 3 (line -> loop .)


state 10

    (4) line -> for .

    RCRLBRACKET     reduce using rule 4 (line -> for .)


state 11

    (5) line -> while .

    RCRLBRACKET     reduce using rule 5 (line -> while .)


state 12

    (6) line -> if .

    RCRLBRACKET     reduce using rule 6 (line -> if .)


state 13

    (7) line -> let .

    RCRLBRACKET     reduce using rule 7 (line -> let .)


state 14

    (8) line -> move .

    RCRLBRACKET     reduce using rule 8 (line -> move .)


state 15

    (9) line -> moveList .

    RCRLBRACKET     reduce using rule 9 (line -> moveList .)


state 16

    (10) line -> delay .

    RCRLBRACKET     reduce using rule 10 (line -> delay .)


state 17

    (11) line -> println .

    RCRLBRACKET     reduce using rule 11 (line -> println .)


state 18

    (12) line -> break .

    RCRLBRACKET     reduce using rule 12 (line -> break .)


state 19

    (13) line -> empty .

    RCRLBRACKET     reduce using rule 13 (line -> empty .)


state 20

    (14) loop -> LOOP . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 30


state 21

    (15) for -> FOR . ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    ID              shift and go to state 31


state 22

    (16) while -> WHILE . LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> WHILE . TRUE LCRLBRACKET line RCRLBRACKET line

    LPAREN          shift and go to state 32
    TRUE            shift and go to state 33


state 23

    (45) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> IF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (55) expression -> . operand
    (56) expression -> . bool
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    OPERA           shift and go to state 42

    expression                     shift and go to state 34
    operand                        shift and go to state 35
    bool                           shift and go to state 36
    opera                          shift and go to state 38

state 24

    (18) let -> LET . ID ASSIGN operand SEMICOLON
    (19) let -> LET . ID ASSIGN bool SEMICOLON line

    ID              shift and go to state 43


state 25

    (32) move -> MOVE . LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> MOVE . LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    LPAREN          shift and go to state 44


state 26

    (36) delay -> DELAY . LPAREN INT COMMA STRING RPAREN SEMICOLON line

    LPAREN          shift and go to state 45


state 27

    (40) println -> PRINT . EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> PRINT . EXPR LPAREN ID RPAREN SEMICOLON line

    EXPR            shift and go to state 46


state 28

    (57) break -> BREAK .

    RCRLBRACKET     reduce using rule 57 (break -> BREAK .)


state 29

    (1) main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .

    $end            reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)
    RCRLBRACKET     reduce using rule 1 (main -> FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET .)


state 30

    (14) loop -> LOOP LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 47
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 31

    (15) for -> FOR ID . IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    IN              shift and go to state 48


state 32

    (16) while -> WHILE LPAREN . expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (55) expression -> . operand
    (56) expression -> . bool
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    OPERA           shift and go to state 42

    expression                     shift and go to state 49
    operand                        shift and go to state 35
    bool                           shift and go to state 36
    opera                          shift and go to state 38

state 33

    (17) while -> WHILE TRUE . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 50


state 34

    (45) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> IF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (50) compare -> . EQEQ
    (51) compare -> . LTE
    (52) compare -> . GTE
    (53) compare -> . LT
    (54) compare -> . GT

    EQEQ            shift and go to state 52
    LTE             shift and go to state 53
    GTE             shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56

    compare                        shift and go to state 51

state 35

    (55) expression -> operand .

    EQEQ            reduce using rule 55 (expression -> operand .)
    LTE             reduce using rule 55 (expression -> operand .)
    GTE             reduce using rule 55 (expression -> operand .)
    LT              reduce using rule 55 (expression -> operand .)
    GT              reduce using rule 55 (expression -> operand .)
    LCRLBRACKET     reduce using rule 55 (expression -> operand .)
    RPAREN          reduce using rule 55 (expression -> operand .)


state 36

    (56) expression -> bool .

    EQEQ            reduce using rule 56 (expression -> bool .)
    LTE             reduce using rule 56 (expression -> bool .)
    GTE             reduce using rule 56 (expression -> bool .)
    LT              reduce using rule 56 (expression -> bool .)
    GT              reduce using rule 56 (expression -> bool .)
    LCRLBRACKET     reduce using rule 56 (expression -> bool .)
    RPAREN          reduce using rule 56 (expression -> bool .)


state 37

    (20) operand -> INT .

    EQEQ            reduce using rule 20 (operand -> INT .)
    LTE             reduce using rule 20 (operand -> INT .)
    GTE             reduce using rule 20 (operand -> INT .)
    LT              reduce using rule 20 (operand -> INT .)
    GT              reduce using rule 20 (operand -> INT .)
    LCRLBRACKET     reduce using rule 20 (operand -> INT .)
    SEMICOLON       reduce using rule 20 (operand -> INT .)
    RPAREN          reduce using rule 20 (operand -> INT .)
    COMMA           reduce using rule 20 (operand -> INT .)


state 38

    (21) operand -> opera .

    EQEQ            reduce using rule 21 (operand -> opera .)
    LTE             reduce using rule 21 (operand -> opera .)
    GTE             reduce using rule 21 (operand -> opera .)
    LT              reduce using rule 21 (operand -> opera .)
    GT              reduce using rule 21 (operand -> opera .)
    LCRLBRACKET     reduce using rule 21 (operand -> opera .)
    SEMICOLON       reduce using rule 21 (operand -> opera .)
    RPAREN          reduce using rule 21 (operand -> opera .)
    COMMA           reduce using rule 21 (operand -> opera .)


state 39

    (22) operand -> ID .
    (25) bool -> ID .

  ! reduce/reduce conflict for EQEQ resolved using rule 22 (operand -> ID .)
  ! reduce/reduce conflict for LTE resolved using rule 22 (operand -> ID .)
  ! reduce/reduce conflict for GTE resolved using rule 22 (operand -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 22 (operand -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 22 (operand -> ID .)
  ! reduce/reduce conflict for LCRLBRACKET resolved using rule 22 (operand -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (operand -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (operand -> ID .)
    EQEQ            reduce using rule 22 (operand -> ID .)
    LTE             reduce using rule 22 (operand -> ID .)
    GTE             reduce using rule 22 (operand -> ID .)
    LT              reduce using rule 22 (operand -> ID .)
    GT              reduce using rule 22 (operand -> ID .)
    LCRLBRACKET     reduce using rule 22 (operand -> ID .)
    SEMICOLON       reduce using rule 22 (operand -> ID .)
    RPAREN          reduce using rule 22 (operand -> ID .)

  ! EQEQ            [ reduce using rule 25 (bool -> ID .) ]
  ! LTE             [ reduce using rule 25 (bool -> ID .) ]
  ! GTE             [ reduce using rule 25 (bool -> ID .) ]
  ! LT              [ reduce using rule 25 (bool -> ID .) ]
  ! GT              [ reduce using rule 25 (bool -> ID .) ]
  ! LCRLBRACKET     [ reduce using rule 25 (bool -> ID .) ]
  ! SEMICOLON       [ reduce using rule 25 (bool -> ID .) ]
  ! RPAREN          [ reduce using rule 25 (bool -> ID .) ]


state 40

    (23) bool -> TRUE .

    EQEQ            reduce using rule 23 (bool -> TRUE .)
    LTE             reduce using rule 23 (bool -> TRUE .)
    GTE             reduce using rule 23 (bool -> TRUE .)
    LT              reduce using rule 23 (bool -> TRUE .)
    GT              reduce using rule 23 (bool -> TRUE .)
    LCRLBRACKET     reduce using rule 23 (bool -> TRUE .)
    SEMICOLON       reduce using rule 23 (bool -> TRUE .)
    RPAREN          reduce using rule 23 (bool -> TRUE .)


state 41

    (24) bool -> FALSE .

    EQEQ            reduce using rule 24 (bool -> FALSE .)
    LTE             reduce using rule 24 (bool -> FALSE .)
    GTE             reduce using rule 24 (bool -> FALSE .)
    LT              reduce using rule 24 (bool -> FALSE .)
    GT              reduce using rule 24 (bool -> FALSE .)
    LCRLBRACKET     reduce using rule 24 (bool -> FALSE .)
    SEMICOLON       reduce using rule 24 (bool -> FALSE .)
    RPAREN          reduce using rule 24 (bool -> FALSE .)


state 42

    (26) opera -> OPERA . LPAREN operator COMMA operand COMMA operand RPAREN

    LPAREN          shift and go to state 57


state 43

    (18) let -> LET ID . ASSIGN operand SEMICOLON
    (19) let -> LET ID . ASSIGN bool SEMICOLON line

    ASSIGN          shift and go to state 58


state 44

    (32) move -> MOVE LPAREN . STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> MOVE LPAREN . LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    STRING          shift and go to state 59
    LSQRBRACKET     shift and go to state 60


state 45

    (36) delay -> DELAY LPAREN . INT COMMA STRING RPAREN SEMICOLON line

    INT             shift and go to state 61


state 46

    (40) println -> PRINT EXPR . LPAREN STRING RPAREN SEMICOLON line
    (41) println -> PRINT EXPR . LPAREN ID RPAREN SEMICOLON line

    LPAREN          shift and go to state 62


state 47

    (14) loop -> LOOP LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 63


state 48

    (15) for -> FOR ID IN . INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 64


state 49

    (16) while -> WHILE LPAREN expression . compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (50) compare -> . EQEQ
    (51) compare -> . LTE
    (52) compare -> . GTE
    (53) compare -> . LT
    (54) compare -> . GT

    EQEQ            shift and go to state 52
    LTE             shift and go to state 53
    GTE             shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56

    compare                        shift and go to state 65

state 50

    (17) while -> WHILE TRUE LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 66
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 51

    (45) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> IF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (55) expression -> . operand
    (56) expression -> . bool
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    OPERA           shift and go to state 42

    expression                     shift and go to state 67
    operand                        shift and go to state 35
    bool                           shift and go to state 36
    opera                          shift and go to state 38

state 52

    (50) compare -> EQEQ .

    INT             reduce using rule 50 (compare -> EQEQ .)
    ID              reduce using rule 50 (compare -> EQEQ .)
    TRUE            reduce using rule 50 (compare -> EQEQ .)
    FALSE           reduce using rule 50 (compare -> EQEQ .)
    OPERA           reduce using rule 50 (compare -> EQEQ .)


state 53

    (51) compare -> LTE .

    INT             reduce using rule 51 (compare -> LTE .)
    ID              reduce using rule 51 (compare -> LTE .)
    TRUE            reduce using rule 51 (compare -> LTE .)
    FALSE           reduce using rule 51 (compare -> LTE .)
    OPERA           reduce using rule 51 (compare -> LTE .)


state 54

    (52) compare -> GTE .

    INT             reduce using rule 52 (compare -> GTE .)
    ID              reduce using rule 52 (compare -> GTE .)
    TRUE            reduce using rule 52 (compare -> GTE .)
    FALSE           reduce using rule 52 (compare -> GTE .)
    OPERA           reduce using rule 52 (compare -> GTE .)


state 55

    (53) compare -> LT .

    INT             reduce using rule 53 (compare -> LT .)
    ID              reduce using rule 53 (compare -> LT .)
    TRUE            reduce using rule 53 (compare -> LT .)
    FALSE           reduce using rule 53 (compare -> LT .)
    OPERA           reduce using rule 53 (compare -> LT .)


state 56

    (54) compare -> GT .

    INT             reduce using rule 54 (compare -> GT .)
    ID              reduce using rule 54 (compare -> GT .)
    TRUE            reduce using rule 54 (compare -> GT .)
    FALSE           reduce using rule 54 (compare -> GT .)
    OPERA           reduce using rule 54 (compare -> GT .)


state 57

    (26) opera -> OPERA LPAREN . operator COMMA operand COMMA operand RPAREN
    (27) operator -> . PLUS
    (28) operator -> . MINUS
    (29) operator -> . DIVIDE
    (30) operator -> . ASTR
    (31) operator -> . TIMES

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    DIVIDE          shift and go to state 71
    ASTR            shift and go to state 72
    TIMES           shift and go to state 73

    operator                       shift and go to state 68

state 58

    (18) let -> LET ID ASSIGN . operand SEMICOLON
    (19) let -> LET ID ASSIGN . bool SEMICOLON line
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    OPERA           shift and go to state 42

    operand                        shift and go to state 74
    bool                           shift and go to state 75
    opera                          shift and go to state 38

state 59

    (32) move -> MOVE LPAREN STRING . COMMA bool RPAREN SEMICOLON line

    COMMA           shift and go to state 76


state 60

    (33) moveList -> MOVE LPAREN LSQRBRACKET . fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (34) fingerList -> . STRING COMMA STRING
    (35) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 78

    fingerList                     shift and go to state 77

state 61

    (36) delay -> DELAY LPAREN INT . COMMA STRING RPAREN SEMICOLON line

    COMMA           shift and go to state 79


state 62

    (40) println -> PRINT EXPR LPAREN . STRING RPAREN SEMICOLON line
    (41) println -> PRINT EXPR LPAREN . ID RPAREN SEMICOLON line

    STRING          shift and go to state 80
    ID              shift and go to state 81


state 63

    (14) loop -> LOOP LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 82
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 64

    (15) for -> FOR ID IN INT . DOTDOT INT LCRLBRACKET line RCRLBRACKET line

    DOTDOT          shift and go to state 83


state 65

    (16) while -> WHILE LPAREN expression compare . expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (55) expression -> . operand
    (56) expression -> . bool
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    OPERA           shift and go to state 42

    expression                     shift and go to state 84
    operand                        shift and go to state 35
    bool                           shift and go to state 36
    opera                          shift and go to state 38

state 66

    (17) while -> WHILE TRUE LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 85


state 67

    (45) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET line
    (46) if -> IF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 86


state 68

    (26) opera -> OPERA LPAREN operator . COMMA operand COMMA operand RPAREN

    COMMA           shift and go to state 87


state 69

    (27) operator -> PLUS .

    COMMA           reduce using rule 27 (operator -> PLUS .)


state 70

    (28) operator -> MINUS .

    COMMA           reduce using rule 28 (operator -> MINUS .)


state 71

    (29) operator -> DIVIDE .

    COMMA           reduce using rule 29 (operator -> DIVIDE .)


state 72

    (30) operator -> ASTR .

    COMMA           reduce using rule 30 (operator -> ASTR .)


state 73

    (31) operator -> TIMES .

    COMMA           reduce using rule 31 (operator -> TIMES .)


state 74

    (18) let -> LET ID ASSIGN operand . SEMICOLON

    SEMICOLON       shift and go to state 88


state 75

    (19) let -> LET ID ASSIGN bool . SEMICOLON line

    SEMICOLON       shift and go to state 89


state 76

    (32) move -> MOVE LPAREN STRING COMMA . bool RPAREN SEMICOLON line
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 91

    bool                           shift and go to state 90

state 77

    (33) moveList -> MOVE LPAREN LSQRBRACKET fingerList . RSQRBRACKET COMMA bool RPAREN SEMICOLON line

    RSQRBRACKET     shift and go to state 92


state 78

    (34) fingerList -> STRING . COMMA STRING
    (35) fingerList -> STRING . COMMA fingerList

    COMMA           shift and go to state 93


state 79

    (36) delay -> DELAY LPAREN INT COMMA . STRING RPAREN SEMICOLON line

    STRING          shift and go to state 94


state 80

    (40) println -> PRINT EXPR LPAREN STRING . RPAREN SEMICOLON line

    RPAREN          shift and go to state 95


state 81

    (41) println -> PRINT EXPR LPAREN ID . RPAREN SEMICOLON line

    RPAREN          shift and go to state 96


state 82

    (14) loop -> LOOP LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 14 (loop -> LOOP LCRLBRACKET line RCRLBRACKET line .)


state 83

    (15) for -> FOR ID IN INT DOTDOT . INT LCRLBRACKET line RCRLBRACKET line

    INT             shift and go to state 97


state 84

    (16) while -> WHILE LPAREN expression compare expression . RPAREN LCRLBRACKET line RCRLBRACKET line

    RPAREN          shift and go to state 98


state 85

    (17) while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 99
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 86

    (45) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET line
    (46) if -> IF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 100
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 87

    (26) opera -> OPERA LPAREN operator COMMA . operand COMMA operand RPAREN
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 102
    OPERA           shift and go to state 42

    operand                        shift and go to state 101
    opera                          shift and go to state 38

state 88

    (18) let -> LET ID ASSIGN operand SEMICOLON .

    RCRLBRACKET     reduce using rule 18 (let -> LET ID ASSIGN operand SEMICOLON .)


state 89

    (19) let -> LET ID ASSIGN bool SEMICOLON . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 103
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 90

    (32) move -> MOVE LPAREN STRING COMMA bool . RPAREN SEMICOLON line

    RPAREN          shift and go to state 104


state 91

    (25) bool -> ID .

    RPAREN          reduce using rule 25 (bool -> ID .)


state 92

    (33) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET . COMMA bool RPAREN SEMICOLON line

    COMMA           shift and go to state 105


state 93

    (34) fingerList -> STRING COMMA . STRING
    (35) fingerList -> STRING COMMA . fingerList
    (34) fingerList -> . STRING COMMA STRING
    (35) fingerList -> . STRING COMMA fingerList

    STRING          shift and go to state 106

    fingerList                     shift and go to state 107

state 94

    (36) delay -> DELAY LPAREN INT COMMA STRING . RPAREN SEMICOLON line

    RPAREN          shift and go to state 108


state 95

    (40) println -> PRINT EXPR LPAREN STRING RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 109


state 96

    (41) println -> PRINT EXPR LPAREN ID RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 110


state 97

    (15) for -> FOR ID IN INT DOTDOT INT . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 111


state 98

    (16) while -> WHILE LPAREN expression compare expression RPAREN . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 112


state 99

    (17) while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 17 (while -> WHILE TRUE LCRLBRACKET line RCRLBRACKET line .)


state 100

    (45) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET line
    (46) if -> IF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 113


state 101

    (26) opera -> OPERA LPAREN operator COMMA operand . COMMA operand RPAREN

    COMMA           shift and go to state 114


state 102

    (22) operand -> ID .

    COMMA           reduce using rule 22 (operand -> ID .)
    RPAREN          reduce using rule 22 (operand -> ID .)


state 103

    (19) let -> LET ID ASSIGN bool SEMICOLON line .

    RCRLBRACKET     reduce using rule 19 (let -> LET ID ASSIGN bool SEMICOLON line .)


state 104

    (32) move -> MOVE LPAREN STRING COMMA bool RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 115


state 105

    (33) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA . bool RPAREN SEMICOLON line
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID

    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 91

    bool                           shift and go to state 116

state 106

    (34) fingerList -> STRING COMMA STRING .
    (34) fingerList -> STRING . COMMA STRING
    (35) fingerList -> STRING . COMMA fingerList

    RSQRBRACKET     reduce using rule 34 (fingerList -> STRING COMMA STRING .)
    COMMA           shift and go to state 93


state 107

    (35) fingerList -> STRING COMMA fingerList .

    RSQRBRACKET     reduce using rule 35 (fingerList -> STRING COMMA fingerList .)


state 108

    (36) delay -> DELAY LPAREN INT COMMA STRING RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 117


state 109

    (40) println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 118
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 110

    (41) println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 119
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 111

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 120
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 112

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 121
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 113

    (45) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . line
    (46) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (43) elseiforelse -> . elseif
    (44) elseiforelse -> . else
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .
    (47) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (48) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (49) else -> . ELSE LCRLBRACKET line RCRLBRACKET line

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)
    ELSEIF          shift and go to state 126
    ELSE            shift and go to state 127

    line                           shift and go to state 122
    elseiforelse                   shift and go to state 123
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19
    elseif                         shift and go to state 124
    else                           shift and go to state 125

state 114

    (26) opera -> OPERA LPAREN operator COMMA operand COMMA . operand RPAREN
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 102
    OPERA           shift and go to state 42

    operand                        shift and go to state 128
    opera                          shift and go to state 38

state 115

    (32) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 129
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 116

    (33) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool . RPAREN SEMICOLON line

    RPAREN          shift and go to state 130


state 117

    (36) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 131
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 118

    (40) println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 40 (println -> PRINT EXPR LPAREN STRING RPAREN SEMICOLON line .)


state 119

    (41) println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 41 (println -> PRINT EXPR LPAREN ID RPAREN SEMICOLON line .)


state 120

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 132


state 121

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 133


state 122

    (45) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 45 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET line .)


state 123

    (46) if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    RCRLBRACKET     reduce using rule 46 (if -> IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)


state 124

    (43) elseiforelse -> elseif .

    RCRLBRACKET     reduce using rule 43 (elseiforelse -> elseif .)


state 125

    (44) elseiforelse -> else .

    RCRLBRACKET     reduce using rule 44 (elseiforelse -> else .)


state 126

    (47) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET line
    (48) elseif -> ELSEIF . expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (55) expression -> . operand
    (56) expression -> . bool
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    OPERA           shift and go to state 42

    expression                     shift and go to state 134
    operand                        shift and go to state 35
    bool                           shift and go to state 36
    opera                          shift and go to state 38

state 127

    (49) else -> ELSE . LCRLBRACKET line RCRLBRACKET line

    LCRLBRACKET     shift and go to state 135


state 128

    (26) opera -> OPERA LPAREN operator COMMA operand COMMA operand . RPAREN

    RPAREN          shift and go to state 136


state 129

    (32) move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 32 (move -> MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line .)


state 130

    (33) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN . SEMICOLON line

    SEMICOLON       shift and go to state 137


state 131

    (36) delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 36 (delay -> DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line .)


state 132

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 138
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 133

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 139
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 134

    (47) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET line
    (48) elseif -> ELSEIF expression . compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (50) compare -> . EQEQ
    (51) compare -> . LTE
    (52) compare -> . GTE
    (53) compare -> . LT
    (54) compare -> . GT

    EQEQ            shift and go to state 52
    LTE             shift and go to state 53
    GTE             shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56

    compare                        shift and go to state 140

state 135

    (49) else -> ELSE LCRLBRACKET . line RCRLBRACKET line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 141
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 136

    (26) opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .

    EQEQ            reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LTE             reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GTE             reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LT              reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    GT              reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    LCRLBRACKET     reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    SEMICOLON       reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    RPAREN          reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)
    COMMA           reduce using rule 26 (opera -> OPERA LPAREN operator COMMA operand COMMA operand RPAREN .)


state 137

    (33) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 142
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 138

    (15) for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 15 (for -> FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line .)


state 139

    (16) while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 16 (while -> WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line .)


state 140

    (47) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET line
    (48) elseif -> ELSEIF expression compare . expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (55) expression -> . operand
    (56) expression -> . bool
    (20) operand -> . INT
    (21) operand -> . opera
    (22) operand -> . ID
    (23) bool -> . TRUE
    (24) bool -> . FALSE
    (25) bool -> . ID
    (26) opera -> . OPERA LPAREN operator COMMA operand COMMA operand RPAREN

    INT             shift and go to state 37
    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    OPERA           shift and go to state 42

    expression                     shift and go to state 143
    operand                        shift and go to state 35
    bool                           shift and go to state 36
    opera                          shift and go to state 38

state 141

    (49) else -> ELSE LCRLBRACKET line . RCRLBRACKET line

    RCRLBRACKET     shift and go to state 144


state 142

    (33) moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line .

    RCRLBRACKET     reduce using rule 33 (moveList -> MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line .)


state 143

    (47) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET line
    (48) elseif -> ELSEIF expression compare expression . LCRLBRACKET line RCRLBRACKET elseiforelse

    LCRLBRACKET     shift and go to state 145


state 144

    (49) else -> ELSE LCRLBRACKET line RCRLBRACKET . line
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 146
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 145

    (47) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET line
    (48) elseif -> ELSEIF expression compare expression LCRLBRACKET . line RCRLBRACKET elseiforelse
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)

    line                           shift and go to state 147
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19

state 146

    (49) else -> ELSE LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 49 (else -> ELSE LCRLBRACKET line RCRLBRACKET line .)


state 147

    (47) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET line
    (48) elseif -> ELSEIF expression compare expression LCRLBRACKET line . RCRLBRACKET elseiforelse

    RCRLBRACKET     shift and go to state 148


state 148

    (47) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . line
    (48) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET . elseiforelse
    (2) line -> . main
    (3) line -> . loop
    (4) line -> . for
    (5) line -> . while
    (6) line -> . if
    (7) line -> . let
    (8) line -> . move
    (9) line -> . moveList
    (10) line -> . delay
    (11) line -> . println
    (12) line -> . break
    (13) line -> . empty
    (43) elseiforelse -> . elseif
    (44) elseiforelse -> . else
    (1) main -> . FN MAIN LPAREN RPAREN LCRLBRACKET line RCRLBRACKET
    (14) loop -> . LOOP LCRLBRACKET line RCRLBRACKET line
    (15) for -> . FOR ID IN INT DOTDOT INT LCRLBRACKET line RCRLBRACKET line
    (16) while -> . WHILE LPAREN expression compare expression RPAREN LCRLBRACKET line RCRLBRACKET line
    (17) while -> . WHILE TRUE LCRLBRACKET line RCRLBRACKET line
    (45) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (46) if -> . IF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (18) let -> . LET ID ASSIGN operand SEMICOLON
    (19) let -> . LET ID ASSIGN bool SEMICOLON line
    (32) move -> . MOVE LPAREN STRING COMMA bool RPAREN SEMICOLON line
    (33) moveList -> . MOVE LPAREN LSQRBRACKET fingerList RSQRBRACKET COMMA bool RPAREN SEMICOLON line
    (36) delay -> . DELAY LPAREN INT COMMA STRING RPAREN SEMICOLON line
    (40) println -> . PRINT EXPR LPAREN STRING RPAREN SEMICOLON line
    (41) println -> . PRINT EXPR LPAREN ID RPAREN SEMICOLON line
    (57) break -> . BREAK
    (58) empty -> .
    (47) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line
    (48) elseif -> . ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse
    (49) else -> . ELSE LCRLBRACKET line RCRLBRACKET line

    FN              shift and go to state 2
    LOOP            shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    LET             shift and go to state 24
    MOVE            shift and go to state 25
    DELAY           shift and go to state 26
    PRINT           shift and go to state 27
    BREAK           shift and go to state 28
    RCRLBRACKET     reduce using rule 58 (empty -> .)
    ELSEIF          shift and go to state 126
    ELSE            shift and go to state 127

    line                           shift and go to state 149
    elseiforelse                   shift and go to state 150
    main                           shift and go to state 8
    loop                           shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 12
    let                            shift and go to state 13
    move                           shift and go to state 14
    moveList                       shift and go to state 15
    delay                          shift and go to state 16
    println                        shift and go to state 17
    break                          shift and go to state 18
    empty                          shift and go to state 19
    elseif                         shift and go to state 124
    else                           shift and go to state 125

state 149

    (47) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .

    RCRLBRACKET     reduce using rule 47 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET line .)


state 150

    (48) elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .

    RCRLBRACKET     reduce using rule 48 (elseif -> ELSEIF expression compare expression LCRLBRACKET line RCRLBRACKET elseiforelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 39 resolved using rule (operand -> ID)
WARNING: rejected rule (bool -> ID) in state 39
